{
  "bench/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "bench/benchmark.py": {
    "classes": [
      "BenchResult"
    ],
    "functions": [
      "mean_ci95",
      "run_benchmark"
    ],
    "methods": [
      "mean_ci95",
      "run_benchmark",
      "toy_episode"
    ],
    "total_items": 6
  },
  "bench/run_baselines.py": {
    "classes": [
      "BenchmarkConfig",
      "BenchmarkResult"
    ],
    "functions": [
      "get_env_hash",
      "get_system_info",
      "run_benchmark",
      "get_benchmark_configs",
      "save_results",
      "update_results_doc",
      "main"
    ],
    "methods": [
      "to_dict",
      "to_dict",
      "get_env_hash",
      "get_system_info",
      "run_benchmark",
      "get_benchmark_configs",
      "save_results",
      "update_results_doc",
      "main",
      "to_dict",
      "get_env_hash",
      "get_system_info",
      "run_benchmark",
      "get_benchmark_configs",
      "save_results",
      "update_results_doc",
      "main"
    ],
    "total_items": 26
  },
  "comprehensive_math_validation.py": {
    "classes": [],
    "functions": [
      "test_mathematical_core_principles",
      "test_research_algorithm_correctness"
    ],
    "methods": [],
    "total_items": 2
  },
  "demo_advanced_features.py": {
    "classes": [],
    "functions": [
      "demo_advanced_features"
    ],
    "methods": [],
    "total_items": 1
  },
  "demo_constraint_engine.py": {
    "classes": [
      "AdvancedQualitativeReasoner"
    ],
    "functions": [
      "demo_thermal_system",
      "demo_fluid_system",
      "demo_security_configuration",
      "main"
    ],
    "methods": [
      "__init__",
      "add_quantity",
      "add_constraint",
      "check_all_constraints",
      "demonstrate_security",
      "demonstrate_evaluation_methods",
      "demo_thermal_system",
      "demo_fluid_system",
      "demo_security_configuration",
      "main"
    ],
    "total_items": 15
  },
  "demo_core_types.py": {
    "classes": [],
    "functions": [
      "demonstrate_qualitative_values",
      "demonstrate_qualitative_directions",
      "demonstrate_qualitative_quantities",
      "demonstrate_qualitative_states",
      "demonstrate_qualitative_processes",
      "demonstrate_utility_functions",
      "demonstrate_advanced_features",
      "main"
    ],
    "methods": [],
    "total_items": 8
  },
  "demo_hardware_acceleration.py": {
    "classes": [],
    "functions": [
      "create_sample_meta_learning_task",
      "demo_hardware_detection",
      "demo_prototypical_networks_with_hardware",
      "demo_test_time_compute_with_mixed_precision",
      "demo_multi_gpu_maml",
      "demo_optimal_batch_size",
      "demo_memory_optimization",
      "run_comprehensive_hardware_demo"
    ],
    "methods": [],
    "total_items": 8
  },
  "demo_meta_learning_complete.py": {
    "classes": [
      "ComprehensiveMetaModel"
    ],
    "functions": [
      "demo_all_fixme_solutions_comprehensive",
      "demo_specific_solution_combinations",
      "demo_modular_configurations",
      "demo_overlapping_solution_handling",
      "demo_research_vs_performance_comparison",
      "demo_educational_walkthrough",
      "main"
    ],
    "methods": [
      "__init__",
      "forward",
      "extract_features",
      "demo_all_fixme_solutions_comprehensive",
      "demo_specific_solution_combinations",
      "demo_modular_configurations",
      "demo_overlapping_solution_handling",
      "demo_research_vs_performance_comparison",
      "demo_educational_walkthrough",
      "main"
    ],
    "total_items": 18
  },
  "demo_meta_learning_solutions.py": {
    "classes": [
      "DemoModel"
    ],
    "functions": [
      "demo_solution_1_process_reward_model",
      "demo_solution_2_consistency_verification",
      "demo_solution_3_gradient_verification",
      "demo_solution_4_attention_reasoning",
      "demo_solution_5_feature_reasoning",
      "demo_solution_6_prototype_reasoning",
      "demo_comprehensive_solution",
      "demo_fast_optimized_solution",
      "main"
    ],
    "methods": [
      "__init__",
      "forward",
      "demo_solution_1_process_reward_model",
      "demo_solution_2_consistency_verification",
      "demo_solution_3_gradient_verification",
      "demo_solution_4_attention_reasoning",
      "demo_solution_5_feature_reasoning",
      "demo_solution_6_prototype_reasoning",
      "demo_comprehensive_solution",
      "demo_fast_optimized_solution",
      "main"
    ],
    "total_items": 21
  },
  "demo_modular_core.py": {
    "classes": [],
    "functions": [
      "demo_basic_usage",
      "demo_factory_functions",
      "demo_security_features",
      "demo_analysis_and_visualization",
      "main"
    ],
    "methods": [],
    "total_items": 5
  },
  "demo_modular_system.py": {
    "classes": [],
    "functions": [
      "demonstrate_modular_holographic_memory"
    ],
    "methods": [],
    "total_items": 1
  },
  "demo_simple.py": {
    "classes": [
      "SimpleMetaModel"
    ],
    "functions": [
      "main"
    ],
    "methods": [
      "__init__",
      "forward",
      "main"
    ],
    "total_items": 5
  },
  "demo_visualization_engine.py": {
    "classes": [],
    "functions": [
      "demo_basic_visualization",
      "demo_advanced_reporting",
      "demo_export_formats",
      "demo_history_rendering",
      "demo_configuration_options",
      "demo_analysis_integration",
      "main"
    ],
    "methods": [],
    "total_items": 7
  },
  "demo_working.py": {
    "classes": [],
    "functions": [
      "main"
    ],
    "methods": [],
    "total_items": 1
  },
  "meta_learning/__init__.py": {
    "classes": [],
    "functions": [
      "check_performance_env",
      "get_build_info"
    ],
    "methods": [],
    "total_items": 2
  },
  "meta_learning/core.py": {
    "classes": [
      "ProtoHead",
      "Conv4",
      "PrototypicalConfig",
      "PrototypicalNetworks",
      "SyntheticOmniglot"
    ],
    "functions": [
      "make_episode",
      "get_dataset"
    ],
    "methods": [
      "__init__",
      "forward",
      "__init__",
      "forward",
      "_initialize_weights",
      "__init__",
      "__init__",
      "forward",
      "make_episode",
      "get_dataset",
      "__init__",
      "__len__",
      "__getitem__",
      "__init__",
      "forward",
      "_initialize_weights",
      "__init__",
      "__init__",
      "forward",
      "make_episode",
      "get_dataset",
      "__init__",
      "__len__",
      "__getitem__",
      "__init__",
      "__init__",
      "forward",
      "make_episode",
      "get_dataset",
      "__init__",
      "__len__",
      "__getitem__",
      "__init__",
      "forward",
      "make_episode",
      "get_dataset",
      "__init__",
      "__len__",
      "__getitem__",
      "__init__",
      "__len__",
      "__getitem__"
    ],
    "total_items": 49
  },
  "meta_learning/maml.py": {
    "classes": [
      "MAMLConfig",
      "MAMLLearner"
    ],
    "functions": [
      "train_maml_step",
      "evaluate_maml"
    ],
    "methods": [
      "__init__",
      "__init__",
      "forward",
      "_clone_model",
      "_update_adapted_model",
      "_update_adapted_model_v2",
      "meta_loss",
      "train_maml_step",
      "evaluate_maml",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "_clone_model",
      "_update_adapted_model",
      "_update_adapted_model_v2",
      "meta_loss",
      "train_maml_step",
      "evaluate_maml",
      "__init__",
      "forward"
    ],
    "total_items": 25
  },
  "meta_learning/test_time_compute.py": {
    "classes": [
      "TestTimeComputeConfig",
      "TestTimeComputeScaler"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "__init__",
      "_get_feature_dim",
      "forward",
      "_estimate_confidence",
      "_refine_predictions",
      "_ensemble_refinement",
      "_temperature_refinement",
      "_adaptive_refinement",
      "_combine_predictions",
      "get_adaptive_threshold",
      "__init__",
      "_get_feature_dim",
      "forward",
      "_estimate_confidence",
      "_refine_predictions",
      "_ensemble_refinement",
      "_temperature_refinement",
      "_adaptive_refinement",
      "_combine_predictions",
      "get_adaptive_threshold"
    ],
    "total_items": 23
  },
  "meta_learning_configurations_demo.py": {
    "classes": [],
    "functions": [
      "print_banner",
      "demonstrate_solution_catalog",
      "demonstrate_configuration_system",
      "demonstrate_individual_solutions",
      "run_comprehensive_experiment",
      "run_solution_comparison",
      "demonstrate_user_configuration",
      "main"
    ],
    "methods": [],
    "total_items": 8
  },
  "meta_learning_implementations_guide.py": {
    "classes": [],
    "functions": [
      "demonstrate_uncertainty_aware_distance",
      "demonstrate_multiscale_feature_aggregator",
      "demonstrate_hierarchical_prototypes",
      "demonstrate_combined_usage",
      "demonstrate_configuration_flexibility",
      "main"
    ],
    "methods": [],
    "total_items": 6
  },
  "meta_learning_methods_demo.py": {
    "classes": [],
    "functions": [
      "generate_test_data",
      "demonstrate_difficulty_estimation_solutions",
      "demonstrate_confidence_interval_solutions",
      "demonstrate_configuration_flexibility",
      "run_comprehensive_demo"
    ],
    "methods": [],
    "total_items": 5
  },
  "meta_learning_validation_test.py": {
    "classes": [],
    "functions": [
      "test_uncertainty_aware_distance",
      "test_multiscale_feature_aggregator",
      "test_hierarchical_prototypes",
      "test_factory_functions_and_presets",
      "test_integration_pipeline",
      "run_comprehensive_validation"
    ],
    "methods": [],
    "total_items": 6
  },
  "packages/meta_learning/src/meta_learning/research_patches/__init__.py": {
    "classes": [],
    "functions": [
      "research_compliance_check",
      "fix_all_research_issues",
      "demo_research_workflow"
    ],
    "methods": [],
    "total_items": 3
  },
  "packages/meta_learning/src/meta_learning/research_patches/batch_norm_policy_patch.py": {
    "classes": [
      "EpisodicBatchNormPolicy",
      "EpisodicNormalizationGuard"
    ],
    "functions": [
      "apply_episodic_bn_policy",
      "validate_few_shot_model"
    ],
    "methods": [
      "__init__",
      "apply_to_model",
      "_freeze_bn_stats",
      "_replace_batch_norm",
      "_get_replacement_norm",
      "restore_original_state",
      "__init__",
      "validate_episode_isolation",
      "validate_few_shot_model",
      "__init__",
      "validate_episode_isolation",
      "validate_few_shot_model"
    ],
    "total_items": 16
  },
  "packages/meta_learning/src/meta_learning/research_patches/determinism_hooks.py": {
    "classes": [
      "DeterminismManager",
      "ReproducibilityReport"
    ],
    "functions": [
      "deterministic_context",
      "setup_deterministic_environment",
      "create_deterministic_dataloader"
    ],
    "methods": [
      "__init__",
      "enable_full_determinism",
      "_set_all_seeds",
      "_configure_torch_determinism",
      "_configure_cuda_determinism",
      "_configure_numpy_determinism",
      "_configure_python_determinism",
      "create_deterministic_worker_init_fn",
      "worker_init_fn",
      "validate_determinism",
      "restore_original_settings",
      "generate_environment_report",
      "generate_experiment_hash",
      "create_deterministic_dataloader",
      "generate_environment_report",
      "generate_experiment_hash",
      "create_deterministic_dataloader"
    ],
    "total_items": 22
  },
  "packages/meta_learning/src/meta_learning/research_patches/evaluation_harness.py": {
    "classes": [
      "EpisodeConfig",
      "EvaluationResults",
      "StratifiedEpisodeSampler",
      "FewShotEvaluationHarness"
    ],
    "functions": [
      "quick_evaluation",
      "publication_evaluation"
    ],
    "methods": [
      "__post_init__",
      "to_dict",
      "format_report",
      "__init__",
      "sample_episode",
      "__init__",
      "_validate_configuration",
      "evaluate",
      "_evaluate_single_episode",
      "_compute_statistics",
      "run_statistical_tests",
      "publication_evaluation",
      "dummy_dataset_loader",
      "__post_init__",
      "to_dict",
      "format_report",
      "__init__",
      "sample_episode",
      "__init__",
      "_validate_configuration",
      "evaluate",
      "_evaluate_single_episode",
      "_compute_statistics",
      "run_statistical_tests",
      "publication_evaluation",
      "dummy_dataset_loader",
      "__init__",
      "sample_episode",
      "__init__",
      "_validate_configuration",
      "evaluate",
      "_evaluate_single_episode",
      "_compute_statistics",
      "run_statistical_tests",
      "publication_evaluation",
      "dummy_dataset_loader",
      "__init__",
      "_validate_configuration",
      "evaluate",
      "_evaluate_single_episode",
      "_compute_statistics",
      "run_statistical_tests",
      "publication_evaluation",
      "dummy_dataset_loader"
    ],
    "total_items": 50
  },
  "packages/meta_learning/src/meta_learning/research_patches/leakage_guards.py": {
    "classes": [
      "DataLeakageDetector",
      "LeakagePreventionContext",
      "ComprehensiveLeakageValidator"
    ],
    "functions": [
      "leakage_guard",
      "validate_episode",
      "leakage_free_context"
    ],
    "methods": [
      "__init__",
      "validate_episode_construction",
      "validate_normalization_statistics",
      "validate_feature_scaling",
      "validate_dataset_split",
      "__init__",
      "__enter__",
      "__exit__",
      "_apply_batchnorm_policy",
      "_restore_batchnorm_policy",
      "leakage_guard",
      "evaluate_episode",
      "decorator",
      "wrapper",
      "__init__",
      "validate_full_pipeline",
      "generate_leakage_report",
      "__init__",
      "__enter__",
      "__exit__",
      "_apply_batchnorm_policy",
      "_restore_batchnorm_policy",
      "leakage_guard",
      "evaluate_episode",
      "decorator",
      "wrapper",
      "__init__",
      "validate_full_pipeline",
      "generate_leakage_report",
      "__init__",
      "validate_full_pipeline",
      "generate_leakage_report"
    ],
    "total_items": 38
  },
  "scripts/run_full_test_suite.py": {
    "classes": [],
    "functions": [
      "run_command",
      "check_dependencies",
      "run_unit_tests",
      "run_integration_tests",
      "run_property_tests",
      "run_fixme_validation",
      "run_research_accuracy_tests",
      "generate_coverage_report",
      "run_quick_tests",
      "main"
    ],
    "methods": [],
    "total_items": 10
  },
  "simple_5min_demo.py": {
    "classes": [],
    "functions": [
      "main"
    ],
    "methods": [],
    "total_items": 1
  },
  "src/meta_learning/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "src/meta_learning/algos/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "src/meta_learning/algos/protonet/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "src/meta_learning/algos/protonet/episode_utils.py": {
    "classes": [],
    "functions": [
      "make_episode",
      "fit_episode"
    ],
    "methods": [],
    "total_items": 2
  },
  "src/meta_learning/algos/protonet/proto_head.py": {
    "classes": [
      "ProtoHead"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "forward"
    ],
    "total_items": 3
  },
  "src/meta_learning/cli.py": {
    "classes": [],
    "functions": [
      "create_dataset_loader",
      "sample_episode",
      "create_model",
      "fit_command",
      "eval_command",
      "benchmark_command",
      "main"
    ],
    "methods": [],
    "total_items": 7
  },
  "src/meta_learning/core/math_utils.py": {
    "classes": [],
    "functions": [
      "pairwise_sqeuclidean",
      "cosine_logits"
    ],
    "methods": [],
    "total_items": 2
  },
  "src/meta_learning/datasets.py": {
    "classes": [
      "FewShotDataset",
      "OmniglotDataset",
      "MiniImageNetDataset",
      "CIFAR_FS_Dataset"
    ],
    "functions": [
      "make_episode",
      "get_dataset",
      "get_transforms",
      "print_dataset_info"
    ],
    "methods": [
      "__init__",
      "download",
      "_load_data",
      "__len__",
      "__getitem__",
      "download",
      "_verify_checksum",
      "_load_data",
      "download",
      "_use_cifar_proxy",
      "_load_data",
      "download",
      "_load_data",
      "make_episode",
      "get_dataset",
      "print_dataset_info",
      "download",
      "_verify_checksum",
      "_load_data",
      "download",
      "_use_cifar_proxy",
      "_load_data",
      "download",
      "_load_data",
      "make_episode",
      "get_dataset",
      "print_dataset_info",
      "download",
      "_use_cifar_proxy",
      "_load_data",
      "download",
      "_load_data",
      "make_episode",
      "get_dataset",
      "print_dataset_info",
      "download",
      "_load_data",
      "make_episode",
      "get_dataset",
      "print_dataset_info"
    ],
    "total_items": 48
  },
  "src/meta_learning/meta_learning_modules/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "src/meta_learning/meta_learning_modules/batch_norm_policy.py": {
    "classes": [
      "BatchNormPolicy",
      "BatchNormManager",
      "EpisodicBatchNormMonitor",
      "EpisodicMode"
    ],
    "functions": [
      "apply_bn_policy_to_model"
    ],
    "methods": [
      "__init__",
      "prepare_model_for_episodes",
      "_freeze_batch_norm_stats",
      "_replace_with_instance_norm",
      "replace_bn_recursive",
      "_replace_with_layer_norm",
      "replace_bn_recursive",
      "_enable_stat_reset",
      "reset_statistics",
      "restore_original_state",
      "__init__",
      "capture_initial_stats",
      "check_for_changes",
      "assert_no_leakage",
      "__init__",
      "__enter__",
      "__exit__",
      "apply_bn_policy_to_model",
      "__init__",
      "prepare_model_for_episodes",
      "_freeze_batch_norm_stats",
      "_replace_with_instance_norm",
      "replace_bn_recursive",
      "_replace_with_layer_norm",
      "replace_bn_recursive",
      "_enable_stat_reset",
      "reset_statistics",
      "restore_original_state",
      "__init__",
      "capture_initial_stats",
      "check_for_changes",
      "assert_no_leakage",
      "__init__",
      "__enter__",
      "__exit__",
      "apply_bn_policy_to_model",
      "__init__",
      "capture_initial_stats",
      "check_for_changes",
      "assert_no_leakage",
      "__init__",
      "__enter__",
      "__exit__",
      "apply_bn_policy_to_model",
      "__init__",
      "__enter__",
      "__exit__",
      "apply_bn_policy_to_model"
    ],
    "total_items": 53
  },
  "src/meta_learning/meta_learning_modules/config.py": {
    "classes": [
      "MetaLearningConfig"
    ],
    "functions": [
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_configurations",
      "validate_config",
      "print_configuration_summary"
    ],
    "methods": [
      "__post_init__",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_configurations",
      "validate_config",
      "print_configuration_summary"
    ],
    "total_items": 14
  },
  "src/meta_learning/meta_learning_modules/config_factory.py": {
    "classes": [
      "UnifiedMetaLearningConfig"
    ],
    "functions": [
      "create_all_algorithms_enabled_config",
      "create_paper_exact_config",
      "create_performance_optimized_config",
      "create_specific_solution_config",
      "create_modular_config",
      "simplified_analysis_component_config",
      "create_educational_config",
      "get_available_solutions",
      "print_solution_summary",
      "validate_config"
    ],
    "methods": [
      "create_all_algorithms_enabled_config",
      "create_paper_exact_config",
      "create_performance_optimized_config",
      "create_specific_solution_config",
      "create_modular_config",
      "simplified_analysis_component_config",
      "create_educational_config",
      "get_available_solutions",
      "print_solution_summary"
    ],
    "total_items": 20
  },
  "src/meta_learning/meta_learning_modules/continual_meta_learning.py": {
    "classes": [
      "ContinualMetaConfig",
      "OnlineMetaConfig",
      "EpisodicMemoryConfig",
      "OnlineMetaLearner"
    ],
    "functions": [
      "create_continual_learner"
    ],
    "methods": [
      "__init__",
      "learn_task",
      "_adapt_to_task",
      "_compute_adaptive_lr",
      "_compute_meta_loss",
      "_compute_ewc_loss",
      "_compute_ewc_loss_diagonal",
      "_compute_fisher_information_diagonal",
      "_compute_full_fisher_information",
      "_compute_ewc_loss_full_fisher",
      "_compute_evcl_loss",
      "_update_parameter_importance",
      "_compute_empirical_fisher",
      "_compute_exact_fisher",
      "_compute_kfac_fisher",
      "_store_previous_parameters",
      "_experience_replay",
      "_prioritized_sample",
      "_store_experience",
      "_update_task_similarities",
      "_forward_with_params",
      "evaluate_continual_performance",
      "get_memory_statistics",
      "__init__",
      "learn_task",
      "_adapt_to_task",
      "_compute_adaptive_lr",
      "_compute_meta_loss",
      "_compute_ewc_loss",
      "_compute_ewc_loss_diagonal",
      "_compute_fisher_information_diagonal",
      "_compute_full_fisher_information",
      "_compute_ewc_loss_full_fisher",
      "_compute_evcl_loss",
      "_update_parameter_importance",
      "_compute_empirical_fisher",
      "_compute_exact_fisher",
      "_compute_kfac_fisher",
      "_store_previous_parameters",
      "_experience_replay",
      "_prioritized_sample",
      "_store_experience",
      "_update_task_similarities",
      "_forward_with_params",
      "evaluate_continual_performance",
      "get_memory_statistics",
      "__init__",
      "learn_task",
      "_adapt_to_task",
      "_compute_adaptive_lr",
      "_compute_meta_loss",
      "_compute_ewc_loss",
      "_compute_ewc_loss_diagonal",
      "_compute_fisher_information_diagonal",
      "_compute_full_fisher_information",
      "_compute_ewc_loss_full_fisher",
      "_compute_evcl_loss",
      "_update_parameter_importance",
      "_compute_empirical_fisher",
      "_compute_exact_fisher",
      "_compute_kfac_fisher",
      "_store_previous_parameters",
      "_experience_replay",
      "_prioritized_sample",
      "_store_experience",
      "_update_task_similarities",
      "_forward_with_params",
      "evaluate_continual_performance",
      "get_memory_statistics",
      "__init__",
      "learn_task",
      "_adapt_to_task",
      "_compute_adaptive_lr",
      "_compute_meta_loss",
      "_compute_ewc_loss",
      "_compute_ewc_loss_diagonal",
      "_compute_fisher_information_diagonal",
      "_compute_full_fisher_information",
      "_compute_ewc_loss_full_fisher",
      "_compute_evcl_loss",
      "_update_parameter_importance",
      "_compute_empirical_fisher",
      "_compute_exact_fisher",
      "_compute_kfac_fisher",
      "_store_previous_parameters",
      "_experience_replay",
      "_prioritized_sample",
      "_store_experience",
      "_update_task_similarities",
      "_forward_with_params",
      "evaluate_continual_performance",
      "get_memory_statistics"
    ],
    "total_items": 97
  },
  "src/meta_learning/meta_learning_modules/determinism_utils.py": {
    "classes": [
      "DeterminismConfig",
      "DeterminismChecker",
      "ReproducibilityManager"
    ],
    "functions": [
      "seed_everything",
      "create_worker_init_fn",
      "deterministic_context",
      "compute_tensor_hash",
      "verify_episode_determinism"
    ],
    "methods": [
      "__post_init__",
      "seed_everything",
      "create_worker_init_fn",
      "worker_init_fn",
      "__init__",
      "record_state",
      "verify_determinism",
      "assert_deterministic",
      "compute_tensor_hash",
      "verify_episode_determinism",
      "__init__",
      "_compute_config_hash",
      "setup_experiment",
      "verify_setup",
      "test_operation",
      "dummy_episode_generator",
      "__init__",
      "record_state",
      "verify_determinism",
      "assert_deterministic",
      "compute_tensor_hash",
      "verify_episode_determinism",
      "__init__",
      "_compute_config_hash",
      "setup_experiment",
      "verify_setup",
      "test_operation",
      "dummy_episode_generator",
      "__init__",
      "_compute_config_hash",
      "setup_experiment",
      "verify_setup",
      "test_operation",
      "dummy_episode_generator"
    ],
    "total_items": 42
  },
  "src/meta_learning/meta_learning_modules/episode_contract.py": {
    "classes": [
      "EpisodeValidationLevel",
      "EpisodeContract"
    ],
    "functions": [
      "create_episode_contract",
      "validate_episode_batch"
    ],
    "methods": [
      "__post_init__",
      "_validate_episode",
      "_validate_parameters",
      "_validate_tensor_shapes",
      "_validate_label_consistency",
      "_validate_class_distribution",
      "_validate_no_data_leakage",
      "_validate_tensor_properties",
      "validate_prediction_output",
      "get_episode_summary",
      "from_raw_data",
      "to_device",
      "__repr__",
      "create_episode_contract",
      "validate_episode_batch",
      "__post_init__",
      "_validate_episode",
      "_validate_parameters",
      "_validate_tensor_shapes",
      "_validate_label_consistency",
      "_validate_class_distribution",
      "_validate_no_data_leakage",
      "_validate_tensor_properties",
      "validate_prediction_output",
      "get_episode_summary",
      "from_raw_data",
      "to_device",
      "__repr__",
      "create_episode_contract",
      "validate_episode_batch"
    ],
    "total_items": 34
  },
  "src/meta_learning/meta_learning_modules/episode_protocol.py": {
    "classes": [
      "EpisodeConfig",
      "EpisodeProtocol"
    ],
    "functions": [
      "remap_labels_to_episode",
      "validate_episode_integrity",
      "seed_episode_generation",
      "create_dataset_splits"
    ],
    "methods": [
      "__post_init__",
      "__init__",
      "generate_episode",
      "generate_episode_batch",
      "_validate_episode",
      "remap_labels_to_episode",
      "validate_episode_integrity",
      "create_dataset_splits",
      "__init__",
      "generate_episode",
      "generate_episode_batch",
      "_validate_episode",
      "remap_labels_to_episode",
      "validate_episode_integrity",
      "create_dataset_splits"
    ],
    "total_items": 21
  },
  "src/meta_learning/meta_learning_modules/few_shot_learning.py": {
    "classes": [
      "StandaloneMonteCarloDropoutDistance",
      "StandaloneEvidentialUncertaintyDistance",
      "StandaloneDeepEnsembleDistance",
      "StandaloneBayesianNeuralDistance",
      "UncertaintyAwareDistance",
      "HierarchicalPrototypes",
      "TaskAdaptivePrototypes",
      "FewShotLearningConfig"
    ],
    "functions": [
      "create_few_shot_learner",
      "simplified_analysis_few_shot_system"
    ],
    "methods": [
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "kl_divergence",
      "__init__",
      "forward",
      "_monte_carlo_dropout_distance",
      "_deep_ensembles_distance",
      "_evidential_distance",
      "__init__",
      "forward",
      "_multi_level_prototypes",
      "_tree_structured_prototypes",
      "_compositional_prototypes",
      "__init__",
      "forward",
      "_attention_based_adaptation",
      "_meta_learning_adaptation",
      "__init__",
      "_set_default_params",
      "create_uncertainty_estimator",
      "create_hierarchical_prototypes",
      "create_task_adaptive_prototypes",
      "simplified_analysis_few_shot_system",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "kl_divergence",
      "__init__",
      "forward",
      "_monte_carlo_dropout_distance",
      "_deep_ensembles_distance",
      "_evidential_distance",
      "__init__",
      "forward",
      "_multi_level_prototypes",
      "_tree_structured_prototypes",
      "_compositional_prototypes",
      "__init__",
      "forward",
      "_attention_based_adaptation",
      "_meta_learning_adaptation",
      "__init__",
      "_set_default_params",
      "create_uncertainty_estimator",
      "create_hierarchical_prototypes",
      "create_task_adaptive_prototypes",
      "simplified_analysis_few_shot_system",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "kl_divergence",
      "__init__",
      "forward",
      "_monte_carlo_dropout_distance",
      "_deep_ensembles_distance",
      "_evidential_distance",
      "__init__",
      "forward",
      "_multi_level_prototypes",
      "_tree_structured_prototypes",
      "_compositional_prototypes",
      "__init__",
      "forward",
      "_attention_based_adaptation",
      "_meta_learning_adaptation",
      "__init__",
      "_set_default_params",
      "create_uncertainty_estimator",
      "create_hierarchical_prototypes",
      "create_task_adaptive_prototypes",
      "simplified_analysis_few_shot_system",
      "__init__",
      "forward",
      "kl_divergence",
      "__init__",
      "forward",
      "_monte_carlo_dropout_distance",
      "_deep_ensembles_distance",
      "_evidential_distance",
      "__init__",
      "forward",
      "_multi_level_prototypes",
      "_tree_structured_prototypes",
      "_compositional_prototypes",
      "__init__",
      "forward",
      "_attention_based_adaptation",
      "_meta_learning_adaptation",
      "__init__",
      "_set_default_params",
      "create_uncertainty_estimator",
      "create_hierarchical_prototypes",
      "create_task_adaptive_prototypes",
      "simplified_analysis_few_shot_system",
      "__init__",
      "forward",
      "_monte_carlo_dropout_distance",
      "_deep_ensembles_distance",
      "_evidential_distance",
      "__init__",
      "forward",
      "_multi_level_prototypes",
      "_tree_structured_prototypes",
      "_compositional_prototypes",
      "__init__",
      "forward",
      "_attention_based_adaptation",
      "_meta_learning_adaptation",
      "__init__",
      "_set_default_params",
      "create_uncertainty_estimator",
      "create_hierarchical_prototypes",
      "create_task_adaptive_prototypes",
      "simplified_analysis_few_shot_system",
      "__init__",
      "forward",
      "_multi_level_prototypes",
      "_tree_structured_prototypes",
      "_compositional_prototypes",
      "__init__",
      "forward",
      "_attention_based_adaptation",
      "_meta_learning_adaptation",
      "__init__",
      "_set_default_params",
      "create_uncertainty_estimator",
      "create_hierarchical_prototypes",
      "create_task_adaptive_prototypes",
      "simplified_analysis_few_shot_system",
      "__init__",
      "forward",
      "_attention_based_adaptation",
      "_meta_learning_adaptation",
      "__init__",
      "_set_default_params",
      "create_uncertainty_estimator",
      "create_hierarchical_prototypes",
      "create_task_adaptive_prototypes",
      "simplified_analysis_few_shot_system",
      "__init__",
      "_set_default_params",
      "create_uncertainty_estimator",
      "create_hierarchical_prototypes",
      "create_task_adaptive_prototypes",
      "simplified_analysis_few_shot_system"
    ],
    "total_items": 165
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/adaptive_components.py": {
    "classes": [
      "TaskContextMethod",
      "AdaptiveAttentionMethod",
      "TaskAdaptiveConfig",
      "AttentionBasedTaskAdaptation",
      "MetaLearningTaskAdaptation",
      "ContextDependentTaskAdaptation",
      "TransformerBasedTaskAdaptation",
      "TaskAdaptivePrototypes",
      "AdaptiveComponentsImplementations"
    ],
    "functions": [
      "create_task_adaptive_prototypes",
      "create_attention_adaptive_prototypes",
      "create_meta_adaptive_prototypes",
      "create_context_adaptive_prototypes",
      "create_transformer_adaptive_prototypes",
      "_patch_adaptive_methods"
    ],
    "methods": [
      "__init__",
      "forward",
      "_compute_maml_gradient_encoding",
      "_compute_task_statistics_encoding",
      "_compute_cross_class_interaction_encoding",
      "_compute_support_query_joint_encoding",
      "_encode_intra_support_relations",
      "_compute_self_attention",
      "_compute_task_conditioned_adaptation",
      "_compute_cross_attention_adaptation",
      "_compute_learnable_mixing",
      "__init__",
      "inner_loop_update",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "mahalanobis_distance",
      "forward",
      "__init__",
      "forward",
      "_finn_2017_maml",
      "_nichol_2018_reptile",
      "_triantafillou_2019_prototypical_maml",
      "_adaptive_prototype_maml",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_pool_context",
      "forward",
      "__init__",
      "_create_sinusoidal_encoding",
      "forward",
      "__init__",
      "forward",
      "create_attention_adaptive_prototypes",
      "create_meta_adaptive_prototypes",
      "create_context_adaptive_prototypes",
      "create_transformer_adaptive_prototypes",
      "_compute_fisher_information_context",
      "_compute_set2set_context",
      "_compute_relational_context",
      "_compute_prototypes",
      "_compute_prototypes_with_network",
      "_compute_prototype_loss",
      "_mahalanobis_distance",
      "__init__",
      "forward",
      "_compute_maml_gradient_encoding",
      "_compute_task_statistics_encoding",
      "_compute_cross_class_interaction_encoding",
      "_compute_support_query_joint_encoding",
      "_encode_intra_support_relations",
      "_compute_self_attention",
      "_compute_task_conditioned_adaptation",
      "_compute_cross_attention_adaptation",
      "_compute_learnable_mixing",
      "__init__",
      "inner_loop_update",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "mahalanobis_distance",
      "forward",
      "__init__",
      "forward",
      "_finn_2017_maml",
      "_nichol_2018_reptile",
      "_triantafillou_2019_prototypical_maml",
      "_adaptive_prototype_maml",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_pool_context",
      "forward",
      "__init__",
      "_create_sinusoidal_encoding",
      "forward",
      "__init__",
      "forward",
      "create_attention_adaptive_prototypes",
      "create_meta_adaptive_prototypes",
      "create_context_adaptive_prototypes",
      "create_transformer_adaptive_prototypes",
      "_compute_fisher_information_context",
      "_compute_set2set_context",
      "_compute_relational_context",
      "_compute_prototypes",
      "_compute_prototypes_with_network",
      "_compute_prototype_loss",
      "_mahalanobis_distance",
      "__init__",
      "forward",
      "_compute_maml_gradient_encoding",
      "_compute_task_statistics_encoding",
      "_compute_cross_class_interaction_encoding",
      "_compute_support_query_joint_encoding",
      "_encode_intra_support_relations",
      "_compute_self_attention",
      "_compute_task_conditioned_adaptation",
      "_compute_cross_attention_adaptation",
      "_compute_learnable_mixing",
      "__init__",
      "inner_loop_update",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "mahalanobis_distance",
      "forward",
      "__init__",
      "forward",
      "_finn_2017_maml",
      "_nichol_2018_reptile",
      "_triantafillou_2019_prototypical_maml",
      "_adaptive_prototype_maml",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_pool_context",
      "forward",
      "__init__",
      "_create_sinusoidal_encoding",
      "forward",
      "__init__",
      "forward",
      "create_attention_adaptive_prototypes",
      "create_meta_adaptive_prototypes",
      "create_context_adaptive_prototypes",
      "create_transformer_adaptive_prototypes",
      "_compute_fisher_information_context",
      "_compute_set2set_context",
      "_compute_relational_context",
      "_compute_prototypes",
      "_compute_prototypes_with_network",
      "_compute_prototype_loss",
      "_mahalanobis_distance",
      "__init__",
      "forward",
      "_compute_maml_gradient_encoding",
      "_compute_task_statistics_encoding",
      "_compute_cross_class_interaction_encoding",
      "_compute_support_query_joint_encoding",
      "_encode_intra_support_relations",
      "_compute_self_attention",
      "_compute_task_conditioned_adaptation",
      "_compute_cross_attention_adaptation",
      "_compute_learnable_mixing",
      "__init__",
      "inner_loop_update",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "mahalanobis_distance",
      "forward",
      "__init__",
      "forward",
      "_finn_2017_maml",
      "_nichol_2018_reptile",
      "_triantafillou_2019_prototypical_maml",
      "_adaptive_prototype_maml",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_pool_context",
      "forward",
      "__init__",
      "_create_sinusoidal_encoding",
      "forward",
      "__init__",
      "forward",
      "create_attention_adaptive_prototypes",
      "create_meta_adaptive_prototypes",
      "create_context_adaptive_prototypes",
      "create_transformer_adaptive_prototypes",
      "_compute_fisher_information_context",
      "_compute_set2set_context",
      "_compute_relational_context",
      "_compute_prototypes",
      "_compute_prototypes_with_network",
      "_compute_prototype_loss",
      "_mahalanobis_distance",
      "__init__",
      "inner_loop_update",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "mahalanobis_distance",
      "forward",
      "__init__",
      "forward",
      "_finn_2017_maml",
      "_nichol_2018_reptile",
      "_triantafillou_2019_prototypical_maml",
      "_adaptive_prototype_maml",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_pool_context",
      "forward",
      "__init__",
      "_create_sinusoidal_encoding",
      "forward",
      "__init__",
      "forward",
      "create_attention_adaptive_prototypes",
      "create_meta_adaptive_prototypes",
      "create_context_adaptive_prototypes",
      "create_transformer_adaptive_prototypes",
      "_compute_fisher_information_context",
      "_compute_set2set_context",
      "_compute_relational_context",
      "_compute_prototypes",
      "_compute_prototypes_with_network",
      "_compute_prototype_loss",
      "_mahalanobis_distance",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_pool_context",
      "forward",
      "__init__",
      "_create_sinusoidal_encoding",
      "forward",
      "__init__",
      "forward",
      "create_attention_adaptive_prototypes",
      "create_meta_adaptive_prototypes",
      "create_context_adaptive_prototypes",
      "create_transformer_adaptive_prototypes",
      "_compute_fisher_information_context",
      "_compute_set2set_context",
      "_compute_relational_context",
      "_compute_prototypes",
      "_compute_prototypes_with_network",
      "_compute_prototype_loss",
      "_mahalanobis_distance",
      "__init__",
      "_create_sinusoidal_encoding",
      "forward",
      "__init__",
      "forward",
      "create_attention_adaptive_prototypes",
      "create_meta_adaptive_prototypes",
      "create_context_adaptive_prototypes",
      "create_transformer_adaptive_prototypes",
      "_compute_fisher_information_context",
      "_compute_set2set_context",
      "_compute_relational_context",
      "_compute_prototypes",
      "_compute_prototypes_with_network",
      "_compute_prototype_loss",
      "_mahalanobis_distance",
      "__init__",
      "forward",
      "create_attention_adaptive_prototypes",
      "create_meta_adaptive_prototypes",
      "create_context_adaptive_prototypes",
      "create_transformer_adaptive_prototypes",
      "_compute_fisher_information_context",
      "_compute_set2set_context",
      "_compute_relational_context",
      "_compute_prototypes",
      "_compute_prototypes_with_network",
      "_compute_prototype_loss",
      "_mahalanobis_distance",
      "_compute_fisher_information_context",
      "_compute_set2set_context",
      "_compute_relational_context",
      "_compute_prototypes",
      "_compute_prototypes_with_network",
      "_compute_prototype_loss",
      "_mahalanobis_distance"
    ],
    "total_items": 315
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/adaptive_components_modular.py": {
    "classes": [],
    "functions": [
      "print_modular_info"
    ],
    "methods": [],
    "total_items": 1
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/adaptive_components_modules/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/adaptive_components_modules/attention_adaptation.py": {
    "classes": [
      "AttentionBasedTaskAdaptation"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "forward",
      "_compute_maml_gradient_encoding",
      "_compute_task_statistics_encoding",
      "_compute_cross_class_interaction_encoding",
      "_compute_support_query_joint_encoding",
      "_encode_intra_support_relations",
      "_compute_self_attention",
      "_compute_task_conditioned_adaptation",
      "_compute_cross_attention_adaptation",
      "_compute_learnable_mixing"
    ],
    "total_items": 12
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/adaptive_components_modules/context_adaptation.py": {
    "classes": [
      "ContextDependentTaskAdaptation"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "_pool_context",
      "forward"
    ],
    "total_items": 4
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/adaptive_components_modules/meta_learning_adaptation.py": {
    "classes": [
      "MetaLearningTaskAdaptation"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "forward",
      "_finn_2017_maml",
      "_nichol_2018_reptile",
      "_triantafillou_2019_prototypical_maml",
      "_adaptive_prototype_maml",
      "_compute_fisher_information_context",
      "_compute_set2set_context",
      "_compute_relational_context",
      "_compute_attention_based_context",
      "_compute_prototypes",
      "_compute_prototypes_with_network",
      "_compute_prototype_loss",
      "_mahalanobis_distance"
    ],
    "total_items": 15
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/adaptive_components_modules/task_configs.py": {
    "classes": [
      "TaskContextMethod",
      "AdaptiveAttentionMethod",
      "TaskAdaptiveConfig"
    ],
    "functions": [],
    "methods": [],
    "total_items": 3
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/adaptive_components_modules/transformer_adaptation.py": {
    "classes": [
      "TransformerBasedTaskAdaptation"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "_create_sinusoidal_encoding",
      "forward"
    ],
    "total_items": 4
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/adaptive_components_modules/unified_adaptation.py": {
    "classes": [
      "TaskAdaptivePrototypes"
    ],
    "functions": [
      "create_task_adaptive_prototypes",
      "create_attention_adaptive_prototypes",
      "create_meta_adaptive_prototypes",
      "create_context_adaptive_prototypes",
      "create_transformer_adaptive_prototypes"
    ],
    "methods": [
      "__init__",
      "forward",
      "create_attention_adaptive_prototypes",
      "create_meta_adaptive_prototypes",
      "create_context_adaptive_prototypes",
      "create_transformer_adaptive_prototypes"
    ],
    "total_items": 12
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/advanced_components.py": {
    "classes": [],
    "functions": [
      "print_modular_info"
    ],
    "methods": [],
    "total_items": 1
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/advanced_components_modules/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/advanced_components_modules/configs.py": {
    "classes": [
      "UncertaintyAwareDistanceConfig",
      "MultiScaleFeatureAggregatorConfig",
      "HierarchicalPrototypesConfig",
      "EvidentialLearningConfig",
      "BayesianPrototypesConfig"
    ],
    "functions": [],
    "methods": [
      "__post_init__",
      "__post_init__",
      "__post_init__",
      "__post_init__",
      "__post_init__",
      "__post_init__",
      "__post_init__",
      "__post_init__",
      "__post_init__",
      "__post_init__",
      "__post_init__"
    ],
    "total_items": 16
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/advanced_components_modules/factory.py": {
    "classes": [],
    "functions": [
      "create_uncertainty_distance",
      "create_evidential_learner",
      "create_bayesian_prototypes",
      "create_multiscale_aggregator",
      "create_hierarchical_prototypes",
      "create_uncertainty_distance_preset",
      "create_multiscale_aggregator_preset",
      "create_hierarchical_prototypes_preset",
      "create_research_uncertainty_suite",
      "create_research_multiscale_suite",
      "create_research_hierarchical_suite"
    ],
    "methods": [],
    "total_items": 11
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/advanced_components_modules/hierarchical.py": {
    "classes": [
      "HierarchicalPrototypes",
      "UncertaintyEstimator",
      "ScaledDotProductAttention",
      "AdditiveAttention",
      "BilinearAttention",
      "GraphRelationModule",
      "StandardRelationModule",
      "TaskAdaptivePrototypes"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "__init__",
      "forward",
      "__init__",
      "_init_weights",
      "forward",
      "_attention",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_weights",
      "forward",
      "_attention",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_weights",
      "forward",
      "_attention",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward"
    ],
    "total_items": 96
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/advanced_components_modules/multiscale.py": {
    "classes": [
      "MultiScaleFeatureAggregator",
      "PrototypeRefiner"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "_get_num_scales",
      "_init_feature_pyramid_network",
      "_init_dilated_convolution",
      "_init_attention_based",
      "_init_fusion_network",
      "forward",
      "_apply_feature_pyramid",
      "_apply_dilated_convolution",
      "_apply_attention_based",
      "__init__",
      "forward",
      "__init__",
      "forward"
    ],
    "total_items": 16
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/advanced_components_modules/uncertainty.py": {
    "classes": [
      "UncertaintyAwareDistance",
      "EvidentialLearning",
      "BayesianPrototypes"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "forward",
      "compute_loss",
      "__init__",
      "encode",
      "reparameterize",
      "decode",
      "forward",
      "compute_kl_loss",
      "__init__",
      "forward",
      "compute_loss",
      "__init__",
      "encode",
      "reparameterize",
      "decode",
      "forward",
      "compute_kl_loss",
      "__init__",
      "encode",
      "reparameterize",
      "decode",
      "forward",
      "compute_kl_loss"
    ],
    "total_items": 38
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/benchmarks.py": {
    "classes": [
      "BenchmarkConfig",
      "BenchmarkResult",
      "DeterministicDataGenerator",
      "DeterministicEncoder"
    ],
    "functions": [
      "compute_accuracy",
      "compute_confidence_interval",
      "benchmark_prototypical_networks",
      "benchmark_maml",
      "run_comprehensive_benchmark",
      "save_benchmark_results"
    ],
    "methods": [
      "__post_init__",
      "summary",
      "__init__",
      "generate_class_centers",
      "generate_episode",
      "__init__",
      "forward",
      "compute_accuracy",
      "compute_confidence_interval",
      "benchmark_prototypical_networks",
      "benchmark_maml",
      "run_comprehensive_benchmark",
      "save_benchmark_results",
      "summary",
      "__init__",
      "generate_class_centers",
      "generate_episode",
      "__init__",
      "forward",
      "compute_accuracy",
      "compute_confidence_interval",
      "benchmark_prototypical_networks",
      "benchmark_maml",
      "run_comprehensive_benchmark",
      "save_benchmark_results",
      "__init__",
      "generate_class_centers",
      "generate_episode",
      "__init__",
      "forward",
      "compute_accuracy",
      "compute_confidence_interval",
      "benchmark_prototypical_networks",
      "benchmark_maml",
      "run_comprehensive_benchmark",
      "save_benchmark_results",
      "__init__",
      "forward",
      "compute_accuracy",
      "compute_confidence_interval",
      "benchmark_prototypical_networks",
      "benchmark_maml",
      "run_comprehensive_benchmark",
      "save_benchmark_results"
    ],
    "total_items": 54
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/comprehensive_config.py": {
    "classes": [
      "ComprehensiveMetaLearningConfig"
    ],
    "functions": [
      "create_sensoy_2018_config",
      "create_finn_2017_maml_config",
      "create_vaswani_2017_attention_config",
      "create_wei_2022_chain_of_thought_config",
      "create_comprehensive_research_config",
      "create_lightweight_config",
      "create_baseline_config",
      "validate_config",
      "print_config_summary"
    ],
    "methods": [
      "__post_init__",
      "create_sensoy_2018_config",
      "create_finn_2017_maml_config",
      "create_vaswani_2017_attention_config",
      "create_wei_2022_chain_of_thought_config",
      "create_comprehensive_research_config",
      "create_lightweight_config",
      "create_baseline_config",
      "validate_config",
      "print_config_summary"
    ],
    "total_items": 20
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/configurations.py": {
    "classes": [
      "FewShotConfig",
      "PrototypicalConfig",
      "MatchingConfig",
      "RelationConfig"
    ],
    "functions": [],
    "methods": [
      "__post_init__",
      "_resolve_configuration_conflicts",
      "get_variant_description",
      "validate_configuration",
      "__post_init__",
      "_resolve_configuration_conflicts",
      "get_variant_description",
      "validate_configuration"
    ],
    "total_items": 12
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/core_networks.py": {
    "classes": [
      "PrototypicalNetworks",
      "SimplePrototypicalNetworks",
      "MatchingNetworks",
      "RelationNetworks"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "__call__",
      "forward",
      "compute_prototypes",
      "compute_distance",
      "compute_probability",
      "compute_distances",
      "compute_probabilities",
      "_setup_implementation_variant",
      "_forward_research_accurate",
      "_forward_simple",
      "_forward_original",
      "_forward_enhanced",
      "_compute_prototypes",
      "_compute_distances",
      "__init__",
      "__call__",
      "forward",
      "__init__",
      "forward",
      "_encode_context",
      "_create_attention_mechanism",
      "__init__",
      "forward",
      "_aggregate_relation_scores",
      "__init__",
      "__call__",
      "forward",
      "__init__",
      "forward",
      "_encode_context",
      "_create_attention_mechanism",
      "__init__",
      "forward",
      "_aggregate_relation_scores",
      "__init__",
      "forward",
      "_encode_context",
      "_create_attention_mechanism",
      "__init__",
      "forward",
      "_aggregate_relation_scores",
      "__init__",
      "forward",
      "_aggregate_relation_scores"
    ],
    "total_items": 49
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/hierarchical_components.py": {
    "classes": [
      "AttentionMethod",
      "LevelFusionMethod",
      "PrototypeMethod",
      "HierarchicalConfig",
      "MultiLevelHierarchicalPrototypes",
      "TreeStructuredHierarchicalPrototypes",
      "CoarseToFineHierarchicalPrototypes",
      "AdaptiveHierarchicalPrototypes",
      "HierarchicalPrototypes",
      "HierarchicalPrototypesImplementations"
    ],
    "functions": [
      "create_hierarchical_prototypes",
      "create_multi_level_prototypes",
      "create_tree_prototypes",
      "create_coarse_to_fine_prototypes",
      "create_adaptive_prototypes",
      "_patch_hierarchical_methods"
    ],
    "methods": [
      "__init__",
      "forward",
      "_compute_hierarchical_clustering_prototype",
      "_compute_distance_weighted_prototype",
      "_compute_multi_head_attention_prototype",
      "_compute_adaptive_prototype",
      "_compute_information_theoretic_attention",
      "_compute_mutual_information_attention",
      "_compute_entropy_based_attention",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_multi_level_prototypes",
      "create_tree_prototypes",
      "create_coarse_to_fine_prototypes",
      "create_adaptive_prototypes",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "_compute_bayesian_model_averaging_weights",
      "_compute_information_theoretic_attention",
      "_compute_vaswani_attention",
      "_compute_he_attention",
      "_compute_luong_attention",
      "__init__",
      "forward",
      "_compute_hierarchical_clustering_prototype",
      "_compute_distance_weighted_prototype",
      "_compute_multi_head_attention_prototype",
      "_compute_adaptive_prototype",
      "_compute_information_theoretic_attention",
      "_compute_mutual_information_attention",
      "_compute_entropy_based_attention",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_multi_level_prototypes",
      "create_tree_prototypes",
      "create_coarse_to_fine_prototypes",
      "create_adaptive_prototypes",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "_compute_bayesian_model_averaging_weights",
      "_compute_information_theoretic_attention",
      "_compute_vaswani_attention",
      "_compute_he_attention",
      "_compute_luong_attention",
      "__init__",
      "forward",
      "_compute_hierarchical_clustering_prototype",
      "_compute_distance_weighted_prototype",
      "_compute_multi_head_attention_prototype",
      "_compute_adaptive_prototype",
      "_compute_information_theoretic_attention",
      "_compute_mutual_information_attention",
      "_compute_entropy_based_attention",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_multi_level_prototypes",
      "create_tree_prototypes",
      "create_coarse_to_fine_prototypes",
      "create_adaptive_prototypes",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "_compute_bayesian_model_averaging_weights",
      "_compute_information_theoretic_attention",
      "_compute_vaswani_attention",
      "_compute_he_attention",
      "_compute_luong_attention",
      "__init__",
      "forward",
      "_compute_hierarchical_clustering_prototype",
      "_compute_distance_weighted_prototype",
      "_compute_multi_head_attention_prototype",
      "_compute_adaptive_prototype",
      "_compute_information_theoretic_attention",
      "_compute_mutual_information_attention",
      "_compute_entropy_based_attention",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_multi_level_prototypes",
      "create_tree_prototypes",
      "create_coarse_to_fine_prototypes",
      "create_adaptive_prototypes",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "_compute_bayesian_model_averaging_weights",
      "_compute_information_theoretic_attention",
      "_compute_vaswani_attention",
      "_compute_he_attention",
      "_compute_luong_attention",
      "__init__",
      "forward",
      "_compute_hierarchical_clustering_prototype",
      "_compute_distance_weighted_prototype",
      "_compute_multi_head_attention_prototype",
      "_compute_adaptive_prototype",
      "_compute_information_theoretic_attention",
      "_compute_mutual_information_attention",
      "_compute_entropy_based_attention",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_multi_level_prototypes",
      "create_tree_prototypes",
      "create_coarse_to_fine_prototypes",
      "create_adaptive_prototypes",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "_compute_bayesian_model_averaging_weights",
      "_compute_information_theoretic_attention",
      "_compute_vaswani_attention",
      "_compute_he_attention",
      "_compute_luong_attention",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_multi_level_prototypes",
      "create_tree_prototypes",
      "create_coarse_to_fine_prototypes",
      "create_adaptive_prototypes",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "_compute_bayesian_model_averaging_weights",
      "_compute_information_theoretic_attention",
      "_compute_vaswani_attention",
      "_compute_he_attention",
      "_compute_luong_attention",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_multi_level_prototypes",
      "create_tree_prototypes",
      "create_coarse_to_fine_prototypes",
      "create_adaptive_prototypes",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "_compute_bayesian_model_averaging_weights",
      "_compute_information_theoretic_attention",
      "_compute_vaswani_attention",
      "_compute_he_attention",
      "_compute_luong_attention",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_multi_level_prototypes",
      "create_tree_prototypes",
      "create_coarse_to_fine_prototypes",
      "create_adaptive_prototypes",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "_compute_bayesian_model_averaging_weights",
      "_compute_information_theoretic_attention",
      "_compute_vaswani_attention",
      "_compute_he_attention",
      "_compute_luong_attention",
      "__init__",
      "forward",
      "create_multi_level_prototypes",
      "create_tree_prototypes",
      "create_coarse_to_fine_prototypes",
      "create_adaptive_prototypes",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "_compute_bayesian_model_averaging_weights",
      "_compute_information_theoretic_attention",
      "_compute_vaswani_attention",
      "_compute_he_attention",
      "_compute_luong_attention",
      "_compute_information_theoretic_level_weights",
      "_compute_learned_attention_weights",
      "_compute_entropy_weighted_fusion",
      "_compute_bayesian_model_averaging_weights",
      "_compute_information_theoretic_attention",
      "_compute_vaswani_attention",
      "_compute_he_attention",
      "_compute_luong_attention"
    ],
    "total_items": 252
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/maml_core.py": {
    "classes": [
      "InnerLoopConfig",
      "InnerLoopResult",
      "MAMLInnerLoop",
      "MAMLOuterLoop"
    ],
    "functions": [
      "functional_parameter_update",
      "compute_inner_gradients",
      "inner_adaptation_step",
      "multi_step_inner_adaptation",
      "evaluate_adapted_model",
      "maml_inner_loop",
      "create_maml_trainer"
    ],
    "methods": [
      "functional_parameter_update",
      "compute_inner_gradients",
      "inner_adaptation_step",
      "multi_step_inner_adaptation",
      "evaluate_adapted_model",
      "maml_inner_loop",
      "__init__",
      "adapt_and_evaluate",
      "adapt_only",
      "__init__",
      "meta_train_step",
      "create_maml_trainer",
      "functional_parameter_update",
      "compute_inner_gradients",
      "inner_adaptation_step",
      "multi_step_inner_adaptation",
      "evaluate_adapted_model",
      "maml_inner_loop",
      "__init__",
      "adapt_and_evaluate",
      "adapt_only",
      "__init__",
      "meta_train_step",
      "create_maml_trainer",
      "__init__",
      "adapt_and_evaluate",
      "adapt_only",
      "__init__",
      "meta_train_step",
      "create_maml_trainer",
      "__init__",
      "meta_train_step",
      "create_maml_trainer"
    ],
    "total_items": 44
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/reference_kernels.py": {
    "classes": [
      "Episode",
      "ReferenceProtoHead",
      "ReferenceMAMLLearner"
    ],
    "functions": [
      "pairwise_sqeuclidean",
      "cosine_logits",
      "reference_prototypical_episode",
      "reference_maml_step",
      "create_episode_from_raw",
      "test_prototype_computation_correctness",
      "test_distance_computation_correctness"
    ],
    "methods": [
      "__post_init__",
      "pairwise_sqeuclidean",
      "cosine_logits",
      "__init__",
      "forward",
      "reference_prototypical_episode",
      "reference_maml_step",
      "__init__",
      "meta_train_step",
      "create_episode_from_raw",
      "test_distance_computation_correctness",
      "__init__",
      "forward",
      "reference_prototypical_episode",
      "reference_maml_step",
      "__init__",
      "meta_train_step",
      "create_episode_from_raw",
      "test_distance_computation_correctness",
      "__init__",
      "meta_train_step",
      "create_episode_from_raw",
      "test_distance_computation_correctness"
    ],
    "total_items": 33
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/uncertainty_components.py": {
    "classes": [
      "UncertaintyConfig",
      "MonteCarloDropoutUncertainty",
      "DeepEnsembleUncertainty",
      "EvidentialUncertaintyDistance",
      "BayesianUncertaintyDistance",
      "UncertaintyAwareDistance"
    ],
    "functions": [
      "create_uncertainty_distance",
      "create_monte_carlo_uncertainty",
      "create_ensemble_uncertainty",
      "create_evidential_uncertainty",
      "create_bayesian_uncertainty"
    ],
    "methods": [
      "__post_init__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "kl_regularization",
      "evidential_loss",
      "__init__",
      "reparameterize",
      "forward",
      "kl_divergence",
      "__init__",
      "forward",
      "get_kl_divergence",
      "create_monte_carlo_uncertainty",
      "create_ensemble_uncertainty",
      "create_evidential_uncertainty",
      "create_bayesian_uncertainty",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "kl_regularization",
      "evidential_loss",
      "__init__",
      "reparameterize",
      "forward",
      "kl_divergence",
      "__init__",
      "forward",
      "get_kl_divergence",
      "create_monte_carlo_uncertainty",
      "create_ensemble_uncertainty",
      "create_evidential_uncertainty",
      "create_bayesian_uncertainty",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "kl_regularization",
      "evidential_loss",
      "__init__",
      "reparameterize",
      "forward",
      "kl_divergence",
      "__init__",
      "forward",
      "get_kl_divergence",
      "create_monte_carlo_uncertainty",
      "create_ensemble_uncertainty",
      "create_evidential_uncertainty",
      "create_bayesian_uncertainty",
      "__init__",
      "forward",
      "kl_regularization",
      "evidential_loss",
      "__init__",
      "reparameterize",
      "forward",
      "kl_divergence",
      "__init__",
      "forward",
      "get_kl_divergence",
      "create_monte_carlo_uncertainty",
      "create_ensemble_uncertainty",
      "create_evidential_uncertainty",
      "create_bayesian_uncertainty",
      "__init__",
      "reparameterize",
      "forward",
      "kl_divergence",
      "__init__",
      "forward",
      "get_kl_divergence",
      "create_monte_carlo_uncertainty",
      "create_ensemble_uncertainty",
      "create_evidential_uncertainty",
      "create_bayesian_uncertainty",
      "__init__",
      "forward",
      "get_kl_divergence",
      "create_monte_carlo_uncertainty",
      "create_ensemble_uncertainty",
      "create_evidential_uncertainty",
      "create_bayesian_uncertainty"
    ],
    "total_items": 100
  },
  "src/meta_learning/meta_learning_modules/few_shot_modules/utilities.py": {
    "classes": [
      "DatasetLoadingMethod",
      "DatasetConfig",
      "DatasetLoadingConfig"
    ],
    "functions": [
      "create_prototypical_network",
      "compare_with_learn2learn_protonet",
      "evaluate_on_standard_benchmarks",
      "sample_episode",
      "_load_with_torchmeta",
      "_load_with_custom_splits",
      "_load_with_huggingface",
      "load_few_shot_dataset_comprehensive",
      "load_few_shot_dataset_torchmeta",
      "load_few_shot_dataset_custom",
      "_load_omniglot_custom",
      "_load_miniimagenet_custom",
      "_load_tieredimagenet_custom",
      "load_few_shot_dataset_torchvision",
      "_validate_few_shot_task",
      "euclidean_distance_squared",
      "compute_prototype_statistics",
      "analyze_few_shot_performance",
      "create_backbone_network"
    ],
    "methods": [
      "__post_init__",
      "create_prototypical_network",
      "compare_with_learn2learn_protonet",
      "evaluate_on_standard_benchmarks",
      "sample_episode",
      "_load_with_torchmeta",
      "_load_with_custom_splits",
      "_load_with_huggingface",
      "load_few_shot_dataset_comprehensive",
      "load_few_shot_dataset_torchmeta",
      "load_few_shot_dataset_custom",
      "_load_omniglot_custom",
      "_load_miniimagenet_custom",
      "_load_tieredimagenet_custom",
      "load_few_shot_dataset_torchvision",
      "_validate_few_shot_task",
      "euclidean_distance_squared",
      "compute_prototype_statistics",
      "analyze_few_shot_performance",
      "create_backbone_network",
      "__post_init__",
      "create_prototypical_network",
      "compare_with_learn2learn_protonet",
      "evaluate_on_standard_benchmarks",
      "sample_episode",
      "_load_with_torchmeta",
      "_load_with_custom_splits",
      "_load_with_huggingface",
      "load_few_shot_dataset_comprehensive",
      "load_few_shot_dataset_torchmeta",
      "load_few_shot_dataset_custom",
      "_load_omniglot_custom",
      "_load_miniimagenet_custom",
      "_load_tieredimagenet_custom",
      "load_few_shot_dataset_torchvision",
      "_validate_few_shot_task",
      "euclidean_distance_squared",
      "compute_prototype_statistics",
      "analyze_few_shot_performance",
      "create_backbone_network",
      "sample_episode",
      "_load_with_torchmeta",
      "_load_with_custom_splits",
      "_load_with_huggingface",
      "load_few_shot_dataset_comprehensive",
      "load_few_shot_dataset_torchmeta",
      "load_few_shot_dataset_custom",
      "_load_omniglot_custom",
      "_load_miniimagenet_custom",
      "_load_tieredimagenet_custom",
      "load_few_shot_dataset_torchvision",
      "_validate_few_shot_task",
      "euclidean_distance_squared",
      "compute_prototype_statistics",
      "analyze_few_shot_performance",
      "create_backbone_network"
    ],
    "total_items": 78
  },
  "src/meta_learning/meta_learning_modules/hardware_utils.py": {
    "classes": [
      "HardwareConfig",
      "HardwareManager",
      "MultiGPUManager"
    ],
    "functions": [
      "get_optimal_batch_size",
      "create_hardware_manager",
      "auto_device",
      "prepare_for_hardware",
      "log_hardware_info"
    ],
    "methods": [
      "__init__",
      "_detect_best_device",
      "_initialize_hardware",
      "_setup_cuda",
      "_setup_mps",
      "_setup_cpu",
      "prepare_model",
      "prepare_data",
      "autocast_context",
      "backward_and_step",
      "get_memory_stats",
      "_get_gpu_utilization",
      "_get_gpu_util_nvml",
      "_get_gpu_util_pynvml",
      "_get_gpu_util_nvidia_smi",
      "clear_cache",
      "benchmark_device",
      "__init__",
      "setup_distributed",
      "wrap_model",
      "cleanup",
      "get_optimal_batch_size",
      "create_hardware_manager",
      "prepare_for_hardware",
      "log_hardware_info",
      "__init__",
      "_detect_best_device",
      "_initialize_hardware",
      "_setup_cuda",
      "_setup_mps",
      "_setup_cpu",
      "prepare_model",
      "prepare_data",
      "autocast_context",
      "backward_and_step",
      "get_memory_stats",
      "_get_gpu_utilization",
      "_get_gpu_util_nvml",
      "_get_gpu_util_pynvml",
      "_get_gpu_util_nvidia_smi",
      "clear_cache",
      "benchmark_device",
      "__init__",
      "setup_distributed",
      "wrap_model",
      "cleanup",
      "get_optimal_batch_size",
      "create_hardware_manager",
      "prepare_for_hardware",
      "log_hardware_info",
      "__init__",
      "setup_distributed",
      "wrap_model",
      "cleanup",
      "get_optimal_batch_size",
      "create_hardware_manager",
      "prepare_for_hardware",
      "log_hardware_info"
    ],
    "total_items": 66
  },
  "src/meta_learning/meta_learning_modules/leakage_guard.py": {
    "classes": [
      "LeakageType",
      "LeakageViolation",
      "LeakageGuard"
    ],
    "functions": [
      "leakage_guard_context",
      "create_safe_normalizer"
    ],
    "methods": [
      "__init__",
      "register_train_test_split",
      "validate_normalization_stats",
      "check_batchnorm_leakage",
      "validate_episode_isolation",
      "monitor_optimizer_state",
      "_record_violation",
      "assert_no_leakage",
      "get_leakage_report",
      "create_safe_normalizer",
      "normalize_fn",
      "__init__",
      "register_train_test_split",
      "validate_normalization_stats",
      "check_batchnorm_leakage",
      "validate_episode_isolation",
      "monitor_optimizer_state",
      "_record_violation",
      "assert_no_leakage",
      "get_leakage_report",
      "create_safe_normalizer",
      "normalize_fn",
      "__init__",
      "register_train_test_split",
      "validate_normalization_stats",
      "check_batchnorm_leakage",
      "validate_episode_isolation",
      "monitor_optimizer_state",
      "_record_violation",
      "assert_no_leakage",
      "get_leakage_report",
      "create_safe_normalizer",
      "normalize_fn"
    ],
    "total_items": 38
  },
  "src/meta_learning/meta_learning_modules/maml_research_accurate.py": {
    "classes": [
      "MAMLVariant",
      "MAMLConfig",
      "FunctionalModule",
      "ResearchMAML",
      "RepMAML"
    ],
    "functions": [
      "create_maml_model",
      "finite_difference_gradient_check"
    ],
    "methods": [
      "__post_init__",
      "functional_forward",
      "compute_adapted_params",
      "__init__",
      "_setup_adaptation_masks",
      "inner_loop",
      "meta_loss",
      "forward",
      "__init__",
      "reptile_update",
      "apply_reptile_update",
      "create_maml_model",
      "__post_init__",
      "functional_forward",
      "compute_adapted_params",
      "__init__",
      "_setup_adaptation_masks",
      "inner_loop",
      "meta_loss",
      "forward",
      "__init__",
      "reptile_update",
      "apply_reptile_update",
      "create_maml_model",
      "functional_forward",
      "compute_adapted_params",
      "__init__",
      "_setup_adaptation_masks",
      "inner_loop",
      "meta_loss",
      "forward",
      "__init__",
      "reptile_update",
      "apply_reptile_update",
      "create_maml_model",
      "__init__",
      "_setup_adaptation_masks",
      "inner_loop",
      "meta_loss",
      "forward",
      "__init__",
      "reptile_update",
      "apply_reptile_update",
      "create_maml_model",
      "__init__",
      "reptile_update",
      "apply_reptile_update",
      "create_maml_model"
    ],
    "total_items": 55
  },
  "src/meta_learning/meta_learning_modules/maml_variants.py": {
    "classes": [
      "MAMLConfig",
      "MAMLenLLMConfig",
      "MAMLLearner",
      "FirstOrderMAML",
      "MAMLenLLM",
      "LoRALayer",
      "ANILLearner",
      "BOILLearner",
      "ReptileLearner"
    ],
    "functions": [
      "functional_forward",
      "_removed_l2l_style",
      "_removed_higher_style",
      "functional_forward_manual",
      "functional_forward_compiled",
      "create_maml_learner"
    ],
    "methods": [
      "__init__",
      "inner_update",
      "meta_loss",
      "meta_train_step",
      "meta_test",
      "_adapt_to_task",
      "_forward_with_params",
      "_compute_query_loss",
      "adapt_to_task",
      "__init__",
      "__init__",
      "_create_lora_adapters",
      "meta_train_step",
      "_adapt_lora_to_task",
      "_compute_lora_support_loss",
      "_compute_lora_query_loss",
      "_forward_with_lora",
      "lora_forward_hook",
      "_get_layer_name",
      "_forward_with_functional_lora",
      "_get_target_modules",
      "_verify_lora_adapters",
      "__init__",
      "forward",
      "functional_forward",
      "apply_layer_functional",
      "compiled_functional_call",
      "__init__",
      "_identify_frozen_layers",
      "_identify_adaptable_layers",
      "_adapt_to_task",
      "__init__",
      "_identify_body_layers",
      "_identify_head_layers",
      "_adapt_to_task",
      "__init__",
      "meta_train_step",
      "__init__",
      "inner_update",
      "meta_loss",
      "meta_train_step",
      "meta_test",
      "_adapt_to_task",
      "_forward_with_params",
      "_compute_query_loss",
      "adapt_to_task",
      "__init__",
      "__init__",
      "_create_lora_adapters",
      "meta_train_step",
      "_adapt_lora_to_task",
      "_compute_lora_support_loss",
      "_compute_lora_query_loss",
      "_forward_with_lora",
      "lora_forward_hook",
      "_get_layer_name",
      "_forward_with_functional_lora",
      "_get_target_modules",
      "_verify_lora_adapters",
      "__init__",
      "forward",
      "functional_forward",
      "apply_layer_functional",
      "compiled_functional_call",
      "__init__",
      "_identify_frozen_layers",
      "_identify_adaptable_layers",
      "_adapt_to_task",
      "__init__",
      "_identify_body_layers",
      "_identify_head_layers",
      "_adapt_to_task",
      "__init__",
      "meta_train_step",
      "__init__",
      "inner_update",
      "meta_loss",
      "meta_train_step",
      "meta_test",
      "_adapt_to_task",
      "_forward_with_params",
      "_compute_query_loss",
      "adapt_to_task",
      "__init__",
      "__init__",
      "_create_lora_adapters",
      "meta_train_step",
      "_adapt_lora_to_task",
      "_compute_lora_support_loss",
      "_compute_lora_query_loss",
      "_forward_with_lora",
      "lora_forward_hook",
      "_get_layer_name",
      "_forward_with_functional_lora",
      "_get_target_modules",
      "_verify_lora_adapters",
      "__init__",
      "forward",
      "functional_forward",
      "apply_layer_functional",
      "compiled_functional_call",
      "__init__",
      "_identify_frozen_layers",
      "_identify_adaptable_layers",
      "_adapt_to_task",
      "__init__",
      "_identify_body_layers",
      "_identify_head_layers",
      "_adapt_to_task",
      "__init__",
      "meta_train_step",
      "__init__",
      "__init__",
      "_create_lora_adapters",
      "meta_train_step",
      "_adapt_lora_to_task",
      "_compute_lora_support_loss",
      "_compute_lora_query_loss",
      "_forward_with_lora",
      "lora_forward_hook",
      "_get_layer_name",
      "_forward_with_functional_lora",
      "_get_target_modules",
      "_verify_lora_adapters",
      "__init__",
      "forward",
      "functional_forward",
      "apply_layer_functional",
      "compiled_functional_call",
      "__init__",
      "_identify_frozen_layers",
      "_identify_adaptable_layers",
      "_adapt_to_task",
      "__init__",
      "_identify_body_layers",
      "_identify_head_layers",
      "_adapt_to_task",
      "__init__",
      "meta_train_step",
      "__init__",
      "_create_lora_adapters",
      "meta_train_step",
      "_adapt_lora_to_task",
      "_compute_lora_support_loss",
      "_compute_lora_query_loss",
      "_forward_with_lora",
      "lora_forward_hook",
      "_get_layer_name",
      "_forward_with_functional_lora",
      "_get_target_modules",
      "_verify_lora_adapters",
      "__init__",
      "forward",
      "functional_forward",
      "apply_layer_functional",
      "compiled_functional_call",
      "__init__",
      "_identify_frozen_layers",
      "_identify_adaptable_layers",
      "_adapt_to_task",
      "__init__",
      "_identify_body_layers",
      "_identify_head_layers",
      "_adapt_to_task",
      "__init__",
      "meta_train_step",
      "__init__",
      "forward",
      "functional_forward",
      "apply_layer_functional",
      "compiled_functional_call",
      "__init__",
      "_identify_frozen_layers",
      "_identify_adaptable_layers",
      "_adapt_to_task",
      "__init__",
      "_identify_body_layers",
      "_identify_head_layers",
      "_adapt_to_task",
      "__init__",
      "meta_train_step",
      "__init__",
      "_identify_frozen_layers",
      "_identify_adaptable_layers",
      "_adapt_to_task",
      "__init__",
      "_identify_body_layers",
      "_identify_head_layers",
      "_adapt_to_task",
      "__init__",
      "meta_train_step",
      "__init__",
      "_identify_body_layers",
      "_identify_head_layers",
      "_adapt_to_task",
      "__init__",
      "meta_train_step",
      "__init__",
      "meta_train_step"
    ],
    "total_items": 214
  },
  "src/meta_learning/meta_learning_modules/meta_learning_advanced_components.py": {
    "classes": [
      "ComprehensiveMAMLVariants",
      "LoRALayer",
      "ComprehensiveTestTimeCompute",
      "ComprehensiveUtilities"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "forward_with_lora",
      "functional_forward",
      "create_lora_adapters",
      "_forward_with_hooks",
      "lora_forward_hook",
      "_forward_with_parameter_replacement",
      "_forward_with_custom_implementation",
      "custom_linear_with_lora",
      "_forward_with_peft_library",
      "_functional_forward_learn2learn",
      "_functional_forward_higher",
      "_functional_forward_manual",
      "_functional_forward_compiled",
      "compiled_functional_forward",
      "__init__",
      "forward",
      "__init__",
      "scale_compute",
      "_scale_with_process_reward_model",
      "_scale_with_test_time_training",
      "_scale_with_chain_of_thought",
      "_scale_with_wei_2022_cot",
      "_scale_with_kojima_2022_cot",
      "_scale_with_constitutional_cot",
      "_scale_with_llm_test_time_compute",
      "_scale_with_gradient_based",
      "_scale_with_consistency_based",
      "simplified_analysis",
      "_clone_model",
      "_estimate_query_difficulty",
      "_allocate_compute_by_difficulty",
      "_refine_single_query_prediction",
      "_generate_wei_2022_reasoning_chain",
      "_aggregate_reasoning_chains_self_consistent",
      "_wei_2022_chain_of_thought",
      "_wang_2022_self_consistency",
      "_rudin_2019_interpretable",
      "_prototype_based_consistency",
      "_feature_based_consistency",
      "_confidence_weighted_consistency",
      "__init__",
      "estimate_difficulty",
      "compute_confidence_interval",
      "compute_task_diversity",
      "_estimate_silhouette_difficulty",
      "_estimate_entropy_difficulty",
      "_estimate_knn_difficulty",
      "_estimate_variance_difficulty",
      "_compute_t_distribution_ci",
      "_compute_meta_learning_standard_ci",
      "_compute_bca_bootstrap_ci",
      "_compute_bootstrap_ci",
      "_compute_feature_variance_diversity",
      "_compute_class_separation_diversity",
      "_compute_information_theoretic_diversity",
      "_compute_jensen_shannon_diversity",
      "__init__",
      "forward",
      "__init__",
      "scale_compute",
      "_scale_with_process_reward_model",
      "_scale_with_test_time_training",
      "_scale_with_chain_of_thought",
      "_scale_with_wei_2022_cot",
      "_scale_with_kojima_2022_cot",
      "_scale_with_constitutional_cot",
      "_scale_with_llm_test_time_compute",
      "_scale_with_gradient_based",
      "_scale_with_consistency_based",
      "simplified_analysis",
      "_clone_model",
      "_estimate_query_difficulty",
      "_allocate_compute_by_difficulty",
      "_refine_single_query_prediction",
      "_generate_wei_2022_reasoning_chain",
      "_aggregate_reasoning_chains_self_consistent",
      "_wei_2022_chain_of_thought",
      "_wang_2022_self_consistency",
      "_rudin_2019_interpretable",
      "_prototype_based_consistency",
      "_feature_based_consistency",
      "_confidence_weighted_consistency",
      "__init__",
      "estimate_difficulty",
      "compute_confidence_interval",
      "compute_task_diversity",
      "_estimate_silhouette_difficulty",
      "_estimate_entropy_difficulty",
      "_estimate_knn_difficulty",
      "_estimate_variance_difficulty",
      "_compute_t_distribution_ci",
      "_compute_meta_learning_standard_ci",
      "_compute_bca_bootstrap_ci",
      "_compute_bootstrap_ci",
      "_compute_feature_variance_diversity",
      "_compute_class_separation_diversity",
      "_compute_information_theoretic_diversity",
      "_compute_jensen_shannon_diversity",
      "__init__",
      "scale_compute",
      "_scale_with_process_reward_model",
      "_scale_with_test_time_training",
      "_scale_with_chain_of_thought",
      "_scale_with_wei_2022_cot",
      "_scale_with_kojima_2022_cot",
      "_scale_with_constitutional_cot",
      "_scale_with_llm_test_time_compute",
      "_scale_with_gradient_based",
      "_scale_with_consistency_based",
      "simplified_analysis",
      "_clone_model",
      "_estimate_query_difficulty",
      "_allocate_compute_by_difficulty",
      "_refine_single_query_prediction",
      "_generate_wei_2022_reasoning_chain",
      "_aggregate_reasoning_chains_self_consistent",
      "_wei_2022_chain_of_thought",
      "_wang_2022_self_consistency",
      "_rudin_2019_interpretable",
      "_prototype_based_consistency",
      "_feature_based_consistency",
      "_confidence_weighted_consistency",
      "__init__",
      "estimate_difficulty",
      "compute_confidence_interval",
      "compute_task_diversity",
      "_estimate_silhouette_difficulty",
      "_estimate_entropy_difficulty",
      "_estimate_knn_difficulty",
      "_estimate_variance_difficulty",
      "_compute_t_distribution_ci",
      "_compute_meta_learning_standard_ci",
      "_compute_bca_bootstrap_ci",
      "_compute_bootstrap_ci",
      "_compute_feature_variance_diversity",
      "_compute_class_separation_diversity",
      "_compute_information_theoretic_diversity",
      "_compute_jensen_shannon_diversity",
      "__init__",
      "estimate_difficulty",
      "compute_confidence_interval",
      "compute_task_diversity",
      "_estimate_silhouette_difficulty",
      "_estimate_entropy_difficulty",
      "_estimate_knn_difficulty",
      "_estimate_variance_difficulty",
      "_compute_t_distribution_ci",
      "_compute_meta_learning_standard_ci",
      "_compute_bca_bootstrap_ci",
      "_compute_bootstrap_ci",
      "_compute_feature_variance_diversity",
      "_compute_class_separation_diversity",
      "_compute_information_theoretic_diversity",
      "_compute_jensen_shannon_diversity"
    ],
    "total_items": 159
  },
  "src/meta_learning/meta_learning_modules/meta_learning_algorithm_config.py": {
    "classes": [
      "DatasetLoadingMethod",
      "PrototypicalDistanceMethod",
      "PrototypeComputationMethod",
      "HierarchicalAttentionMethod",
      "LevelFusionMethod",
      "TaskAdaptationMethod",
      "UncertaintyMethod",
      "LoRAImplementationMethod",
      "FunctionalForwardMethod",
      "TestTimeComputeMethod",
      "ChainOfThoughtMethod",
      "DifficultyEstimationMethod",
      "ConfidenceIntervalMethod",
      "TaskDiversityMethod",
      "DatasetLoadingConfig",
      "PrototypicalNetworksConfig",
      "UncertaintyConfig",
      "MAMLVariantsConfig",
      "TestTimeComputeConfig",
      "UtilitiesConfig",
      "ComprehensiveCommentSolutionsConfig",
      "SolutionRegistry"
    ],
    "functions": [
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions"
    ],
    "methods": [
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "simplified_analysis_comparison_config",
      "create_hierarchical_prototype_config",
      "create_uncertainty_focused_config",
      "create_test_time_compute_config",
      "validate_config",
      "print_active_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions",
      "__init__",
      "get_implementation",
      "list_available_solutions"
    ],
    "total_items": 264
  },
  "src/meta_learning/meta_learning_modules/meta_learning_components_implementation.py": {
    "classes": [
      "ComprehensiveDatasetLoader",
      "ComprehensivePrototypicalNetworks",
      "ComprehensiveUncertaintyEstimator"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "load_dataset",
      "_load_with_method",
      "_load_torchmeta",
      "_load_torchvision",
      "_load_huggingface",
      "_load_sklearn",
      "_load_custom",
      "__init__",
      "compute_prototypes",
      "compute_distances",
      "_compute_mean_prototypes",
      "_compute_weighted_prototypes",
      "_compute_attention_prototypes",
      "_compute_hierarchical_prototypes",
      "_fuse_hierarchical_levels",
      "_compute_task_adaptive_prototypes",
      "_compute_maml_task_context",
      "_compute_fisher_information_context",
      "_compute_set2set_embedding",
      "_compute_relational_context",
      "_compute_euclidean_distance",
      "_compute_cosine_distance",
      "_compute_mahalanobis_distance",
      "_compute_learnable_distance",
      "_compute_uncertainty_weighted_distance",
      "__init__",
      "estimate_uncertainty",
      "_compute_dirichlet_uncertainty",
      "_compute_epistemic_aleatoric_uncertainty",
      "_compute_subjective_logic_uncertainty",
      "_compute_research_accurate_uncertainty",
      "_compute_variational_dropout_uncertainty",
      "__init__",
      "forward",
      "kl_divergence",
      "_compute_kl_divergence_uncertainty",
      "__init__",
      "forward",
      "kl_divergence",
      "__init__",
      "compute_prototypes",
      "compute_distances",
      "_compute_mean_prototypes",
      "_compute_weighted_prototypes",
      "_compute_attention_prototypes",
      "_compute_hierarchical_prototypes",
      "_fuse_hierarchical_levels",
      "_compute_task_adaptive_prototypes",
      "_compute_maml_task_context",
      "_compute_fisher_information_context",
      "_compute_set2set_embedding",
      "_compute_relational_context",
      "_compute_euclidean_distance",
      "_compute_cosine_distance",
      "_compute_mahalanobis_distance",
      "_compute_learnable_distance",
      "_compute_uncertainty_weighted_distance",
      "__init__",
      "estimate_uncertainty",
      "_compute_dirichlet_uncertainty",
      "_compute_epistemic_aleatoric_uncertainty",
      "_compute_subjective_logic_uncertainty",
      "_compute_research_accurate_uncertainty",
      "_compute_variational_dropout_uncertainty",
      "__init__",
      "forward",
      "kl_divergence",
      "_compute_kl_divergence_uncertainty",
      "__init__",
      "forward",
      "kl_divergence",
      "__init__",
      "estimate_uncertainty",
      "_compute_dirichlet_uncertainty",
      "_compute_epistemic_aleatoric_uncertainty",
      "_compute_subjective_logic_uncertainty",
      "_compute_research_accurate_uncertainty",
      "_compute_variational_dropout_uncertainty",
      "__init__",
      "forward",
      "kl_divergence",
      "_compute_kl_divergence_uncertainty",
      "__init__",
      "forward",
      "kl_divergence"
    ],
    "total_items": 89
  },
  "src/meta_learning/meta_learning_modules/meta_learning_master_integration.py": {
    "classes": [
      "MasterCommentSolutionsIntegration"
    ],
    "functions": [
      "simplified_analysis_meta_learning_experiment",
      "list_all_available_solutions",
      "create_solution_comparison_report"
    ],
    "methods": [
      "__init__",
      "simplified_analysis_few_shot_experiment",
      "_run_solution_comparison",
      "get_solution_summary",
      "create_custom_config",
      "simplified_analysis_meta_learning_experiment",
      "list_all_available_solutions",
      "create_solution_comparison_report"
    ],
    "total_items": 12
  },
  "src/meta_learning/meta_learning_modules/meta_learning_research_config.py": {
    "classes": [
      "AttentionMethod",
      "LevelFusionMethod",
      "DatasetMethod",
      "TestTimeComputeStrategy",
      "TaskContextMethod",
      "AdaptiveAttentionMethod",
      "PrototypeMethod",
      "StateFallbackMethod",
      "StateForwardMethod",
      "VerificationFallbackMethod",
      "ComprehensiveFixmeConfig"
    ],
    "functions": [
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary"
    ],
    "methods": [
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary",
      "create_research_accurate_config",
      "create_performance_optimized_config",
      "create_debugging_config",
      "get_available_fixme_solutions",
      "validate_fixme_config",
      "print_fixme_solutions_summary"
    ],
    "total_items": 83
  },
  "src/meta_learning/meta_learning_modules/meta_learning_solutions_config.py": {
    "classes": [
      "DifficultyEstimationMethod",
      "ConfidenceIntervalMethod",
      "AugmentationStrategy",
      "FixmeDifficultyEstimationConfig",
      "FixmeConfidenceIntervalConfig",
      "FixmeTaskSamplingConfig",
      "FixmeDataAugmentationConfig",
      "ComprehensiveResearchSolutionsConfig"
    ],
    "functions": [
      "create_all_research_solutions_config",
      "create_performance_optimized_config",
      "create_research_grade_config",
      "create_basic_config"
    ],
    "methods": [
      "__post_init__",
      "create_all_research_solutions_config",
      "create_performance_optimized_config",
      "create_research_grade_config",
      "create_basic_config",
      "__post_init__",
      "create_all_research_solutions_config",
      "create_performance_optimized_config",
      "create_research_grade_config",
      "create_basic_config",
      "__post_init__",
      "create_all_research_solutions_config",
      "create_performance_optimized_config",
      "create_research_grade_config",
      "create_basic_config",
      "__post_init__",
      "create_all_research_solutions_config",
      "create_performance_optimized_config",
      "create_research_grade_config",
      "create_basic_config",
      "create_all_research_solutions_config",
      "create_performance_optimized_config",
      "create_research_grade_config",
      "create_basic_config",
      "create_all_research_solutions_config",
      "create_performance_optimized_config",
      "create_research_grade_config",
      "create_basic_config",
      "create_all_research_solutions_config",
      "create_performance_optimized_config",
      "create_research_grade_config",
      "create_basic_config",
      "create_all_research_solutions_config",
      "create_performance_optimized_config",
      "create_research_grade_config",
      "create_basic_config"
    ],
    "total_items": 48
  },
  "src/meta_learning/meta_learning_modules/meta_learning_solutions_implementation.py": {
    "classes": [
      "FixmeDifficultyEstimator",
      "FixmeConfidenceIntervalCalculator"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "estimate_difficulties",
      "_estimate_with_method",
      "_estimate_silhouette_difficulty",
      "_estimate_entropy_difficulty",
      "_estimate_knn_difficulty",
      "_estimate_pairwise_distance_difficulty",
      "_compare_and_combine_methods",
      "_compute_correlation",
      "_get_cache_key",
      "__init__",
      "compute_confidence_interval",
      "_select_best_method",
      "_test_normality",
      "_bootstrap_ci",
      "_t_distribution_ci",
      "_bca_bootstrap_ci",
      "_meta_learning_standard_ci",
      "_remove_outliers",
      "__init__",
      "compute_confidence_interval",
      "_select_best_method",
      "_test_normality",
      "_bootstrap_ci",
      "_t_distribution_ci",
      "_bca_bootstrap_ci",
      "_meta_learning_standard_ci",
      "_remove_outliers"
    ],
    "total_items": 30
  },
  "src/meta_learning/meta_learning_modules/meta_learning_utilities.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "src/meta_learning/meta_learning_modules/numerical_stability.py": {
    "classes": [
      "NumericalStabilityMonitor",
      "DeterministicMode"
    ],
    "functions": [
      "stable_softmax_ce_loss",
      "safe_normalize",
      "safe_distance_computation",
      "clip_gradients",
      "seed_everything",
      "check_for_nan_inf",
      "stable_log_prob",
      "temperature_scaled_logits"
    ],
    "methods": [
      "__init__",
      "log_gradients",
      "log_parameters",
      "log_loss",
      "get_stats",
      "__init__",
      "__enter__",
      "__exit__",
      "__init__",
      "__enter__",
      "__exit__"
    ],
    "total_items": 21
  },
  "src/meta_learning/meta_learning_modules/old_archive/few_shot_learning_original_1427_lines.py": {
    "classes": [
      "FewShotConfig",
      "PrototypicalConfig",
      "MatchingConfig",
      "RelationConfig",
      "PrototypicalNetworks",
      "SimplePrototypicalNetworks",
      "MatchingNetworks",
      "RelationNetworks",
      "MultiScaleFeatureAggregator",
      "PrototypeRefiner",
      "UncertaintyEstimator",
      "ScaledDotProductAttention",
      "AdditiveAttention",
      "BilinearAttention",
      "GraphRelationModule",
      "StandardRelationModule",
      "UncertaintyAwareDistance",
      "MCDropoutUncertainty",
      "EnsembleUncertaintyDistance",
      "EvidentialUncertaintyDistance",
      "HierarchicalPrototypes",
      "TaskAdaptivePrototypes",
      "PrototypicalNetworksOriginal"
    ],
    "functions": [
      "compare_with_learn2learn_protonet",
      "evaluate_on_standard_benchmarks",
      "create_prototypical_network",
      "euclidean_distance_squared"
    ],
    "methods": [
      "__post_init__",
      "_resolve_configuration_conflicts",
      "__init__",
      "forward",
      "_compute_prototypes",
      "_compute_distances",
      "_setup_implementation_variant",
      "_forward_research_accurate",
      "_forward_simple",
      "_forward_original",
      "_forward_enhanced",
      "_forward_pure_original",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "_encode_context",
      "_create_attention_mechanism",
      "__init__",
      "forward",
      "_aggregate_relation_scores",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__post_init__",
      "_resolve_configuration_conflicts",
      "__init__",
      "forward",
      "_compute_prototypes",
      "_compute_distances",
      "_setup_implementation_variant",
      "_forward_research_accurate",
      "_forward_simple",
      "_forward_original",
      "_forward_enhanced",
      "_forward_pure_original",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "_encode_context",
      "_create_attention_mechanism",
      "__init__",
      "forward",
      "_aggregate_relation_scores",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "_compute_prototypes",
      "_compute_distances",
      "_setup_implementation_variant",
      "_forward_research_accurate",
      "_forward_simple",
      "_forward_original",
      "_forward_enhanced",
      "_forward_pure_original",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "_encode_context",
      "_create_attention_mechanism",
      "__init__",
      "forward",
      "_aggregate_relation_scores",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "_compute_prototypes",
      "_compute_distances",
      "_setup_implementation_variant",
      "_forward_research_accurate",
      "_forward_simple",
      "_forward_original",
      "_forward_enhanced",
      "_forward_pure_original",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "_encode_context",
      "_create_attention_mechanism",
      "__init__",
      "forward",
      "_aggregate_relation_scores",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "_compute_prototypes",
      "_compute_distances",
      "_setup_implementation_variant",
      "_forward_research_accurate",
      "_forward_simple",
      "_forward_original",
      "_forward_enhanced",
      "_forward_pure_original",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "_encode_context",
      "_create_attention_mechanism",
      "__init__",
      "forward",
      "_aggregate_relation_scores",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "_encode_context",
      "_create_attention_mechanism",
      "__init__",
      "forward",
      "_aggregate_relation_scores",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "_encode_context",
      "_create_attention_mechanism",
      "__init__",
      "forward",
      "_aggregate_relation_scores",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "_aggregate_relation_scores",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "create_prototypical_network",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "forward",
      "euclidean_distance_squared",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward",
      "__init__",
      "compute_prototypes",
      "classify",
      "forward"
    ],
    "total_items": 816
  },
  "src/meta_learning/meta_learning_modules/old_archive/test_time_compute_monolithic_original.py": {
    "classes": [],
    "functions": [
      "_print_modularization_info",
      "print_modular_info"
    ],
    "methods": [],
    "total_items": 2
  },
  "src/meta_learning/meta_learning_modules/old_archive/test_time_compute_original_4521_lines.py": {
    "classes": [
      "TestTimeComputeStrategy",
      "StateFallbackMethod",
      "StateForwardMethod",
      "VerificationFallbackMethod",
      "TestTimeComputeConfig",
      "TestTimeComputeScaler",
      "TestTimeComputeImplementations"
    ],
    "functions": [
      "create_process_reward_config",
      "create_consistency_verification_config",
      "create_gradient_verification_config",
      "create_attention_reasoning_config",
      "create_feature_reasoning_config",
      "create_prototype_reasoning_config",
      "create_comprehensive_config",
      "create_fast_config",
      "_patch_test_time_compute_methods",
      "_encode_state_with_learned_embedding",
      "_encode_state_with_transformer",
      "_encode_state_with_graph",
      "_encode_state_with_symbolic_logic",
      "_encode_state_research_accurate_fallback",
      "_apply_attention_guided_influence",
      "_apply_feature_modulation_influence",
      "_apply_learned_transformation_influence",
      "_apply_contextual_adaptation_influence",
      "_apply_semantic_perturbation",
      "_tokenize_state_for_transformer",
      "_state_to_graph_structure",
      "_parse_state_to_predicates",
      "_encode_state_safe",
      "_compute_prototype_based_fallback",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_patch_all_fixme_solutions",
      "_infer_feature_dim_from_architecture"
    ],
    "methods": [
      "__init__",
      "scale_compute",
      "_scale_compute_basic",
      "_estimate_difficulty",
      "_allocate_compute_budget",
      "_compute_step",
      "_compute_process_reward",
      "_compute_process_reward_research_accurate",
      "_compute_process_reward_simplified",
      "_compute_process_reward_stepwise_verification",
      "_ensemble_predictions",
      "_compute_intra_class_variance",
      "_compute_distribution_shift",
      "_update_performance_tracker",
      "get_compute_statistics",
      "_scale_compute_snell2024",
      "_scale_compute_akyurek2024",
      "_scale_compute_openai_o1",
      "_chain_of_thought_inference",
      "_self_consistent_reasoning",
      "_zero_shot_cot_reasoning",
      "_scale_compute_hybrid",
      "_compute_process_reward",
      "_test_time_training_step",
      "_chain_of_thought_reasoning",
      "_compute_optimal_allocation",
      "_adaptive_distribution_update",
      "_generate_reasoning_chain",
      "_generate_wei_2022_reasoning_chain",
      "_generate_kojima_2022_reasoning_chain",
      "_generate_constitutional_reasoning_chain",
      "_extract_features",
      "_compute_class_prototypes",
      "_get_representation",
      "_generate_reasoning_path",
      "_generate_attention_based_reasoning",
      "_generate_feature_based_reasoning",
      "_generate_prototype_distance_reasoning",
      "_verify_reasoning_step",
      "_verify_with_entropy_based",
      "_verify_with_loss_based",
      "_verify_with_gradient_norm_based",
      "_verify_with_combined_score",
      "_verify_with_process_reward_model",
      "_verify_with_consistency_based",
      "_verify_with_gradient_based",
      "_compute_research_accurate_process_reward",
      "_compute_snell_2024_process_reward",
      "_compute_gradient_based_process_reward",
      "_compute_consistency_based_process_reward",
      "_estimate_task_difficulty_batch",
      "_ensemble_predictions_advanced",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_ensemble_predictions_hybrid",
      "_extract_features_safe",
      "_initialize_process_reward_model",
      "_cross_entropy_gradient_difficulty",
      "_fisher_information_difficulty",
      "_influence_function_difficulty",
      "_legacy_gradient_difficulty",
      "_encode_reasoning_state",
      "_compute_prototype_based_fallback",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_forward_from_state",
      "_compute_consistency_score",
      "_compute_consistency_fallback",
      "create_process_reward_config",
      "create_consistency_verification_config",
      "create_gradient_verification_config",
      "create_attention_reasoning_config",
      "create_feature_reasoning_config",
      "create_prototype_reasoning_config",
      "create_comprehensive_config",
      "create_fast_config",
      "_generate_reasoning_chain",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_generate_reasoning_chain_comprehensive",
      "_generate_reasoning_chain_wei_2022",
      "_generate_reasoning_chain_wang_2022",
      "_generate_reasoning_chain_kojima_2022",
      "_generate_reasoning_chain_attention",
      "_generate_reasoning_chain_features",
      "_generate_reasoning_chain_prototypes",
      "_encode_state_with_learned_embedding",
      "_encode_state_with_transformer",
      "_encode_state_with_graph",
      "_encode_state_with_symbolic_logic",
      "_encode_state_research_accurate_fallback",
      "_apply_attention_guided_influence",
      "_apply_feature_modulation_influence",
      "_apply_learned_transformation_influence",
      "_apply_contextual_adaptation_influence",
      "_apply_semantic_perturbation",
      "_tokenize_state_for_transformer",
      "_state_to_graph_structure",
      "_parse_state_to_predicates",
      "_encode_state_safe",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_infer_feature_dim_from_architecture",
      "__init__",
      "scale_compute",
      "_scale_compute_basic",
      "_estimate_difficulty",
      "_allocate_compute_budget",
      "_compute_step",
      "_compute_process_reward",
      "_compute_process_reward_research_accurate",
      "_compute_process_reward_simplified",
      "_compute_process_reward_stepwise_verification",
      "_ensemble_predictions",
      "_compute_intra_class_variance",
      "_compute_distribution_shift",
      "_update_performance_tracker",
      "get_compute_statistics",
      "_scale_compute_snell2024",
      "_scale_compute_akyurek2024",
      "_scale_compute_openai_o1",
      "_chain_of_thought_inference",
      "_self_consistent_reasoning",
      "_zero_shot_cot_reasoning",
      "_scale_compute_hybrid",
      "_compute_process_reward",
      "_test_time_training_step",
      "_chain_of_thought_reasoning",
      "_compute_optimal_allocation",
      "_adaptive_distribution_update",
      "_generate_reasoning_chain",
      "_generate_wei_2022_reasoning_chain",
      "_generate_kojima_2022_reasoning_chain",
      "_generate_constitutional_reasoning_chain",
      "_extract_features",
      "_compute_class_prototypes",
      "_get_representation",
      "_generate_reasoning_path",
      "_generate_attention_based_reasoning",
      "_generate_feature_based_reasoning",
      "_generate_prototype_distance_reasoning",
      "_verify_reasoning_step",
      "_verify_with_entropy_based",
      "_verify_with_loss_based",
      "_verify_with_gradient_norm_based",
      "_verify_with_combined_score",
      "_verify_with_process_reward_model",
      "_verify_with_consistency_based",
      "_verify_with_gradient_based",
      "_compute_research_accurate_process_reward",
      "_compute_snell_2024_process_reward",
      "_compute_gradient_based_process_reward",
      "_compute_consistency_based_process_reward",
      "_estimate_task_difficulty_batch",
      "_ensemble_predictions_advanced",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_ensemble_predictions_hybrid",
      "_extract_features_safe",
      "_initialize_process_reward_model",
      "_cross_entropy_gradient_difficulty",
      "_fisher_information_difficulty",
      "_influence_function_difficulty",
      "_legacy_gradient_difficulty",
      "_encode_reasoning_state",
      "_compute_prototype_based_fallback",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_forward_from_state",
      "_compute_consistency_score",
      "_compute_consistency_fallback",
      "create_process_reward_config",
      "create_consistency_verification_config",
      "create_gradient_verification_config",
      "create_attention_reasoning_config",
      "create_feature_reasoning_config",
      "create_prototype_reasoning_config",
      "create_comprehensive_config",
      "create_fast_config",
      "_generate_reasoning_chain",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_generate_reasoning_chain_comprehensive",
      "_generate_reasoning_chain_wei_2022",
      "_generate_reasoning_chain_wang_2022",
      "_generate_reasoning_chain_kojima_2022",
      "_generate_reasoning_chain_attention",
      "_generate_reasoning_chain_features",
      "_generate_reasoning_chain_prototypes",
      "_encode_state_with_learned_embedding",
      "_encode_state_with_transformer",
      "_encode_state_with_graph",
      "_encode_state_with_symbolic_logic",
      "_encode_state_research_accurate_fallback",
      "_apply_attention_guided_influence",
      "_apply_feature_modulation_influence",
      "_apply_learned_transformation_influence",
      "_apply_contextual_adaptation_influence",
      "_apply_semantic_perturbation",
      "_tokenize_state_for_transformer",
      "_state_to_graph_structure",
      "_parse_state_to_predicates",
      "_encode_state_safe",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_infer_feature_dim_from_architecture",
      "__init__",
      "scale_compute",
      "_scale_compute_basic",
      "_estimate_difficulty",
      "_allocate_compute_budget",
      "_compute_step",
      "_compute_process_reward",
      "_compute_process_reward_research_accurate",
      "_compute_process_reward_simplified",
      "_compute_process_reward_stepwise_verification",
      "_ensemble_predictions",
      "_compute_intra_class_variance",
      "_compute_distribution_shift",
      "_update_performance_tracker",
      "get_compute_statistics",
      "_scale_compute_snell2024",
      "_scale_compute_akyurek2024",
      "_scale_compute_openai_o1",
      "_chain_of_thought_inference",
      "_self_consistent_reasoning",
      "_zero_shot_cot_reasoning",
      "_scale_compute_hybrid",
      "_compute_process_reward",
      "_test_time_training_step",
      "_chain_of_thought_reasoning",
      "_compute_optimal_allocation",
      "_adaptive_distribution_update",
      "_generate_reasoning_chain",
      "_generate_wei_2022_reasoning_chain",
      "_generate_kojima_2022_reasoning_chain",
      "_generate_constitutional_reasoning_chain",
      "_extract_features",
      "_compute_class_prototypes",
      "_get_representation",
      "_generate_reasoning_path",
      "_generate_attention_based_reasoning",
      "_generate_feature_based_reasoning",
      "_generate_prototype_distance_reasoning",
      "_verify_reasoning_step",
      "_verify_with_entropy_based",
      "_verify_with_loss_based",
      "_verify_with_gradient_norm_based",
      "_verify_with_combined_score",
      "_verify_with_process_reward_model",
      "_verify_with_consistency_based",
      "_verify_with_gradient_based",
      "_compute_research_accurate_process_reward",
      "_compute_snell_2024_process_reward",
      "_compute_gradient_based_process_reward",
      "_compute_consistency_based_process_reward",
      "_estimate_task_difficulty_batch",
      "_ensemble_predictions_advanced",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_ensemble_predictions_hybrid",
      "_extract_features_safe",
      "_initialize_process_reward_model",
      "_cross_entropy_gradient_difficulty",
      "_fisher_information_difficulty",
      "_influence_function_difficulty",
      "_legacy_gradient_difficulty",
      "_encode_reasoning_state",
      "_compute_prototype_based_fallback",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_forward_from_state",
      "_compute_consistency_score",
      "_compute_consistency_fallback",
      "create_process_reward_config",
      "create_consistency_verification_config",
      "create_gradient_verification_config",
      "create_attention_reasoning_config",
      "create_feature_reasoning_config",
      "create_prototype_reasoning_config",
      "create_comprehensive_config",
      "create_fast_config",
      "_generate_reasoning_chain",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_generate_reasoning_chain_comprehensive",
      "_generate_reasoning_chain_wei_2022",
      "_generate_reasoning_chain_wang_2022",
      "_generate_reasoning_chain_kojima_2022",
      "_generate_reasoning_chain_attention",
      "_generate_reasoning_chain_features",
      "_generate_reasoning_chain_prototypes",
      "_encode_state_with_learned_embedding",
      "_encode_state_with_transformer",
      "_encode_state_with_graph",
      "_encode_state_with_symbolic_logic",
      "_encode_state_research_accurate_fallback",
      "_apply_attention_guided_influence",
      "_apply_feature_modulation_influence",
      "_apply_learned_transformation_influence",
      "_apply_contextual_adaptation_influence",
      "_apply_semantic_perturbation",
      "_tokenize_state_for_transformer",
      "_state_to_graph_structure",
      "_parse_state_to_predicates",
      "_encode_state_safe",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_infer_feature_dim_from_architecture",
      "__init__",
      "scale_compute",
      "_scale_compute_basic",
      "_estimate_difficulty",
      "_allocate_compute_budget",
      "_compute_step",
      "_compute_process_reward",
      "_compute_process_reward_research_accurate",
      "_compute_process_reward_simplified",
      "_compute_process_reward_stepwise_verification",
      "_ensemble_predictions",
      "_compute_intra_class_variance",
      "_compute_distribution_shift",
      "_update_performance_tracker",
      "get_compute_statistics",
      "_scale_compute_snell2024",
      "_scale_compute_akyurek2024",
      "_scale_compute_openai_o1",
      "_chain_of_thought_inference",
      "_self_consistent_reasoning",
      "_zero_shot_cot_reasoning",
      "_scale_compute_hybrid",
      "_compute_process_reward",
      "_test_time_training_step",
      "_chain_of_thought_reasoning",
      "_compute_optimal_allocation",
      "_adaptive_distribution_update",
      "_generate_reasoning_chain",
      "_generate_wei_2022_reasoning_chain",
      "_generate_kojima_2022_reasoning_chain",
      "_generate_constitutional_reasoning_chain",
      "_extract_features",
      "_compute_class_prototypes",
      "_get_representation",
      "_generate_reasoning_path",
      "_generate_attention_based_reasoning",
      "_generate_feature_based_reasoning",
      "_generate_prototype_distance_reasoning",
      "_verify_reasoning_step",
      "_verify_with_entropy_based",
      "_verify_with_loss_based",
      "_verify_with_gradient_norm_based",
      "_verify_with_combined_score",
      "_verify_with_process_reward_model",
      "_verify_with_consistency_based",
      "_verify_with_gradient_based",
      "_compute_research_accurate_process_reward",
      "_compute_snell_2024_process_reward",
      "_compute_gradient_based_process_reward",
      "_compute_consistency_based_process_reward",
      "_estimate_task_difficulty_batch",
      "_ensemble_predictions_advanced",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_ensemble_predictions_hybrid",
      "_extract_features_safe",
      "_initialize_process_reward_model",
      "_cross_entropy_gradient_difficulty",
      "_fisher_information_difficulty",
      "_influence_function_difficulty",
      "_legacy_gradient_difficulty",
      "_encode_reasoning_state",
      "_compute_prototype_based_fallback",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_forward_from_state",
      "_compute_consistency_score",
      "_compute_consistency_fallback",
      "create_process_reward_config",
      "create_consistency_verification_config",
      "create_gradient_verification_config",
      "create_attention_reasoning_config",
      "create_feature_reasoning_config",
      "create_prototype_reasoning_config",
      "create_comprehensive_config",
      "create_fast_config",
      "_generate_reasoning_chain",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_generate_reasoning_chain_comprehensive",
      "_generate_reasoning_chain_wei_2022",
      "_generate_reasoning_chain_wang_2022",
      "_generate_reasoning_chain_kojima_2022",
      "_generate_reasoning_chain_attention",
      "_generate_reasoning_chain_features",
      "_generate_reasoning_chain_prototypes",
      "_encode_state_with_learned_embedding",
      "_encode_state_with_transformer",
      "_encode_state_with_graph",
      "_encode_state_with_symbolic_logic",
      "_encode_state_research_accurate_fallback",
      "_apply_attention_guided_influence",
      "_apply_feature_modulation_influence",
      "_apply_learned_transformation_influence",
      "_apply_contextual_adaptation_influence",
      "_apply_semantic_perturbation",
      "_tokenize_state_for_transformer",
      "_state_to_graph_structure",
      "_parse_state_to_predicates",
      "_encode_state_safe",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_infer_feature_dim_from_architecture",
      "__init__",
      "scale_compute",
      "_scale_compute_basic",
      "_estimate_difficulty",
      "_allocate_compute_budget",
      "_compute_step",
      "_compute_process_reward",
      "_compute_process_reward_research_accurate",
      "_compute_process_reward_simplified",
      "_compute_process_reward_stepwise_verification",
      "_ensemble_predictions",
      "_compute_intra_class_variance",
      "_compute_distribution_shift",
      "_update_performance_tracker",
      "get_compute_statistics",
      "_scale_compute_snell2024",
      "_scale_compute_akyurek2024",
      "_scale_compute_openai_o1",
      "_chain_of_thought_inference",
      "_self_consistent_reasoning",
      "_zero_shot_cot_reasoning",
      "_scale_compute_hybrid",
      "_compute_process_reward",
      "_test_time_training_step",
      "_chain_of_thought_reasoning",
      "_compute_optimal_allocation",
      "_adaptive_distribution_update",
      "_generate_reasoning_chain",
      "_generate_wei_2022_reasoning_chain",
      "_generate_kojima_2022_reasoning_chain",
      "_generate_constitutional_reasoning_chain",
      "_extract_features",
      "_compute_class_prototypes",
      "_get_representation",
      "_generate_reasoning_path",
      "_generate_attention_based_reasoning",
      "_generate_feature_based_reasoning",
      "_generate_prototype_distance_reasoning",
      "_verify_reasoning_step",
      "_verify_with_entropy_based",
      "_verify_with_loss_based",
      "_verify_with_gradient_norm_based",
      "_verify_with_combined_score",
      "_verify_with_process_reward_model",
      "_verify_with_consistency_based",
      "_verify_with_gradient_based",
      "_compute_research_accurate_process_reward",
      "_compute_snell_2024_process_reward",
      "_compute_gradient_based_process_reward",
      "_compute_consistency_based_process_reward",
      "_estimate_task_difficulty_batch",
      "_ensemble_predictions_advanced",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_ensemble_predictions_hybrid",
      "_extract_features_safe",
      "_initialize_process_reward_model",
      "_cross_entropy_gradient_difficulty",
      "_fisher_information_difficulty",
      "_influence_function_difficulty",
      "_legacy_gradient_difficulty",
      "_encode_reasoning_state",
      "_compute_prototype_based_fallback",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_forward_from_state",
      "_compute_consistency_score",
      "_compute_consistency_fallback",
      "create_process_reward_config",
      "create_consistency_verification_config",
      "create_gradient_verification_config",
      "create_attention_reasoning_config",
      "create_feature_reasoning_config",
      "create_prototype_reasoning_config",
      "create_comprehensive_config",
      "create_fast_config",
      "_generate_reasoning_chain",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_generate_reasoning_chain_comprehensive",
      "_generate_reasoning_chain_wei_2022",
      "_generate_reasoning_chain_wang_2022",
      "_generate_reasoning_chain_kojima_2022",
      "_generate_reasoning_chain_attention",
      "_generate_reasoning_chain_features",
      "_generate_reasoning_chain_prototypes",
      "_encode_state_with_learned_embedding",
      "_encode_state_with_transformer",
      "_encode_state_with_graph",
      "_encode_state_with_symbolic_logic",
      "_encode_state_research_accurate_fallback",
      "_apply_attention_guided_influence",
      "_apply_feature_modulation_influence",
      "_apply_learned_transformation_influence",
      "_apply_contextual_adaptation_influence",
      "_apply_semantic_perturbation",
      "_tokenize_state_for_transformer",
      "_state_to_graph_structure",
      "_parse_state_to_predicates",
      "_encode_state_safe",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_infer_feature_dim_from_architecture",
      "__init__",
      "scale_compute",
      "_scale_compute_basic",
      "_estimate_difficulty",
      "_allocate_compute_budget",
      "_compute_step",
      "_compute_process_reward",
      "_compute_process_reward_research_accurate",
      "_compute_process_reward_simplified",
      "_compute_process_reward_stepwise_verification",
      "_ensemble_predictions",
      "_compute_intra_class_variance",
      "_compute_distribution_shift",
      "_update_performance_tracker",
      "get_compute_statistics",
      "_scale_compute_snell2024",
      "_scale_compute_akyurek2024",
      "_scale_compute_openai_o1",
      "_chain_of_thought_inference",
      "_self_consistent_reasoning",
      "_zero_shot_cot_reasoning",
      "_scale_compute_hybrid",
      "_compute_process_reward",
      "_test_time_training_step",
      "_chain_of_thought_reasoning",
      "_compute_optimal_allocation",
      "_adaptive_distribution_update",
      "_generate_reasoning_chain",
      "_generate_wei_2022_reasoning_chain",
      "_generate_kojima_2022_reasoning_chain",
      "_generate_constitutional_reasoning_chain",
      "_extract_features",
      "_compute_class_prototypes",
      "_get_representation",
      "_generate_reasoning_path",
      "_generate_attention_based_reasoning",
      "_generate_feature_based_reasoning",
      "_generate_prototype_distance_reasoning",
      "_verify_reasoning_step",
      "_verify_with_entropy_based",
      "_verify_with_loss_based",
      "_verify_with_gradient_norm_based",
      "_verify_with_combined_score",
      "_verify_with_process_reward_model",
      "_verify_with_consistency_based",
      "_verify_with_gradient_based",
      "_compute_research_accurate_process_reward",
      "_compute_snell_2024_process_reward",
      "_compute_gradient_based_process_reward",
      "_compute_consistency_based_process_reward",
      "_estimate_task_difficulty_batch",
      "_ensemble_predictions_advanced",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_ensemble_predictions_hybrid",
      "_extract_features_safe",
      "_initialize_process_reward_model",
      "_cross_entropy_gradient_difficulty",
      "_fisher_information_difficulty",
      "_influence_function_difficulty",
      "_legacy_gradient_difficulty",
      "_encode_reasoning_state",
      "_compute_prototype_based_fallback",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_forward_from_state",
      "_compute_consistency_score",
      "_compute_consistency_fallback",
      "create_process_reward_config",
      "create_consistency_verification_config",
      "create_gradient_verification_config",
      "create_attention_reasoning_config",
      "create_feature_reasoning_config",
      "create_prototype_reasoning_config",
      "create_comprehensive_config",
      "create_fast_config",
      "_generate_reasoning_chain",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_generate_reasoning_chain_comprehensive",
      "_generate_reasoning_chain_wei_2022",
      "_generate_reasoning_chain_wang_2022",
      "_generate_reasoning_chain_kojima_2022",
      "_generate_reasoning_chain_attention",
      "_generate_reasoning_chain_features",
      "_generate_reasoning_chain_prototypes",
      "_encode_state_with_learned_embedding",
      "_encode_state_with_transformer",
      "_encode_state_with_graph",
      "_encode_state_with_symbolic_logic",
      "_encode_state_research_accurate_fallback",
      "_apply_attention_guided_influence",
      "_apply_feature_modulation_influence",
      "_apply_learned_transformation_influence",
      "_apply_contextual_adaptation_influence",
      "_apply_semantic_perturbation",
      "_tokenize_state_for_transformer",
      "_state_to_graph_structure",
      "_parse_state_to_predicates",
      "_encode_state_safe",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_infer_feature_dim_from_architecture",
      "_generate_reasoning_chain",
      "_reason_to_prediction",
      "_aggregate_cot_predictions",
      "_generate_reasoning_chain_comprehensive",
      "_generate_reasoning_chain_wei_2022",
      "_generate_reasoning_chain_wang_2022",
      "_generate_reasoning_chain_kojima_2022",
      "_generate_reasoning_chain_attention",
      "_generate_reasoning_chain_features",
      "_generate_reasoning_chain_prototypes",
      "_encode_state_with_learned_embedding",
      "_encode_state_with_transformer",
      "_encode_state_with_graph",
      "_encode_state_with_symbolic_logic",
      "_encode_state_research_accurate_fallback",
      "_apply_attention_guided_influence",
      "_apply_feature_modulation_influence",
      "_apply_learned_transformation_influence",
      "_apply_contextual_adaptation_influence",
      "_apply_semantic_perturbation",
      "_tokenize_state_for_transformer",
      "_state_to_graph_structure",
      "_parse_state_to_predicates",
      "_encode_state_safe",
      "_compute_support_centroid_fallback",
      "_compute_learned_embedding_fallback",
      "_compute_task_statistics_fallback",
      "_infer_feature_dim_from_architecture"
    ],
    "total_items": 694
  },
  "src/meta_learning/meta_learning_modules/old_archive/utils_original_1632_lines.py": {
    "classes": [
      "TaskConfiguration",
      "EvaluationConfig",
      "MetaLearningDataset",
      "TaskSampler",
      "DatasetConfig",
      "MetricsConfig",
      "StatsConfig",
      "CurriculumConfig",
      "DiversityConfig",
      "EvaluationMetrics",
      "StatisticalAnalysis",
      "CurriculumLearning",
      "TaskDiversityTracker"
    ],
    "functions": [
      "few_shot_accuracy",
      "adaptation_speed",
      "compute_confidence_interval",
      "compute_confidence_interval_research_accurate",
      "_auto_select_ci_method",
      "compute_t_confidence_interval",
      "compute_meta_learning_ci",
      "compute_bca_bootstrap_ci",
      "visualize_meta_learning_results",
      "save_meta_learning_results",
      "load_meta_learning_results",
      "create_basic_task_config",
      "create_research_accurate_task_config",
      "create_basic_evaluation_config",
      "create_research_accurate_evaluation_config",
      "create_meta_learning_standard_evaluation_config",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm"
    ],
    "methods": [
      "__init__",
      "__len__",
      "__getitem__",
      "sample_task",
      "_sample_task_classes",
      "_sample_support_query",
      "_estimate_class_difficulties",
      "_estimate_class_difficulties_research_accurate",
      "_estimate_class_difficulty_silhouette",
      "_estimate_class_difficulty_entropy",
      "_estimate_class_difficulty_knn",
      "_apply_augmentation",
      "_basic_augmentation",
      "_advanced_augmentation",
      "_compute_task_metadata",
      "__init__",
      "__iter__",
      "__len__",
      "update_epoch",
      "_apply_curriculum_filter",
      "_adaptive_difficulty_schedule",
      "update_performance",
      "few_shot_accuracy",
      "adaptation_speed",
      "compute_confidence_interval",
      "compute_confidence_interval_research_accurate",
      "_auto_select_ci_method",
      "visualize_meta_learning_results",
      "save_meta_learning_results",
      "load_meta_learning_results",
      "create_basic_task_config",
      "create_research_accurate_task_config",
      "create_basic_evaluation_config",
      "create_research_accurate_evaluation_config",
      "create_meta_learning_standard_evaluation_config",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "__len__",
      "__getitem__",
      "sample_task",
      "_sample_task_classes",
      "_sample_support_query",
      "_estimate_class_difficulties",
      "_estimate_class_difficulties_research_accurate",
      "_estimate_class_difficulty_silhouette",
      "_estimate_class_difficulty_entropy",
      "_estimate_class_difficulty_knn",
      "_apply_augmentation",
      "_basic_augmentation",
      "_advanced_augmentation",
      "_compute_task_metadata",
      "__init__",
      "__iter__",
      "__len__",
      "update_epoch",
      "_apply_curriculum_filter",
      "_adaptive_difficulty_schedule",
      "update_performance",
      "few_shot_accuracy",
      "adaptation_speed",
      "compute_confidence_interval",
      "compute_confidence_interval_research_accurate",
      "_auto_select_ci_method",
      "visualize_meta_learning_results",
      "save_meta_learning_results",
      "load_meta_learning_results",
      "create_basic_task_config",
      "create_research_accurate_task_config",
      "create_basic_evaluation_config",
      "create_research_accurate_evaluation_config",
      "create_meta_learning_standard_evaluation_config",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "__len__",
      "__getitem__",
      "sample_task",
      "_sample_task_classes",
      "_sample_support_query",
      "_estimate_class_difficulties",
      "_estimate_class_difficulties_research_accurate",
      "_estimate_class_difficulty_silhouette",
      "_estimate_class_difficulty_entropy",
      "_estimate_class_difficulty_knn",
      "_apply_augmentation",
      "_basic_augmentation",
      "_advanced_augmentation",
      "_compute_task_metadata",
      "__init__",
      "__iter__",
      "__len__",
      "update_epoch",
      "_apply_curriculum_filter",
      "_adaptive_difficulty_schedule",
      "update_performance",
      "few_shot_accuracy",
      "adaptation_speed",
      "compute_confidence_interval",
      "compute_confidence_interval_research_accurate",
      "_auto_select_ci_method",
      "visualize_meta_learning_results",
      "save_meta_learning_results",
      "load_meta_learning_results",
      "create_basic_task_config",
      "create_research_accurate_task_config",
      "create_basic_evaluation_config",
      "create_research_accurate_evaluation_config",
      "create_meta_learning_standard_evaluation_config",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "__iter__",
      "__len__",
      "update_epoch",
      "_apply_curriculum_filter",
      "_adaptive_difficulty_schedule",
      "update_performance",
      "few_shot_accuracy",
      "adaptation_speed",
      "compute_confidence_interval",
      "compute_confidence_interval_research_accurate",
      "_auto_select_ci_method",
      "visualize_meta_learning_results",
      "save_meta_learning_results",
      "load_meta_learning_results",
      "create_basic_task_config",
      "create_research_accurate_task_config",
      "create_basic_evaluation_config",
      "create_research_accurate_evaluation_config",
      "create_meta_learning_standard_evaluation_config",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "__init__",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm",
      "__init__",
      "add_task",
      "compute_diversity",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "basic_confidence_interval",
      "estimate_difficulty",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm"
    ],
    "total_items": 435
  },
  "src/meta_learning/meta_learning_modules/prototypical_networks_fixed.py": {
    "classes": [
      "ResearchPrototypicalNetworks",
      "PrototypicalLoss",
      "CosinePrototypicalNetworks"
    ],
    "functions": [
      "create_prototypical_network"
    ],
    "methods": [
      "__init__",
      "forward",
      "_compute_prototypes",
      "_compute_distances",
      "compute_loss",
      "predict",
      "__init__",
      "forward",
      "_compute_prototypes",
      "_compute_distances",
      "__init__",
      "_compute_distances",
      "__init__",
      "forward",
      "_compute_prototypes",
      "_compute_distances",
      "__init__",
      "_compute_distances",
      "__init__",
      "_compute_distances"
    ],
    "total_items": 24
  },
  "src/meta_learning/meta_learning_modules/research_tests.py": {
    "classes": [
      "TestEpisodeProtocol",
      "TestPrototypicalNetworks",
      "TestMAML",
      "TestNumericalStability"
    ],
    "functions": [
      "test_end_to_end_prototypical_episode"
    ],
    "methods": [
      "test_episode_label_remapping",
      "test_episode_class_counts",
      "test_episode_deterministic_generation",
      "test_prototypes_are_class_means",
      "test_negative_distance_logits",
      "test_cosine_normalization",
      "test_query_closest_to_own_prototype",
      "test_second_order_gradients",
      "test_fomaml_first_order",
      "test_functional_parameter_updates",
      "test_stable_softmax_equivalence",
      "test_safe_normalization",
      "test_deterministic_seeding",
      "generate_random",
      "test_prototypes_are_class_means",
      "test_negative_distance_logits",
      "test_cosine_normalization",
      "test_query_closest_to_own_prototype",
      "test_second_order_gradients",
      "test_fomaml_first_order",
      "test_functional_parameter_updates",
      "test_stable_softmax_equivalence",
      "test_safe_normalization",
      "test_deterministic_seeding",
      "generate_random",
      "test_second_order_gradients",
      "test_fomaml_first_order",
      "test_functional_parameter_updates",
      "test_stable_softmax_equivalence",
      "test_safe_normalization",
      "test_deterministic_seeding",
      "generate_random",
      "test_stable_softmax_equivalence",
      "test_safe_normalization",
      "test_deterministic_seeding",
      "generate_random"
    ],
    "total_items": 41
  },
  "src/meta_learning/meta_learning_modules/test_time_compute.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "src/meta_learning/meta_learning_modules/test_time_compute_modular.py": {
    "classes": [],
    "functions": [
      "print_modular_info"
    ],
    "methods": [],
    "total_items": 1
  },
  "src/meta_learning/meta_learning_modules/test_time_compute_modules/__init__.py": {
    "classes": [],
    "functions": [
      "print_module_info"
    ],
    "methods": [],
    "total_items": 1
  },
  "src/meta_learning/meta_learning_modules/test_time_compute_modules/config.py": {
    "classes": [
      "TestTimeComputeConfig"
    ],
    "functions": [],
    "methods": [],
    "total_items": 1
  },
  "src/meta_learning/meta_learning_modules/test_time_compute_modules/factory.py": {
    "classes": [],
    "functions": [
      "create_process_reward_config",
      "create_consistency_verification_config",
      "create_gradient_verification_config",
      "create_attention_reasoning_config",
      "create_feature_reasoning_config",
      "create_prototype_reasoning_config",
      "create_multi_strategy_scaling_config",
      "create_fast_config"
    ],
    "methods": [],
    "total_items": 8
  },
  "src/meta_learning/meta_learning_modules/test_time_compute_modules/implementations.py": {
    "classes": [
      "TestTimeComputeScaler"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "scale_compute",
      "_process_reward_scaling",
      "_consistency_verification_scaling",
      "_gradient_verification_scaling",
      "_attention_reasoning_scaling",
      "_feature_reasoning_scaling",
      "_prototype_reasoning_scaling",
      "_basic_scaling",
      "_fallback_prediction",
      "get_compute_history",
      "reset_history",
      "get_performance_summary"
    ],
    "total_items": 14
  },
  "src/meta_learning/meta_learning_modules/test_time_compute_modules/strategies.py": {
    "classes": [
      "TestTimeComputeStrategy",
      "StateFallbackMethod",
      "StateForwardMethod",
      "VerificationFallbackMethod"
    ],
    "functions": [],
    "methods": [],
    "total_items": 4
  },
  "src/meta_learning/meta_learning_modules/utils_modules/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "src/meta_learning/meta_learning_modules/utils_modules/analysis_visualization.py": {
    "classes": [],
    "functions": [
      "visualize_meta_learning_results",
      "save_meta_learning_results",
      "load_meta_learning_results"
    ],
    "methods": [],
    "total_items": 3
  },
  "src/meta_learning/meta_learning_modules/utils_modules/configurations.py": {
    "classes": [
      "DatasetMethod",
      "TaskConfiguration",
      "EvaluationConfig",
      "DatasetConfig",
      "MetricsConfig",
      "StatsConfig",
      "CurriculumConfig",
      "DiversityConfig"
    ],
    "functions": [],
    "methods": [
      "__post_init__",
      "__init__",
      "__init__",
      "__init__",
      "__post_init__",
      "__init__",
      "__init__",
      "__init__",
      "__post_init__",
      "__init__",
      "__init__",
      "__init__",
      "__post_init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__"
    ],
    "total_items": 30
  },
  "src/meta_learning/meta_learning_modules/utils_modules/dataset_sampling.py": {
    "classes": [
      "MetaLearningDataset",
      "TaskSampler"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "__len__",
      "__getitem__",
      "sample_task",
      "_sample_task_classes",
      "_sample_support_query",
      "_estimate_class_difficulties",
      "_estimate_class_difficulties_research_accurate",
      "_estimate_class_difficulty_silhouette",
      "_estimate_class_difficulty_entropy",
      "_estimate_class_difficulty_knn",
      "_apply_augmentation",
      "_basic_augmentation",
      "_advanced_augmentation",
      "_compute_task_metadata",
      "__init__",
      "__iter__",
      "__len__",
      "update_epoch",
      "_apply_curriculum_filter",
      "_adaptive_difficulty_schedule",
      "update_performance",
      "__init__",
      "__iter__",
      "__len__",
      "update_epoch",
      "_apply_curriculum_filter",
      "_adaptive_difficulty_schedule",
      "update_performance"
    ],
    "total_items": 31
  },
  "src/meta_learning/meta_learning_modules/utils_modules/factory_functions.py": {
    "classes": [
      "CurriculumLearning",
      "TaskDiversityTracker"
    ],
    "functions": [
      "create_basic_task_config",
      "create_research_accurate_task_config",
      "create_basic_evaluation_config",
      "create_research_accurate_evaluation_config",
      "create_meta_learning_standard_evaluation_config",
      "create_dataset",
      "create_metrics_evaluator",
      "create_curriculum_scheduler",
      "track_task_diversity",
      "evaluate_meta_learning_algorithm"
    ],
    "methods": [
      "__init__",
      "update_difficulty",
      "get_current_difficulty",
      "__init__",
      "add_task",
      "compute_diversity",
      "__init__",
      "add_task",
      "compute_diversity"
    ],
    "total_items": 21
  },
  "src/meta_learning/meta_learning_modules/utils_modules/statistical_evaluation.py": {
    "classes": [
      "TaskDifficultyConfig",
      "EvaluationMetrics",
      "StatisticalAnalysis"
    ],
    "functions": [
      "few_shot_accuracy",
      "adaptation_speed",
      "compute_confidence_interval",
      "compute_confidence_interval_research_accurate",
      "_auto_select_ci_method",
      "compute_t_confidence_interval",
      "compute_meta_learning_ci",
      "compute_bca_bootstrap_ci",
      "basic_confidence_interval",
      "estimate_difficulty",
      "_estimate_difficulty_intra_class_variance",
      "_estimate_difficulty_inter_class_separation",
      "_estimate_difficulty_mdl_complexity",
      "_estimate_difficulty_gradient_based",
      "_estimate_difficulty_entropy"
    ],
    "methods": [
      "__post_init__",
      "estimate_difficulty",
      "_estimate_difficulty_intra_class_variance",
      "_estimate_difficulty_inter_class_separation",
      "_estimate_difficulty_mdl_complexity",
      "_estimate_difficulty_gradient_based",
      "_estimate_difficulty_entropy",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "reset",
      "update",
      "compute_summary",
      "__init__",
      "compute_confidence_interval",
      "statistical_test",
      "__init__",
      "compute_confidence_interval",
      "statistical_test"
    ],
    "total_items": 42
  },
  "src/meta_learning/old_archive/advanced_components_original.py": {
    "classes": [
      "UncertaintyAwareDistanceConfig",
      "MultiScaleFeatureConfig",
      "HierarchicalPrototypeConfig",
      "MultiScaleFeatureAggregator",
      "PrototypeRefiner",
      "UncertaintyEstimator",
      "ScaledDotProductAttention",
      "AdditiveAttention",
      "BilinearAttention",
      "GraphRelationModule",
      "StandardRelationModule",
      "UncertaintyAwareDistance",
      "HierarchicalPrototypes",
      "TaskAdaptivePrototypes"
    ],
    "functions": [
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets"
    ],
    "methods": [
      "__post_init__",
      "__init__",
      "_get_num_scales",
      "_init_feature_pyramid_network",
      "_init_dilated_convolution",
      "_init_attention_based",
      "_init_fusion_network",
      "forward",
      "_apply_feature_pyramid",
      "_apply_dilated_convolution",
      "_apply_attention_based",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__post_init__",
      "__init__",
      "_get_num_scales",
      "_init_feature_pyramid_network",
      "_init_dilated_convolution",
      "_init_attention_based",
      "_init_fusion_network",
      "forward",
      "_apply_feature_pyramid",
      "_apply_dilated_convolution",
      "_apply_attention_based",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "_get_num_scales",
      "_init_feature_pyramid_network",
      "_init_dilated_convolution",
      "_init_attention_based",
      "_init_fusion_network",
      "forward",
      "_apply_feature_pyramid",
      "_apply_dilated_convolution",
      "_apply_attention_based",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "_get_num_scales",
      "_init_feature_pyramid_network",
      "_init_dilated_convolution",
      "_init_attention_based",
      "_init_fusion_network",
      "forward",
      "_apply_feature_pyramid",
      "_apply_dilated_convolution",
      "_apply_attention_based",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "_init_monte_carlo_dropout",
      "_init_deep_ensembles",
      "_init_evidential_deep_learning",
      "_init_simple_uncertainty_net",
      "forward",
      "_compute_mc_dropout_uncertainty",
      "_compute_deep_ensemble_uncertainty",
      "_compute_evidential_uncertainty",
      "_compute_simple_uncertainty",
      "get_regularization_loss",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "_init_tree_structured",
      "_init_compositional",
      "_init_capsule_based",
      "_build_tree_structure",
      "forward",
      "_compute_tree_structured_prototypes",
      "_compute_compositional_prototypes",
      "_compute_capsule_based_prototypes",
      "_dynamic_routing",
      "_em_routing",
      "get_diversity_loss",
      "create_uncertainty_aware_distance",
      "create_multiscale_feature_aggregator",
      "create_hierarchical_prototypes",
      "get_uncertainty_config_presets",
      "get_multiscale_config_presets",
      "get_hierarchical_config_presets",
      "__init__",
      "forward",
      "__init__",
      "forward"
    ],
    "total_items": 568
  },
  "src/meta_learning/research_patches/__init__.py": {
    "classes": [],
    "functions": [
      "research_compliance_check",
      "fix_all_research_issues",
      "demo_research_workflow"
    ],
    "methods": [],
    "total_items": 3
  },
  "src/meta_learning/research_patches/batch_norm_policy_patch.py": {
    "classes": [
      "EpisodicBatchNormPolicy",
      "EpisodicNormalizationGuard"
    ],
    "functions": [
      "apply_episodic_bn_policy",
      "validate_few_shot_model"
    ],
    "methods": [
      "__init__",
      "apply_to_model",
      "_freeze_bn_stats",
      "_replace_batch_norm",
      "_get_replacement_norm",
      "restore_original_state",
      "__init__",
      "validate_episode_isolation",
      "validate_few_shot_model",
      "__init__",
      "validate_episode_isolation",
      "validate_few_shot_model"
    ],
    "total_items": 16
  },
  "src/meta_learning/research_patches/determinism_hooks.py": {
    "classes": [
      "DeterminismManager",
      "ReproducibilityReport"
    ],
    "functions": [
      "deterministic_context",
      "setup_deterministic_environment",
      "create_deterministic_dataloader"
    ],
    "methods": [
      "__init__",
      "enable_full_determinism",
      "_set_all_seeds",
      "_configure_torch_determinism",
      "_configure_cuda_determinism",
      "_configure_numpy_determinism",
      "_configure_python_determinism",
      "create_deterministic_worker_init_fn",
      "worker_init_fn",
      "validate_determinism",
      "restore_original_settings",
      "generate_environment_report",
      "generate_experiment_hash",
      "create_deterministic_dataloader",
      "generate_environment_report",
      "generate_experiment_hash",
      "create_deterministic_dataloader"
    ],
    "total_items": 22
  },
  "src/meta_learning/research_patches/evaluation_harness.py": {
    "classes": [
      "EpisodeConfig",
      "EvaluationResults",
      "StratifiedEpisodeSampler",
      "FewShotEvaluationHarness"
    ],
    "functions": [
      "quick_evaluation",
      "publication_evaluation"
    ],
    "methods": [
      "__post_init__",
      "to_dict",
      "format_report",
      "__init__",
      "sample_episode",
      "__init__",
      "_validate_configuration",
      "evaluate",
      "_evaluate_single_episode",
      "_compute_statistics",
      "run_statistical_tests",
      "publication_evaluation",
      "dummy_dataset_loader",
      "__post_init__",
      "to_dict",
      "format_report",
      "__init__",
      "sample_episode",
      "__init__",
      "_validate_configuration",
      "evaluate",
      "_evaluate_single_episode",
      "_compute_statistics",
      "run_statistical_tests",
      "publication_evaluation",
      "dummy_dataset_loader",
      "__init__",
      "sample_episode",
      "__init__",
      "_validate_configuration",
      "evaluate",
      "_evaluate_single_episode",
      "_compute_statistics",
      "run_statistical_tests",
      "publication_evaluation",
      "dummy_dataset_loader",
      "__init__",
      "_validate_configuration",
      "evaluate",
      "_evaluate_single_episode",
      "_compute_statistics",
      "run_statistical_tests",
      "publication_evaluation",
      "dummy_dataset_loader"
    ],
    "total_items": 50
  },
  "src/meta_learning/research_patches/leakage_guards.py": {
    "classes": [
      "DataLeakageDetector",
      "LeakagePreventionContext",
      "ComprehensiveLeakageValidator"
    ],
    "functions": [
      "leakage_guard",
      "validate_episode",
      "leakage_free_context"
    ],
    "methods": [
      "__init__",
      "validate_episode_construction",
      "validate_normalization_statistics",
      "validate_feature_scaling",
      "validate_dataset_split",
      "__init__",
      "__enter__",
      "__exit__",
      "_apply_batchnorm_policy",
      "_restore_batchnorm_policy",
      "leakage_guard",
      "evaluate_episode",
      "decorator",
      "wrapper",
      "__init__",
      "validate_full_pipeline",
      "generate_leakage_report",
      "__init__",
      "__enter__",
      "__exit__",
      "_apply_batchnorm_policy",
      "_restore_batchnorm_policy",
      "leakage_guard",
      "evaluate_episode",
      "decorator",
      "wrapper",
      "__init__",
      "validate_full_pipeline",
      "generate_leakage_report",
      "__init__",
      "validate_full_pipeline",
      "generate_leakage_report"
    ],
    "total_items": 38
  },
  "surgical_patch_validation.py": {
    "classes": [],
    "functions": [
      "validate_gradient_contexts",
      "validate_second_order_maml",
      "validate_detach_removal",
      "validate_meta_loss_accumulation",
      "validate_core_mathematical_fixes",
      "generate_validation_report"
    ],
    "methods": [],
    "total_items": 6
  },
  "test_math_fixes_standalone.py": {
    "classes": [],
    "functions": [
      "test_maml_second_order_gradients",
      "test_prototypical_per_class_means",
      "test_softmax_negative_distances",
      "test_reptile_no_query_contamination",
      "test_no_batchnorm_in_few_shot"
    ],
    "methods": [],
    "total_items": 5
  },
  "test_process_reward.py": {
    "classes": [
      "MockConfig",
      "TestTimeComputeScaler"
    ],
    "functions": [
      "main"
    ],
    "methods": [
      "__init__",
      "__init__",
      "_compute_process_reward_placeholder",
      "main",
      "__init__",
      "_compute_process_reward_placeholder",
      "main"
    ],
    "total_items": 10
  },
  "test_quick_fix.py": {
    "classes": [],
    "functions": [
      "test_fixme_implementations"
    ],
    "methods": [],
    "total_items": 1
  },
  "tests/advanced_coverage/test_all_uncovered_paths.py": {
    "classes": [
      "TestTimeComputeAllUncoveredPaths",
      "TestMAMLVariantsAllUncoveredPaths",
      "TestUtilsAllUncoveredPaths",
      "MockAdvancedLearner",
      "MockTransformerLearner",
      "MockEnsembleLearner",
      "MockTrainableLearner",
      "MockConvolutionalLearner",
      "MockAttentionLearner",
      "MockReasoningLearner",
      "MockConfidenceLearner",
      "MockConvolutionalNetwork",
      "MockRecurrentNetwork",
      "MockAttentionNetwork",
      "MockResidualNetwork",
      "MockLayerNormNetwork",
      "MockGPTModel",
      "MockBERTModel",
      "MockT5Model",
      "MockGenericLLM"
    ],
    "functions": [],
    "methods": [
      "test_all_compute_strategies_comprehensive",
      "test_process_reward_model_all_variants",
      "test_test_time_training_all_scenarios",
      "test_chain_of_thought_all_configurations",
      "test_hybrid_compute_strategy_all_combinations",
      "test_all_maml_variants_comprehensive",
      "test_maml_advanced_features_all_combinations",
      "test_maml_en_llm_comprehensive",
      "test_functional_forward_all_scenarios",
      "test_meta_learning_dataset_all_configurations",
      "test_evaluation_metrics_all_features",
      "test_statistical_analysis_all_methods",
      "test_curriculum_learning_all_types_comprehensive",
      "test_task_diversity_tracker_comprehensive",
      "__init__",
      "__call__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "test_all_maml_variants_comprehensive",
      "test_maml_advanced_features_all_combinations",
      "test_maml_en_llm_comprehensive",
      "test_functional_forward_all_scenarios",
      "test_meta_learning_dataset_all_configurations",
      "test_evaluation_metrics_all_features",
      "test_statistical_analysis_all_methods",
      "test_curriculum_learning_all_types_comprehensive",
      "test_task_diversity_tracker_comprehensive",
      "__init__",
      "__call__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "test_meta_learning_dataset_all_configurations",
      "test_evaluation_metrics_all_features",
      "test_statistical_analysis_all_methods",
      "test_curriculum_learning_all_types_comprehensive",
      "test_task_diversity_tracker_comprehensive",
      "__init__",
      "__call__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "__call__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__call__",
      "__init__",
      "forward",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "__call__",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__call__",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward",
      "__init__",
      "forward"
    ],
    "total_items": 441
  },
  "tests/benchmarks/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "tests/benchmarks/test_performance.py": {
    "classes": [
      "BenchmarkResult",
      "PerformanceBenchmarkSuite",
      "TestAlgorithmBenchmarks",
      "TestScalabilityBenchmarks",
      "TestHardwareBenchmarks"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "_create_baseline_configs",
      "_create_encoder",
      "_create_dataset",
      "_measure_memory_usage",
      "_get_gpu_utilization",
      "benchmark_algorithm",
      "benchmark_suite",
      "benchmark_config",
      "test_prototypical_networks_benchmark",
      "test_maml_variants_benchmark",
      "test_test_time_compute_benchmark",
      "__init__",
      "scale_compute",
      "test_continual_learning_benchmark",
      "test_scalability_across_ways",
      "test_memory_efficiency_benchmark",
      "test_device_comparison_benchmark",
      "test_compilation_benchmark",
      "__init__",
      "_create_baseline_configs",
      "_create_encoder",
      "_create_dataset",
      "_measure_memory_usage",
      "_get_gpu_utilization",
      "benchmark_algorithm",
      "benchmark_suite",
      "benchmark_config",
      "test_prototypical_networks_benchmark",
      "test_maml_variants_benchmark",
      "test_test_time_compute_benchmark",
      "__init__",
      "scale_compute",
      "test_continual_learning_benchmark",
      "test_scalability_across_ways",
      "test_memory_efficiency_benchmark",
      "test_device_comparison_benchmark",
      "test_compilation_benchmark",
      "benchmark_suite",
      "benchmark_config",
      "test_prototypical_networks_benchmark",
      "test_maml_variants_benchmark",
      "test_test_time_compute_benchmark",
      "__init__",
      "scale_compute",
      "test_continual_learning_benchmark",
      "test_scalability_across_ways",
      "test_memory_efficiency_benchmark",
      "test_device_comparison_benchmark",
      "test_compilation_benchmark",
      "test_scalability_across_ways",
      "test_memory_efficiency_benchmark",
      "test_device_comparison_benchmark",
      "test_compilation_benchmark",
      "test_device_comparison_benchmark",
      "test_compilation_benchmark"
    ],
    "total_items": 61
  },
  "tests/brutal_reality_check/test_algorithm_mathematical_correctness.py": {
    "classes": [
      "MathematicalCorrectnessValidator",
      "TestPrototypicalNetworksMathematicalCorrectness",
      "TestMAMLMathematicalCorrectness",
      "TestTestTimeComputeMathematicalCorrectness",
      "TestIntegrationMathematicalCorrectness",
      "TestEdgeCaseMathematicalCorrectness"
    ],
    "functions": [],
    "methods": [
      "validate_gradient_computation",
      "check_mathematical_properties",
      "test_snell_equation_1_prototype_computation",
      "forward",
      "test_snell_equation_2_distance_computation",
      "test_snell_equation_3_probability_computation",
      "test_finn_equation_1_inner_loop_update",
      "test_finn_equation_2_meta_gradient_computation",
      "test_first_order_maml_approximation",
      "test_ttc_adaptive_compute_allocation",
      "forward",
      "test_ttc_confidence_estimation",
      "__init__",
      "forward",
      "test_ttc_compute_efficiency_metrics",
      "test_end_to_end_few_shot_learning_pipeline",
      "test_meta_learning_mathematical_properties_preservation",
      "test_numerical_stability_zero_gradients",
      "forward",
      "test_numerical_stability_extreme_values",
      "test_empty_or_minimal_data_handling",
      "test_snell_equation_1_prototype_computation",
      "forward",
      "test_snell_equation_2_distance_computation",
      "test_snell_equation_3_probability_computation",
      "test_finn_equation_1_inner_loop_update",
      "test_finn_equation_2_meta_gradient_computation",
      "test_first_order_maml_approximation",
      "test_ttc_adaptive_compute_allocation",
      "forward",
      "test_ttc_confidence_estimation",
      "__init__",
      "forward",
      "test_ttc_compute_efficiency_metrics",
      "test_end_to_end_few_shot_learning_pipeline",
      "test_meta_learning_mathematical_properties_preservation",
      "test_numerical_stability_zero_gradients",
      "forward",
      "test_numerical_stability_extreme_values",
      "test_empty_or_minimal_data_handling",
      "test_finn_equation_1_inner_loop_update",
      "test_finn_equation_2_meta_gradient_computation",
      "test_first_order_maml_approximation",
      "test_ttc_adaptive_compute_allocation",
      "forward",
      "test_ttc_confidence_estimation",
      "__init__",
      "forward",
      "test_ttc_compute_efficiency_metrics",
      "test_end_to_end_few_shot_learning_pipeline",
      "test_meta_learning_mathematical_properties_preservation",
      "test_numerical_stability_zero_gradients",
      "forward",
      "test_numerical_stability_extreme_values",
      "test_empty_or_minimal_data_handling",
      "test_ttc_adaptive_compute_allocation",
      "forward",
      "test_ttc_confidence_estimation",
      "__init__",
      "forward",
      "test_ttc_compute_efficiency_metrics",
      "test_end_to_end_few_shot_learning_pipeline",
      "test_meta_learning_mathematical_properties_preservation",
      "test_numerical_stability_zero_gradients",
      "forward",
      "test_numerical_stability_extreme_values",
      "test_empty_or_minimal_data_handling",
      "test_end_to_end_few_shot_learning_pipeline",
      "test_meta_learning_mathematical_properties_preservation",
      "test_numerical_stability_zero_gradients",
      "forward",
      "test_numerical_stability_extreme_values",
      "test_empty_or_minimal_data_handling",
      "test_numerical_stability_zero_gradients",
      "forward",
      "test_numerical_stability_extreme_values",
      "test_empty_or_minimal_data_handling"
    ],
    "total_items": 83
  },
  "tests/brutal_reality_check/test_edge_case_torture.py": {
    "classes": [
      "TortureTestValidator",
      "TestPrototypicalNetworksEdgeCaseTorture",
      "TestMAMLEdgeCaseTorture",
      "TestTestTimeComputeEdgeCaseTorture",
      "TestDatasetEdgeCaseTorture",
      "TestStatisticalEvaluationEdgeCaseTorture",
      "TestMemoryAndPerformanceEdgeCases"
    ],
    "functions": [],
    "methods": [
      "create_pathological_data",
      "check_graceful_failure",
      "test_all_zero_inputs_handling",
      "run_with_zeros",
      "test_identical_samples_handling",
      "run_with_identical",
      "test_extreme_value_numerical_stability",
      "run_with_extremes",
      "test_nan_contamination_handling",
      "run_with_nans",
      "test_single_sample_edge_case",
      "run_with_single_sample",
      "test_mismatched_dimension_error_handling",
      "run_with_mismatch",
      "test_zero_gradient_inner_update_handling",
      "forward",
      "run_with_zero_gradients",
      "test_exploding_gradient_robustness",
      "__init__",
      "forward",
      "run_with_exploding_gradients",
      "test_empty_meta_batch_handling",
      "run_with_empty_batch",
      "test_extremely_deep_inner_loop_stability",
      "run_with_deep_inner_loop",
      "test_zero_compute_budget_handling",
      "run_with_zero_budget",
      "test_impossible_confidence_threshold_handling",
      "run_with_impossible_threshold",
      "test_model_returning_nan_handling",
      "forward",
      "run_with_nan_model",
      "test_compute_budget_smaller_than_minimum_steps",
      "run_with_impossible_config",
      "test_empty_dataset_handling",
      "run_with_empty_dataset",
      "test_insufficient_samples_per_class_handling",
      "run_with_insufficient_samples",
      "test_label_range_validation",
      "run_with_invalid_labels",
      "test_task_configuration_boundary_conditions",
      "run_with_boundary_config",
      "test_identical_scores_confidence_interval",
      "run_with_identical_scores",
      "test_single_score_statistical_analysis",
      "run_with_single_score",
      "test_extreme_confidence_levels",
      "run_with_extreme_level",
      "test_large_tensor_handling",
      "run_with_large_tensors",
      "test_deep_model_gradient_computation",
      "run_with_deep_model",
      "test_all_zero_inputs_handling",
      "run_with_zeros",
      "test_identical_samples_handling",
      "run_with_identical",
      "test_extreme_value_numerical_stability",
      "run_with_extremes",
      "test_nan_contamination_handling",
      "run_with_nans",
      "test_single_sample_edge_case",
      "run_with_single_sample",
      "test_mismatched_dimension_error_handling",
      "run_with_mismatch",
      "test_zero_gradient_inner_update_handling",
      "forward",
      "run_with_zero_gradients",
      "test_exploding_gradient_robustness",
      "__init__",
      "forward",
      "run_with_exploding_gradients",
      "test_empty_meta_batch_handling",
      "run_with_empty_batch",
      "test_extremely_deep_inner_loop_stability",
      "run_with_deep_inner_loop",
      "test_zero_compute_budget_handling",
      "run_with_zero_budget",
      "test_impossible_confidence_threshold_handling",
      "run_with_impossible_threshold",
      "test_model_returning_nan_handling",
      "forward",
      "run_with_nan_model",
      "test_compute_budget_smaller_than_minimum_steps",
      "run_with_impossible_config",
      "test_empty_dataset_handling",
      "run_with_empty_dataset",
      "test_insufficient_samples_per_class_handling",
      "run_with_insufficient_samples",
      "test_label_range_validation",
      "run_with_invalid_labels",
      "test_task_configuration_boundary_conditions",
      "run_with_boundary_config",
      "test_identical_scores_confidence_interval",
      "run_with_identical_scores",
      "test_single_score_statistical_analysis",
      "run_with_single_score",
      "test_extreme_confidence_levels",
      "run_with_extreme_level",
      "test_large_tensor_handling",
      "run_with_large_tensors",
      "test_deep_model_gradient_computation",
      "run_with_deep_model",
      "test_zero_gradient_inner_update_handling",
      "forward",
      "run_with_zero_gradients",
      "test_exploding_gradient_robustness",
      "__init__",
      "forward",
      "run_with_exploding_gradients",
      "test_empty_meta_batch_handling",
      "run_with_empty_batch",
      "test_extremely_deep_inner_loop_stability",
      "run_with_deep_inner_loop",
      "test_zero_compute_budget_handling",
      "run_with_zero_budget",
      "test_impossible_confidence_threshold_handling",
      "run_with_impossible_threshold",
      "test_model_returning_nan_handling",
      "forward",
      "run_with_nan_model",
      "test_compute_budget_smaller_than_minimum_steps",
      "run_with_impossible_config",
      "test_empty_dataset_handling",
      "run_with_empty_dataset",
      "test_insufficient_samples_per_class_handling",
      "run_with_insufficient_samples",
      "test_label_range_validation",
      "run_with_invalid_labels",
      "test_task_configuration_boundary_conditions",
      "run_with_boundary_config",
      "test_identical_scores_confidence_interval",
      "run_with_identical_scores",
      "test_single_score_statistical_analysis",
      "run_with_single_score",
      "test_extreme_confidence_levels",
      "run_with_extreme_level",
      "test_large_tensor_handling",
      "run_with_large_tensors",
      "test_deep_model_gradient_computation",
      "run_with_deep_model",
      "test_zero_compute_budget_handling",
      "run_with_zero_budget",
      "test_impossible_confidence_threshold_handling",
      "run_with_impossible_threshold",
      "test_model_returning_nan_handling",
      "forward",
      "run_with_nan_model",
      "test_compute_budget_smaller_than_minimum_steps",
      "run_with_impossible_config",
      "test_empty_dataset_handling",
      "run_with_empty_dataset",
      "test_insufficient_samples_per_class_handling",
      "run_with_insufficient_samples",
      "test_label_range_validation",
      "run_with_invalid_labels",
      "test_task_configuration_boundary_conditions",
      "run_with_boundary_config",
      "test_identical_scores_confidence_interval",
      "run_with_identical_scores",
      "test_single_score_statistical_analysis",
      "run_with_single_score",
      "test_extreme_confidence_levels",
      "run_with_extreme_level",
      "test_large_tensor_handling",
      "run_with_large_tensors",
      "test_deep_model_gradient_computation",
      "run_with_deep_model",
      "test_empty_dataset_handling",
      "run_with_empty_dataset",
      "test_insufficient_samples_per_class_handling",
      "run_with_insufficient_samples",
      "test_label_range_validation",
      "run_with_invalid_labels",
      "test_task_configuration_boundary_conditions",
      "run_with_boundary_config",
      "test_identical_scores_confidence_interval",
      "run_with_identical_scores",
      "test_single_score_statistical_analysis",
      "run_with_single_score",
      "test_extreme_confidence_levels",
      "run_with_extreme_level",
      "test_large_tensor_handling",
      "run_with_large_tensors",
      "test_deep_model_gradient_computation",
      "run_with_deep_model",
      "test_identical_scores_confidence_interval",
      "run_with_identical_scores",
      "test_single_score_statistical_analysis",
      "run_with_single_score",
      "test_extreme_confidence_levels",
      "run_with_extreme_level",
      "test_large_tensor_handling",
      "run_with_large_tensors",
      "test_deep_model_gradient_computation",
      "run_with_deep_model",
      "test_large_tensor_handling",
      "run_with_large_tensors",
      "test_deep_model_gradient_computation",
      "run_with_deep_model"
    ],
    "total_items": 206
  },
  "tests/brutal_reality_check/test_paper_reproduction_exactness.py": {
    "classes": [
      "PaperReproductionResult",
      "PaperReproductionValidator",
      "TestSnell2017PrototypicalReproduction",
      "TestFinn2017MAMLReproduction",
      "TestSnell2024TestTimeComputeReproduction",
      "TestPaperReproductionIntegration",
      "TestPaperClaimsVerification"
    ],
    "functions": [],
    "methods": [
      "validate_equation_implementation",
      "check_hyperparameter_alignment",
      "test_snell2017_equation_1_exact_reproduction",
      "forward",
      "test_snell2017_equation_2_distance_exact_reproduction",
      "test_snell2017_equation_3_softmax_exact_reproduction",
      "test_snell2017_hyperparameter_reproduction",
      "test_finn2017_equation_1_inner_update_exact_reproduction",
      "test_finn2017_equation_2_meta_gradient_computation",
      "test_finn2017_first_order_approximation_correctness",
      "test_snell2024_compute_scaling_law_reproduction",
      "__init__",
      "forward",
      "test_snell2024_adaptive_compute_allocation",
      "test_prototypical_networks_with_test_time_compute_integration",
      "test_multi_algorithm_reproduction_consistency",
      "create_encoder",
      "test_breakthrough_algorithm_claims",
      "validate_equation_implementation",
      "check_hyperparameter_alignment",
      "test_snell2017_equation_1_exact_reproduction",
      "forward",
      "test_snell2017_equation_2_distance_exact_reproduction",
      "test_snell2017_equation_3_softmax_exact_reproduction",
      "test_snell2017_hyperparameter_reproduction",
      "test_finn2017_equation_1_inner_update_exact_reproduction",
      "test_finn2017_equation_2_meta_gradient_computation",
      "test_finn2017_first_order_approximation_correctness",
      "test_snell2024_compute_scaling_law_reproduction",
      "__init__",
      "forward",
      "test_snell2024_adaptive_compute_allocation",
      "test_prototypical_networks_with_test_time_compute_integration",
      "test_multi_algorithm_reproduction_consistency",
      "create_encoder",
      "test_breakthrough_algorithm_claims",
      "test_snell2017_equation_1_exact_reproduction",
      "forward",
      "test_snell2017_equation_2_distance_exact_reproduction",
      "test_snell2017_equation_3_softmax_exact_reproduction",
      "test_snell2017_hyperparameter_reproduction",
      "test_finn2017_equation_1_inner_update_exact_reproduction",
      "test_finn2017_equation_2_meta_gradient_computation",
      "test_finn2017_first_order_approximation_correctness",
      "test_snell2024_compute_scaling_law_reproduction",
      "__init__",
      "forward",
      "test_snell2024_adaptive_compute_allocation",
      "test_prototypical_networks_with_test_time_compute_integration",
      "test_multi_algorithm_reproduction_consistency",
      "create_encoder",
      "test_breakthrough_algorithm_claims",
      "test_finn2017_equation_1_inner_update_exact_reproduction",
      "test_finn2017_equation_2_meta_gradient_computation",
      "test_finn2017_first_order_approximation_correctness",
      "test_snell2024_compute_scaling_law_reproduction",
      "__init__",
      "forward",
      "test_snell2024_adaptive_compute_allocation",
      "test_prototypical_networks_with_test_time_compute_integration",
      "test_multi_algorithm_reproduction_consistency",
      "create_encoder",
      "test_breakthrough_algorithm_claims",
      "test_snell2024_compute_scaling_law_reproduction",
      "__init__",
      "forward",
      "test_snell2024_adaptive_compute_allocation",
      "test_prototypical_networks_with_test_time_compute_integration",
      "test_multi_algorithm_reproduction_consistency",
      "create_encoder",
      "test_breakthrough_algorithm_claims",
      "test_prototypical_networks_with_test_time_compute_integration",
      "test_multi_algorithm_reproduction_consistency",
      "create_encoder",
      "test_breakthrough_algorithm_claims",
      "test_breakthrough_algorithm_claims"
    ],
    "total_items": 83
  },
  "tests/brutal_reality_check/test_reference_kernel_correctness.py": {
    "classes": [
      "SimpleEncoder",
      "TestEpisodeContract",
      "TestDistanceUtilities",
      "TestPrototypicalNetworks",
      "TestMAMLCorrectness",
      "TestNumericalStability",
      "TestShapeInvariance"
    ],
    "functions": [
      "create_toy_episode",
      "create_arbitrary_label_episode"
    ],
    "methods": [
      "__init__",
      "forward",
      "create_toy_episode",
      "create_arbitrary_label_episode",
      "test_episode_label_remapping",
      "test_episode_shape_consistency",
      "test_episode_device_consistency",
      "test_pairwise_sqeuclidean_known_values",
      "test_pairwise_sqeuclidean_properties",
      "test_cosine_logits_normalization",
      "test_reference_episode_function",
      "test_arbitrary_labels_handled_correctly",
      "test_temperature_scaling_behavior",
      "test_cosine_vs_euclidean_distance",
      "test_modular_inner_step_vs_reference",
      "test_modular_trainer_vs_reference",
      "create_test_model",
      "test_first_order_approximation",
      "test_zero_temperature_handling",
      "test_large_embeddings_stability",
      "test_single_shot_episode",
      "test_variable_shot_numbers",
      "test_different_query_numbers",
      "test_episode_label_remapping",
      "test_episode_shape_consistency",
      "test_episode_device_consistency",
      "test_pairwise_sqeuclidean_known_values",
      "test_pairwise_sqeuclidean_properties",
      "test_cosine_logits_normalization",
      "test_reference_episode_function",
      "test_arbitrary_labels_handled_correctly",
      "test_temperature_scaling_behavior",
      "test_cosine_vs_euclidean_distance",
      "test_modular_inner_step_vs_reference",
      "test_modular_trainer_vs_reference",
      "create_test_model",
      "test_first_order_approximation",
      "test_zero_temperature_handling",
      "test_large_embeddings_stability",
      "test_single_shot_episode",
      "test_variable_shot_numbers",
      "test_different_query_numbers",
      "test_pairwise_sqeuclidean_known_values",
      "test_pairwise_sqeuclidean_properties",
      "test_cosine_logits_normalization",
      "test_reference_episode_function",
      "test_arbitrary_labels_handled_correctly",
      "test_temperature_scaling_behavior",
      "test_cosine_vs_euclidean_distance",
      "test_modular_inner_step_vs_reference",
      "test_modular_trainer_vs_reference",
      "create_test_model",
      "test_first_order_approximation",
      "test_zero_temperature_handling",
      "test_large_embeddings_stability",
      "test_single_shot_episode",
      "test_variable_shot_numbers",
      "test_different_query_numbers",
      "test_reference_episode_function",
      "test_arbitrary_labels_handled_correctly",
      "test_temperature_scaling_behavior",
      "test_cosine_vs_euclidean_distance",
      "test_modular_inner_step_vs_reference",
      "test_modular_trainer_vs_reference",
      "create_test_model",
      "test_first_order_approximation",
      "test_zero_temperature_handling",
      "test_large_embeddings_stability",
      "test_single_shot_episode",
      "test_variable_shot_numbers",
      "test_different_query_numbers",
      "test_modular_inner_step_vs_reference",
      "test_modular_trainer_vs_reference",
      "create_test_model",
      "test_first_order_approximation",
      "test_zero_temperature_handling",
      "test_large_embeddings_stability",
      "test_single_shot_episode",
      "test_variable_shot_numbers",
      "test_different_query_numbers",
      "test_zero_temperature_handling",
      "test_large_embeddings_stability",
      "test_single_shot_episode",
      "test_variable_shot_numbers",
      "test_different_query_numbers",
      "test_variable_shot_numbers",
      "test_different_query_numbers"
    ],
    "total_items": 96
  },
  "tests/comprehensive/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "tests/comprehensive/test_100_percent_coverage.py": {
    "classes": [
      "TestTimeComputeComprehensive",
      "TestMAMLVariantsComprehensive",
      "TestUtilsComprehensive",
      "TestContinualMetaLearningComprehensive",
      "TestFewShotLearningComprehensive",
      "TestCLIAndFactoryFunctions"
    ],
    "functions": [],
    "methods": [
      "test_all_compute_strategies",
      "__call__",
      "test_process_reward_model_functionality",
      "__call__",
      "test_test_time_training_functionality",
      "__init__",
      "forward",
      "__call__",
      "test_chain_of_thought_reasoning",
      "__call__",
      "test_all_maml_variants",
      "test_maml_advanced_features",
      "test_maml_en_llm_variant",
      "__init__",
      "forward",
      "test_functional_forward_utility",
      "test_all_dataset_configurations",
      "test_evaluation_metrics_comprehensive",
      "test_statistical_analysis_complete",
      "test_curriculum_learning_all_types",
      "test_task_diversity_tracking_complete",
      "test_online_meta_learner_complete",
      "test_ewc_regularizer_complete",
      "test_memory_bank_complete",
      "test_all_few_shot_variants",
      "test_advanced_prototypical_features",
      "test_cli_main_function",
      "test_all_maml_variants",
      "test_maml_advanced_features",
      "test_maml_en_llm_variant",
      "__init__",
      "forward",
      "test_functional_forward_utility",
      "test_all_dataset_configurations",
      "test_evaluation_metrics_comprehensive",
      "test_statistical_analysis_complete",
      "test_curriculum_learning_all_types",
      "test_task_diversity_tracking_complete",
      "test_online_meta_learner_complete",
      "test_ewc_regularizer_complete",
      "test_memory_bank_complete",
      "test_all_few_shot_variants",
      "test_advanced_prototypical_features",
      "test_cli_main_function",
      "test_all_dataset_configurations",
      "test_evaluation_metrics_comprehensive",
      "test_statistical_analysis_complete",
      "test_curriculum_learning_all_types",
      "test_task_diversity_tracking_complete",
      "test_online_meta_learner_complete",
      "test_ewc_regularizer_complete",
      "test_memory_bank_complete",
      "test_all_few_shot_variants",
      "test_advanced_prototypical_features",
      "test_cli_main_function",
      "test_online_meta_learner_complete",
      "test_ewc_regularizer_complete",
      "test_memory_bank_complete",
      "test_all_few_shot_variants",
      "test_advanced_prototypical_features",
      "test_cli_main_function",
      "test_all_few_shot_variants",
      "test_advanced_prototypical_features",
      "test_cli_main_function",
      "test_cli_main_function"
    ],
    "total_items": 71
  },
  "tests/conftest.py": {
    "classes": [],
    "functions": [
      "pytest_configure",
      "pytest_collection_modifyitems",
      "device",
      "use_gpu",
      "sample_data",
      "synthetic_dataset",
      "k_shot_values",
      "n_way_values",
      "test_time_compute_config",
      "all_compute_strategies",
      "maml_config",
      "all_maml_variants",
      "prototypical_config",
      "all_prototypical_variants",
      "continual_config",
      "all_ewc_methods",
      "simple_model",
      "encoder_model",
      "mock_tokenizer",
      "config_factory",
      "algorithm_factory",
      "temp_dir",
      "temp_file",
      "meta_learning_strategies",
      "benchmark_config",
      "performance_thresholds",
      "mock_external_dependencies",
      "research_paper_mocks",
      "integration_test_suite",
      "reset_random_seeds",
      "clear_cuda_cache"
    ],
    "methods": [],
    "total_items": 31
  },
  "tests/coverage_improvement/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "tests/coverage_improvement/test_uncovered_paths.py": {
    "classes": [
      "TestConfigurationFactoryPaths",
      "TestUtilityFunctionCoverage",
      "TestHardwareUtilsCoverage",
      "TestErrorHandlingAndValidation",
      "TestCLIAndMainFunctions"
    ],
    "functions": [],
    "methods": [
      "test_create_dataset_all_configurations",
      "test_create_metrics_evaluator_comprehensive",
      "test_create_curriculum_scheduler_all_types",
      "test_basic_confidence_interval_edge_cases",
      "test_compute_confidence_interval_bootstrap_methods",
      "test_estimate_difficulty_various_tasks",
      "test_track_task_diversity_comprehensive",
      "test_auto_device_all_scenarios",
      "test_get_optimal_batch_size_various_configs",
      "test_log_hardware_info_comprehensive",
      "test_prepare_for_hardware_different_objects",
      "test_invalid_configuration_handling",
      "test_edge_case_data_handling",
      "test_warning_and_deprecation_paths",
      "test_cli_main_function",
      "test_module_import_paths",
      "test_basic_confidence_interval_edge_cases",
      "test_compute_confidence_interval_bootstrap_methods",
      "test_estimate_difficulty_various_tasks",
      "test_track_task_diversity_comprehensive",
      "test_auto_device_all_scenarios",
      "test_get_optimal_batch_size_various_configs",
      "test_log_hardware_info_comprehensive",
      "test_prepare_for_hardware_different_objects",
      "test_invalid_configuration_handling",
      "test_edge_case_data_handling",
      "test_warning_and_deprecation_paths",
      "test_cli_main_function",
      "test_module_import_paths",
      "test_auto_device_all_scenarios",
      "test_get_optimal_batch_size_various_configs",
      "test_log_hardware_info_comprehensive",
      "test_prepare_for_hardware_different_objects",
      "test_invalid_configuration_handling",
      "test_edge_case_data_handling",
      "test_warning_and_deprecation_paths",
      "test_cli_main_function",
      "test_module_import_paths",
      "test_invalid_configuration_handling",
      "test_edge_case_data_handling",
      "test_warning_and_deprecation_paths",
      "test_cli_main_function",
      "test_module_import_paths",
      "test_cli_main_function",
      "test_module_import_paths"
    ],
    "total_items": 50
  },
  "tests/end_to_end/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "tests/end_to_end/test_complete_pipeline.py": {
    "classes": [
      "TestCompleteMetaLearningPipeline",
      "TestPerformancePipeline"
    ],
    "functions": [],
    "methods": [
      "pipeline_config",
      "simple_encoder",
      "meta_dataset",
      "test_complete_prototypical_network_pipeline",
      "test_complete_maml_pipeline",
      "test_test_time_compute_pipeline",
      "test_continual_learning_pipeline",
      "test_integrated_pipeline_with_all_fixme_solutions",
      "test_large_scale_pipeline",
      "test_large_scale_pipeline"
    ],
    "total_items": 12
  },
  "tests/error_handling/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "tests/error_handling/test_logging_validation.py": {
    "classes": [
      "LogCapture",
      "TestNoSilentErrors",
      "TestErrorMessageQuality",
      "TestLoggingLevels",
      "TestSilentFailurePrevention"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "get_logs",
      "contains_log",
      "get_log_count",
      "cleanup",
      "test_maml_invalid_config_logs_errors",
      "test_prototypical_invalid_data_logs_errors",
      "test_hardware_manager_device_errors_logged",
      "test_dataset_creation_errors_logged",
      "test_error_messages_contain_context",
      "test_configuration_validation_messages",
      "test_logging_levels_appropriateness",
      "test_gradient_computation_failures_logged",
      "failing_grad",
      "test_nan_inf_detection_logged",
      "test_research_accuracy_violations_logged",
      "test_maml_invalid_config_logs_errors",
      "test_prototypical_invalid_data_logs_errors",
      "test_hardware_manager_device_errors_logged",
      "test_dataset_creation_errors_logged",
      "test_error_messages_contain_context",
      "test_configuration_validation_messages",
      "test_logging_levels_appropriateness",
      "test_gradient_computation_failures_logged",
      "failing_grad",
      "test_nan_inf_detection_logged",
      "test_research_accuracy_violations_logged",
      "test_error_messages_contain_context",
      "test_configuration_validation_messages",
      "test_logging_levels_appropriateness",
      "test_gradient_computation_failures_logged",
      "failing_grad",
      "test_nan_inf_detection_logged",
      "test_research_accuracy_violations_logged",
      "test_logging_levels_appropriateness",
      "test_gradient_computation_failures_logged",
      "failing_grad",
      "test_nan_inf_detection_logged",
      "test_research_accuracy_violations_logged",
      "test_gradient_computation_failures_logged",
      "failing_grad",
      "test_nan_inf_detection_logged",
      "test_research_accuracy_violations_logged"
    ],
    "total_items": 48
  },
  "tests/final_coverage/test_critical_uncovered_paths.py": {
    "classes": [
      "MockEncoder",
      "TestAdvancedMAMLVariants",
      "TestTestTimeComputeAdvanced",
      "TestHardwareAcceleration",
      "TestStatisticalEvaluation",
      "TestErrorHandlingAndLogging",
      "TestCurriculumLearning",
      "TestAdvancedMetrics",
      "TestEndToEndIntegration"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "forward",
      "test_anil_learner_head_only_adaptation",
      "test_boil_learner_body_only_adaptation",
      "test_maml_en_llm_configuration",
      "__init__",
      "forward",
      "test_confidence_estimation_path",
      "test_difficulty_estimation_path",
      "test_adaptive_compute_budget_path",
      "test_hardware_manager_device_selection",
      "test_multi_gpu_manager",
      "test_memory_optimization_paths",
      "test_bootstrap_confidence_intervals",
      "test_statistical_significance_testing",
      "test_effect_size_computation",
      "test_invalid_configuration_handling",
      "test_gpu_fallback_handling",
      "test_memory_overflow_handling",
      "test_logging_validation",
      "test_difficulty_progression",
      "test_task_sampling_with_curriculum",
      "test_few_shot_accuracy_with_confidence",
      "test_adaptation_speed_measurement",
      "test_forgetting_measurement",
      "test_full_meta_learning_pipeline",
      "test_anil_learner_head_only_adaptation",
      "test_boil_learner_body_only_adaptation",
      "test_maml_en_llm_configuration",
      "__init__",
      "forward",
      "test_confidence_estimation_path",
      "test_difficulty_estimation_path",
      "test_adaptive_compute_budget_path",
      "test_hardware_manager_device_selection",
      "test_multi_gpu_manager",
      "test_memory_optimization_paths",
      "test_bootstrap_confidence_intervals",
      "test_statistical_significance_testing",
      "test_effect_size_computation",
      "test_invalid_configuration_handling",
      "test_gpu_fallback_handling",
      "test_memory_overflow_handling",
      "test_logging_validation",
      "test_difficulty_progression",
      "test_task_sampling_with_curriculum",
      "test_few_shot_accuracy_with_confidence",
      "test_adaptation_speed_measurement",
      "test_forgetting_measurement",
      "test_full_meta_learning_pipeline",
      "test_confidence_estimation_path",
      "test_difficulty_estimation_path",
      "test_adaptive_compute_budget_path",
      "test_hardware_manager_device_selection",
      "test_multi_gpu_manager",
      "test_memory_optimization_paths",
      "test_bootstrap_confidence_intervals",
      "test_statistical_significance_testing",
      "test_effect_size_computation",
      "test_invalid_configuration_handling",
      "test_gpu_fallback_handling",
      "test_memory_overflow_handling",
      "test_logging_validation",
      "test_difficulty_progression",
      "test_task_sampling_with_curriculum",
      "test_few_shot_accuracy_with_confidence",
      "test_adaptation_speed_measurement",
      "test_forgetting_measurement",
      "test_full_meta_learning_pipeline",
      "test_hardware_manager_device_selection",
      "test_multi_gpu_manager",
      "test_memory_optimization_paths",
      "test_bootstrap_confidence_intervals",
      "test_statistical_significance_testing",
      "test_effect_size_computation",
      "test_invalid_configuration_handling",
      "test_gpu_fallback_handling",
      "test_memory_overflow_handling",
      "test_logging_validation",
      "test_difficulty_progression",
      "test_task_sampling_with_curriculum",
      "test_few_shot_accuracy_with_confidence",
      "test_adaptation_speed_measurement",
      "test_forgetting_measurement",
      "test_full_meta_learning_pipeline",
      "test_bootstrap_confidence_intervals",
      "test_statistical_significance_testing",
      "test_effect_size_computation",
      "test_invalid_configuration_handling",
      "test_gpu_fallback_handling",
      "test_memory_overflow_handling",
      "test_logging_validation",
      "test_difficulty_progression",
      "test_task_sampling_with_curriculum",
      "test_few_shot_accuracy_with_confidence",
      "test_adaptation_speed_measurement",
      "test_forgetting_measurement",
      "test_full_meta_learning_pipeline",
      "test_invalid_configuration_handling",
      "test_gpu_fallback_handling",
      "test_memory_overflow_handling",
      "test_logging_validation",
      "test_difficulty_progression",
      "test_task_sampling_with_curriculum",
      "test_few_shot_accuracy_with_confidence",
      "test_adaptation_speed_measurement",
      "test_forgetting_measurement",
      "test_full_meta_learning_pipeline",
      "test_difficulty_progression",
      "test_task_sampling_with_curriculum",
      "test_few_shot_accuracy_with_confidence",
      "test_adaptation_speed_measurement",
      "test_forgetting_measurement",
      "test_full_meta_learning_pipeline",
      "test_few_shot_accuracy_with_confidence",
      "test_adaptation_speed_measurement",
      "test_forgetting_measurement",
      "test_full_meta_learning_pipeline",
      "test_full_meta_learning_pipeline"
    ],
    "total_items": 128
  },
  "tests/integration/test_complete_meta_learning_implementations.py": {
    "classes": [
      "TestUncertaintyAwareDistanceImplementations",
      "TestMultiScaleFeatureAggregatorImplementations",
      "TestHierarchicalPrototypeImplementations",
      "TestCompleteIntegrationPipeline",
      "TestFixmePerformanceRegression"
    ],
    "functions": [],
    "methods": [
      "uncertainty_method",
      "uncertainty_config",
      "test_data",
      "test_uncertainty_method_initialization",
      "test_uncertainty_forward_pass",
      "test_uncertainty_regularization_loss",
      "test_uncertainty_presets",
      "test_factory_function",
      "multiscale_method",
      "multiscale_config",
      "multiscale_test_data",
      "test_multiscale_initialization",
      "test_multiscale_forward_pass_2d",
      "test_multiscale_forward_pass_3d",
      "test_multiscale_presets",
      "test_multiscale_factory_function",
      "hierarchical_method",
      "hierarchical_config",
      "hierarchical_test_data",
      "test_hierarchical_initialization",
      "test_hierarchical_forward_pass",
      "test_hierarchical_diversity_loss",
      "test_hierarchical_presets",
      "test_hierarchical_factory_function",
      "pipeline_test_data",
      "test_complete_pipeline_integration",
      "test_all_method_combinations",
      "test_uncertainty_methods_performance",
      "test_memory_usage_reasonable",
      "multiscale_method",
      "multiscale_config",
      "multiscale_test_data",
      "test_multiscale_initialization",
      "test_multiscale_forward_pass_2d",
      "test_multiscale_forward_pass_3d",
      "test_multiscale_presets",
      "test_multiscale_factory_function",
      "hierarchical_method",
      "hierarchical_config",
      "hierarchical_test_data",
      "test_hierarchical_initialization",
      "test_hierarchical_forward_pass",
      "test_hierarchical_diversity_loss",
      "test_hierarchical_presets",
      "test_hierarchical_factory_function",
      "pipeline_test_data",
      "test_complete_pipeline_integration",
      "test_all_method_combinations",
      "test_uncertainty_methods_performance",
      "test_memory_usage_reasonable",
      "hierarchical_method",
      "hierarchical_config",
      "hierarchical_test_data",
      "test_hierarchical_initialization",
      "test_hierarchical_forward_pass",
      "test_hierarchical_diversity_loss",
      "test_hierarchical_presets",
      "test_hierarchical_factory_function",
      "pipeline_test_data",
      "test_complete_pipeline_integration",
      "test_all_method_combinations",
      "test_uncertainty_methods_performance",
      "test_memory_usage_reasonable",
      "pipeline_test_data",
      "test_complete_pipeline_integration",
      "test_all_method_combinations",
      "test_uncertainty_methods_performance",
      "test_memory_usage_reasonable",
      "test_uncertainty_methods_performance",
      "test_memory_usage_reasonable"
    ],
    "total_items": 75
  },
  "tests/integration/test_diversity_metrics_implementation.py": {
    "classes": [
      "TestDiversityMetricsImplementation"
    ],
    "functions": [],
    "methods": [
      "sample_task_features",
      "edge_case_features",
      "test_all_diversity_methods",
      "test_feature_variance_diversity_with_config",
      "test_information_theoretic_diversity_with_config",
      "test_jensen_shannon_divergence_with_config",
      "test_silhouette_score_diversity_edge_cases",
      "test_diversity_edge_cases_all_methods",
      "test_error_handling_and_warnings",
      "test_task_diversity_tracker_class",
      "test_configuration_validation",
      "test_diversity_score_properties",
      "test_missing_dependencies_handling",
      "test_reproducibility",
      "test_comprehensive_integration"
    ],
    "total_items": 16
  },
  "tests/integration/test_fixme_solutions.py": {
    "classes": [
      "TestFixmeCrossModuleIntegration",
      "TestFixmeResearchAccuracyValidation",
      "TestFixmeConfigurationValidation",
      "TestFixmeErrorHandlingAndEdgeCases",
      "TestFixmePerformanceAndScalability"
    ],
    "functions": [],
    "methods": [
      "simple_encoder",
      "sample_episode_data",
      "test_test_time_compute_with_prototypical_learning",
      "test_maml_with_continual_learning_ewc",
      "test_hierarchical_prototypes_with_curriculum_learning",
      "test_uncertainty_aware_distances_with_statistical_analysis",
      "test_task_adaptive_prototypes_with_online_meta_learning",
      "research_encoder",
      "test_snell2024_test_time_compute_research_accuracy",
      "test_kirkpatrick2017_ewc_research_accuracy",
      "test_snell2017_prototypical_networks_research_accuracy",
      "test_finn2017_maml_research_accuracy",
      "config_test_encoder",
      "test_all_test_time_compute_strategies",
      "test_all_maml_variants_configurations",
      "test_all_prototypical_variants_configurations",
      "test_all_ewc_methods_configurations",
      "test_all_confidence_interval_methods",
      "test_all_difficulty_estimation_methods",
      "minimal_encoder",
      "test_test_time_compute_with_invalid_base_learner",
      "test_ewc_with_no_previous_tasks",
      "test_prototypical_networks_with_single_shot",
      "test_confidence_intervals_with_single_value",
      "test_maml_with_zero_inner_steps",
      "large_encoder",
      "test_test_time_compute_scalability",
      "test_continual_learning_memory_efficiency",
      "research_encoder",
      "test_snell2024_test_time_compute_research_accuracy",
      "test_kirkpatrick2017_ewc_research_accuracy",
      "test_snell2017_prototypical_networks_research_accuracy",
      "test_finn2017_maml_research_accuracy",
      "config_test_encoder",
      "test_all_test_time_compute_strategies",
      "test_all_maml_variants_configurations",
      "test_all_prototypical_variants_configurations",
      "test_all_ewc_methods_configurations",
      "test_all_confidence_interval_methods",
      "test_all_difficulty_estimation_methods",
      "minimal_encoder",
      "test_test_time_compute_with_invalid_base_learner",
      "test_ewc_with_no_previous_tasks",
      "test_prototypical_networks_with_single_shot",
      "test_confidence_intervals_with_single_value",
      "test_maml_with_zero_inner_steps",
      "large_encoder",
      "test_test_time_compute_scalability",
      "test_continual_learning_memory_efficiency",
      "config_test_encoder",
      "test_all_test_time_compute_strategies",
      "test_all_maml_variants_configurations",
      "test_all_prototypical_variants_configurations",
      "test_all_ewc_methods_configurations",
      "test_all_confidence_interval_methods",
      "test_all_difficulty_estimation_methods",
      "minimal_encoder",
      "test_test_time_compute_with_invalid_base_learner",
      "test_ewc_with_no_previous_tasks",
      "test_prototypical_networks_with_single_shot",
      "test_confidence_intervals_with_single_value",
      "test_maml_with_zero_inner_steps",
      "large_encoder",
      "test_test_time_compute_scalability",
      "test_continual_learning_memory_efficiency",
      "minimal_encoder",
      "test_test_time_compute_with_invalid_base_learner",
      "test_ewc_with_no_previous_tasks",
      "test_prototypical_networks_with_single_shot",
      "test_confidence_intervals_with_single_value",
      "test_maml_with_zero_inner_steps",
      "large_encoder",
      "test_test_time_compute_scalability",
      "test_continual_learning_memory_efficiency",
      "large_encoder",
      "test_test_time_compute_scalability",
      "test_continual_learning_memory_efficiency"
    ],
    "total_items": 82
  },
  "tests/integration/test_hardware_acceleration.py": {
    "classes": [
      "TestHardwareMetaLearningIntegration",
      "TestPrototypicalNetworksHardwareIntegration",
      "TestTestTimeComputeHardwareIntegration",
      "TestContinualLearningHardwareIntegration",
      "TestMultiGPUIntegration",
      "TestHardwareMemoryManagement",
      "TestHardwarePerformanceBenchmarking",
      "TestHardwareCompatibilityEdgeCases"
    ],
    "functions": [],
    "methods": [
      "hardware_manager",
      "sample_meta_learning_episode",
      "encoder_model",
      "test_prototypical_basic_hardware_integration",
      "test_prototypical_uncertainty_aware_hardware",
      "test_hierarchical_prototypes_hardware",
      "test_task_adaptive_prototypes_hardware",
      "test_test_time_compute_basic_hardware",
      "test_test_time_compute_snell2024_hardware",
      "test_test_time_compute_hybrid_hardware",
      "test_ewc_hardware_integration",
      "test_online_meta_learning_hardware",
      "test_prototypical_networks_multi_gpu",
      "test_optimal_batch_size_integration",
      "test_memory_efficient_large_model",
      "test_memory_monitoring_during_training",
      "test_performance_comparison_cpu_vs_accelerated",
      "create_model",
      "test_scalability_with_batch_size",
      "test_mixed_precision_compatibility",
      "test_fallback_behavior_on_errors",
      "test_prototypical_basic_hardware_integration",
      "test_prototypical_uncertainty_aware_hardware",
      "test_hierarchical_prototypes_hardware",
      "test_task_adaptive_prototypes_hardware",
      "test_test_time_compute_basic_hardware",
      "test_test_time_compute_snell2024_hardware",
      "test_test_time_compute_hybrid_hardware",
      "test_ewc_hardware_integration",
      "test_online_meta_learning_hardware",
      "test_prototypical_networks_multi_gpu",
      "test_optimal_batch_size_integration",
      "test_memory_efficient_large_model",
      "test_memory_monitoring_during_training",
      "test_performance_comparison_cpu_vs_accelerated",
      "create_model",
      "test_scalability_with_batch_size",
      "test_mixed_precision_compatibility",
      "test_fallback_behavior_on_errors",
      "test_test_time_compute_basic_hardware",
      "test_test_time_compute_snell2024_hardware",
      "test_test_time_compute_hybrid_hardware",
      "test_ewc_hardware_integration",
      "test_online_meta_learning_hardware",
      "test_prototypical_networks_multi_gpu",
      "test_optimal_batch_size_integration",
      "test_memory_efficient_large_model",
      "test_memory_monitoring_during_training",
      "test_performance_comparison_cpu_vs_accelerated",
      "create_model",
      "test_scalability_with_batch_size",
      "test_mixed_precision_compatibility",
      "test_fallback_behavior_on_errors",
      "test_ewc_hardware_integration",
      "test_online_meta_learning_hardware",
      "test_prototypical_networks_multi_gpu",
      "test_optimal_batch_size_integration",
      "test_memory_efficient_large_model",
      "test_memory_monitoring_during_training",
      "test_performance_comparison_cpu_vs_accelerated",
      "create_model",
      "test_scalability_with_batch_size",
      "test_mixed_precision_compatibility",
      "test_fallback_behavior_on_errors",
      "test_prototypical_networks_multi_gpu",
      "test_optimal_batch_size_integration",
      "test_memory_efficient_large_model",
      "test_memory_monitoring_during_training",
      "test_performance_comparison_cpu_vs_accelerated",
      "create_model",
      "test_scalability_with_batch_size",
      "test_mixed_precision_compatibility",
      "test_fallback_behavior_on_errors",
      "test_memory_efficient_large_model",
      "test_memory_monitoring_during_training",
      "test_performance_comparison_cpu_vs_accelerated",
      "create_model",
      "test_scalability_with_batch_size",
      "test_mixed_precision_compatibility",
      "test_fallback_behavior_on_errors",
      "test_performance_comparison_cpu_vs_accelerated",
      "create_model",
      "test_scalability_with_batch_size",
      "test_mixed_precision_compatibility",
      "test_fallback_behavior_on_errors",
      "test_mixed_precision_compatibility",
      "test_fallback_behavior_on_errors"
    ],
    "total_items": 95
  },
  "tests/integration/test_meta_learning_integration.py": {
    "classes": [
      "TestFixmeIntegration"
    ],
    "functions": [],
    "methods": [
      "setup_method",
      "test_comprehensive_config_instantiation",
      "test_uncertainty_components_integration",
      "test_hierarchical_components_integration",
      "test_adaptive_components_integration",
      "test_dataset_loading_integration",
      "test_difficulty_estimation_integration",
      "test_test_time_compute_integration",
      "forward",
      "test_end_to_end_few_shot_episode",
      "test_specific_solutions_selection",
      "test_configuration_consistency",
      "test_error_handling_integration",
      "test_memory_efficiency_integration",
      "test_reproducibility_integration"
    ],
    "total_items": 16
  },
  "tests/math_correctness_regression.py": {
    "classes": [
      "TestPrototypicalNetworksMath",
      "TestMAMLMathematicalCorrectness",
      "TestEpisodicDataInvariants"
    ],
    "functions": [
      "test_no_batchnorm_in_few_shot_backbones"
    ],
    "methods": [
      "test_prototypes_are_per_class_means_not_global",
      "test_softmax_on_negative_distances_not_positive",
      "test_cosine_similarity_uses_normalized_embeddings",
      "test_second_order_gradients_preserved",
      "test_meta_loss_properly_averaged_not_summed",
      "test_no_support_query_contamination",
      "test_labels_remapped_to_contiguous_range",
      "test_no_batchnorm_in_few_shot_backbones",
      "test_second_order_gradients_preserved",
      "test_meta_loss_properly_averaged_not_summed",
      "test_no_support_query_contamination",
      "test_labels_remapped_to_contiguous_range",
      "test_no_batchnorm_in_few_shot_backbones",
      "test_labels_remapped_to_contiguous_range",
      "test_no_batchnorm_in_few_shot_backbones"
    ],
    "total_items": 19
  },
  "tests/mathematical_properties/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "tests/mathematical_properties/test_theoretical_validation.py": {
    "classes": [
      "TestMAMLTheoreticalProperties",
      "TestPrototypicalNetworksMathematicalProperties",
      "TestStatisticalPropertiesValidation",
      "TestNumericalStabilityProperties"
    ],
    "functions": [],
    "methods": [
      "theoretical_maml_setup",
      "test_gradient_descent_mathematical_property",
      "test_second_order_gradient_computation",
      "test_meta_learning_convergence_property",
      "generate_linear_task",
      "prototypical_mathematical_setup",
      "test_prototype_computation_mathematical_accuracy",
      "test_euclidean_distance_metric_properties",
      "test_softmax_probability_simplex_property",
      "test_confidence_interval_coverage_property",
      "test_bootstrap_distribution_properties",
      "test_statistical_significance_properties",
      "test_gradient_norm_boundedness",
      "test_loss_value_stability",
      "prototypical_mathematical_setup",
      "test_prototype_computation_mathematical_accuracy",
      "test_euclidean_distance_metric_properties",
      "test_softmax_probability_simplex_property",
      "test_confidence_interval_coverage_property",
      "test_bootstrap_distribution_properties",
      "test_statistical_significance_properties",
      "test_gradient_norm_boundedness",
      "test_loss_value_stability",
      "test_confidence_interval_coverage_property",
      "test_bootstrap_distribution_properties",
      "test_statistical_significance_properties",
      "test_gradient_norm_boundedness",
      "test_loss_value_stability",
      "test_gradient_norm_boundedness",
      "test_loss_value_stability"
    ],
    "total_items": 34
  },
  "tests/property/test_hypothesis_properties.py": {
    "classes": [
      "TestPrototypicalNetworkProperties",
      "TestMAMLProperties",
      "TestContinualLearningProperties",
      "TestStatisticalProperties",
      "TestDifficultyEstimationProperties",
      "TestNumericalStabilityProperties",
      "TestInvariantProperties"
    ],
    "functions": [
      "meta_learning_episode",
      "simple_neural_network",
      "accuracy_list"
    ],
    "methods": [
      "test_prototypical_output_shape_invariant",
      "test_prototypical_temperature_scaling_property",
      "test_prototype_centroid_property",
      "test_maml_adaptation_property",
      "test_fomaml_vs_maml_gradient_property",
      "test_functional_forward_consistency_property",
      "test_ewc_regularization_monotonicity_property",
      "test_memory_bank_capacity_property",
      "test_confidence_interval_coverage_property",
      "test_confidence_interval_method_consistency",
      "test_confidence_interval_sample_size_property",
      "test_difficulty_estimation_bounds_property",
      "test_difficulty_estimation_monotonicity_property",
      "test_softmax_numerical_stability_property",
      "test_distance_to_logits_stability_property",
      "test_deterministic_reproducibility_property",
      "test_label_permutation_invariance_property",
      "test_maml_adaptation_property",
      "test_fomaml_vs_maml_gradient_property",
      "test_functional_forward_consistency_property",
      "test_ewc_regularization_monotonicity_property",
      "test_memory_bank_capacity_property",
      "test_confidence_interval_coverage_property",
      "test_confidence_interval_method_consistency",
      "test_confidence_interval_sample_size_property",
      "test_difficulty_estimation_bounds_property",
      "test_difficulty_estimation_monotonicity_property",
      "test_softmax_numerical_stability_property",
      "test_distance_to_logits_stability_property",
      "test_deterministic_reproducibility_property",
      "test_label_permutation_invariance_property",
      "test_ewc_regularization_monotonicity_property",
      "test_memory_bank_capacity_property",
      "test_confidence_interval_coverage_property",
      "test_confidence_interval_method_consistency",
      "test_confidence_interval_sample_size_property",
      "test_difficulty_estimation_bounds_property",
      "test_difficulty_estimation_monotonicity_property",
      "test_softmax_numerical_stability_property",
      "test_distance_to_logits_stability_property",
      "test_deterministic_reproducibility_property",
      "test_label_permutation_invariance_property",
      "test_confidence_interval_coverage_property",
      "test_confidence_interval_method_consistency",
      "test_confidence_interval_sample_size_property",
      "test_difficulty_estimation_bounds_property",
      "test_difficulty_estimation_monotonicity_property",
      "test_softmax_numerical_stability_property",
      "test_distance_to_logits_stability_property",
      "test_deterministic_reproducibility_property",
      "test_label_permutation_invariance_property",
      "test_difficulty_estimation_bounds_property",
      "test_difficulty_estimation_monotonicity_property",
      "test_softmax_numerical_stability_property",
      "test_distance_to_logits_stability_property",
      "test_deterministic_reproducibility_property",
      "test_label_permutation_invariance_property",
      "test_softmax_numerical_stability_property",
      "test_distance_to_logits_stability_property",
      "test_deterministic_reproducibility_property",
      "test_label_permutation_invariance_property",
      "test_deterministic_reproducibility_property",
      "test_label_permutation_invariance_property"
    ],
    "total_items": 73
  },
  "tests/property/test_invariants.py": {
    "classes": [],
    "functions": [
      "test_temperature_monotone",
      "test_cosine_scale_invariance",
      "test_remap_labels_contiguous"
    ],
    "methods": [],
    "total_items": 3
  },
  "tests/research_validation/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "tests/research_validation/test_paper_reproduction.py": {
    "classes": [
      "TestFinnMAML2017Reproduction",
      "TestSnellPrototypical2017Reproduction",
      "TestSnellTestTimeCompute2024Reproduction",
      "TestKirkpatrickEWC2017Reproduction",
      "TestCrossPaperValidation"
    ],
    "functions": [],
    "methods": [
      "finn_maml_config",
      "finn_encoder",
      "test_finn_gradient_computation_accuracy",
      "test_finn_few_shot_learning_behavior",
      "snell_proto_config",
      "snell_encoder",
      "test_snell_prototype_computation_accuracy",
      "test_snell_distance_classification_accuracy",
      "snell_2024_config",
      "test_snell_2024_compute_allocation_scaling",
      "__init__",
      "__call__",
      "test_snell_2024_process_reward_model_validation",
      "__call__",
      "kirkpatrick_ewc_config",
      "test_kirkpatrick_fisher_information_computation",
      "test_kirkpatrick_ewc_loss_computation",
      "test_maml_prototypical_integration",
      "test_test_time_compute_enhancement_validation",
      "__init__",
      "__call__",
      "test_hyperparameter_consistency_across_papers",
      "snell_proto_config",
      "snell_encoder",
      "test_snell_prototype_computation_accuracy",
      "test_snell_distance_classification_accuracy",
      "snell_2024_config",
      "test_snell_2024_compute_allocation_scaling",
      "__init__",
      "__call__",
      "test_snell_2024_process_reward_model_validation",
      "__call__",
      "kirkpatrick_ewc_config",
      "test_kirkpatrick_fisher_information_computation",
      "test_kirkpatrick_ewc_loss_computation",
      "test_maml_prototypical_integration",
      "test_test_time_compute_enhancement_validation",
      "__init__",
      "__call__",
      "test_hyperparameter_consistency_across_papers",
      "snell_2024_config",
      "test_snell_2024_compute_allocation_scaling",
      "__init__",
      "__call__",
      "test_snell_2024_process_reward_model_validation",
      "__call__",
      "kirkpatrick_ewc_config",
      "test_kirkpatrick_fisher_information_computation",
      "test_kirkpatrick_ewc_loss_computation",
      "test_maml_prototypical_integration",
      "test_test_time_compute_enhancement_validation",
      "__init__",
      "__call__",
      "test_hyperparameter_consistency_across_papers",
      "kirkpatrick_ewc_config",
      "test_kirkpatrick_fisher_information_computation",
      "test_kirkpatrick_ewc_loss_computation",
      "test_maml_prototypical_integration",
      "test_test_time_compute_enhancement_validation",
      "__init__",
      "__call__",
      "test_hyperparameter_consistency_across_papers",
      "test_maml_prototypical_integration",
      "test_test_time_compute_enhancement_validation",
      "__init__",
      "__call__",
      "test_hyperparameter_consistency_across_papers"
    ],
    "total_items": 72
  },
  "tests/strategic_coverage/test_maximum_working_coverage.py": {
    "classes": [
      "MockEncoder",
      "TestAllConfigurationClasses",
      "TestAllNetworkCreation",
      "TestDatasetAndTaskSampling",
      "TestEvaluationMetrics",
      "TestFactoryFunctions",
      "TestObjectIntegration",
      "TestConfigurationValidation",
      "TestEdgeCasesAndErrorHandling"
    ],
    "functions": [],
    "methods": [
      "__init__",
      "forward",
      "test_test_time_compute_config_all_parameters",
      "test_maml_config_all_parameters",
      "test_prototypical_config_variations",
      "test_matching_config_variations",
      "test_relation_config_variations",
      "test_online_meta_config_all_parameters",
      "test_task_configuration_all_parameters",
      "test_evaluation_config_parameters",
      "test_metrics_config_parameters",
      "test_prototypical_networks_creation_variations",
      "test_matching_networks_creation_variations",
      "test_relation_networks_creation_variations",
      "test_meta_learning_dataset_creation",
      "test_task_sampling_different_difficulties",
      "test_dataset_class_usage_tracking",
      "test_evaluation_metrics_basic_functionality",
      "test_evaluation_metrics_with_confidence_intervals",
      "test_evaluation_config_creation",
      "test_create_dataset_factory",
      "test_create_metrics_evaluator_factory",
      "test_prototypical_with_test_time_compute",
      "test_maml_basic_functionality",
      "test_online_meta_learner_basic",
      "test_config_parameter_bounds",
      "test_task_configuration_validation",
      "test_empty_data_handling",
      "test_single_class_edge_case",
      "test_model_with_minimal_input",
      "test_test_time_compute_config_all_parameters",
      "test_maml_config_all_parameters",
      "test_prototypical_config_variations",
      "test_matching_config_variations",
      "test_relation_config_variations",
      "test_online_meta_config_all_parameters",
      "test_task_configuration_all_parameters",
      "test_evaluation_config_parameters",
      "test_metrics_config_parameters",
      "test_prototypical_networks_creation_variations",
      "test_matching_networks_creation_variations",
      "test_relation_networks_creation_variations",
      "test_meta_learning_dataset_creation",
      "test_task_sampling_different_difficulties",
      "test_dataset_class_usage_tracking",
      "test_evaluation_metrics_basic_functionality",
      "test_evaluation_metrics_with_confidence_intervals",
      "test_evaluation_config_creation",
      "test_create_dataset_factory",
      "test_create_metrics_evaluator_factory",
      "test_prototypical_with_test_time_compute",
      "test_maml_basic_functionality",
      "test_online_meta_learner_basic",
      "test_config_parameter_bounds",
      "test_task_configuration_validation",
      "test_empty_data_handling",
      "test_single_class_edge_case",
      "test_model_with_minimal_input",
      "test_prototypical_networks_creation_variations",
      "test_matching_networks_creation_variations",
      "test_relation_networks_creation_variations",
      "test_meta_learning_dataset_creation",
      "test_task_sampling_different_difficulties",
      "test_dataset_class_usage_tracking",
      "test_evaluation_metrics_basic_functionality",
      "test_evaluation_metrics_with_confidence_intervals",
      "test_evaluation_config_creation",
      "test_create_dataset_factory",
      "test_create_metrics_evaluator_factory",
      "test_prototypical_with_test_time_compute",
      "test_maml_basic_functionality",
      "test_online_meta_learner_basic",
      "test_config_parameter_bounds",
      "test_task_configuration_validation",
      "test_empty_data_handling",
      "test_single_class_edge_case",
      "test_model_with_minimal_input",
      "test_meta_learning_dataset_creation",
      "test_task_sampling_different_difficulties",
      "test_dataset_class_usage_tracking",
      "test_evaluation_metrics_basic_functionality",
      "test_evaluation_metrics_with_confidence_intervals",
      "test_evaluation_config_creation",
      "test_create_dataset_factory",
      "test_create_metrics_evaluator_factory",
      "test_prototypical_with_test_time_compute",
      "test_maml_basic_functionality",
      "test_online_meta_learner_basic",
      "test_config_parameter_bounds",
      "test_task_configuration_validation",
      "test_empty_data_handling",
      "test_single_class_edge_case",
      "test_model_with_minimal_input",
      "test_evaluation_metrics_basic_functionality",
      "test_evaluation_metrics_with_confidence_intervals",
      "test_evaluation_config_creation",
      "test_create_dataset_factory",
      "test_create_metrics_evaluator_factory",
      "test_prototypical_with_test_time_compute",
      "test_maml_basic_functionality",
      "test_online_meta_learner_basic",
      "test_config_parameter_bounds",
      "test_task_configuration_validation",
      "test_empty_data_handling",
      "test_single_class_edge_case",
      "test_model_with_minimal_input",
      "test_create_dataset_factory",
      "test_create_metrics_evaluator_factory",
      "test_prototypical_with_test_time_compute",
      "test_maml_basic_functionality",
      "test_online_meta_learner_basic",
      "test_config_parameter_bounds",
      "test_task_configuration_validation",
      "test_empty_data_handling",
      "test_single_class_edge_case",
      "test_model_with_minimal_input",
      "test_prototypical_with_test_time_compute",
      "test_maml_basic_functionality",
      "test_online_meta_learner_basic",
      "test_config_parameter_bounds",
      "test_task_configuration_validation",
      "test_empty_data_handling",
      "test_single_class_edge_case",
      "test_model_with_minimal_input",
      "test_config_parameter_bounds",
      "test_task_configuration_validation",
      "test_empty_data_handling",
      "test_single_class_edge_case",
      "test_model_with_minimal_input",
      "test_empty_data_handling",
      "test_single_class_edge_case",
      "test_model_with_minimal_input"
    ],
    "total_items": 141
  },
  "tests/stress/__init__.py": {
    "classes": [],
    "functions": [],
    "methods": [],
    "total_items": 0
  },
  "tests/stress/test_edge_cases.py": {
    "classes": [
      "TestExtremeParameterConfigurations",
      "TestNumericalStabilityEdgeCases",
      "TestResourceExhaustionScenarios",
      "TestInvalidInputHandling",
      "TestLongRunningStressTest"
    ],
    "functions": [],
    "methods": [
      "test_extreme_few_shot_scenarios",
      "test_extreme_maml_configurations",
      "test_zero_variance_features",
      "test_identical_support_examples",
      "test_extreme_distance_values",
      "test_memory_pressure_scenarios",
      "test_concurrent_execution_stress",
      "run_episode",
      "test_mismatched_tensor_shapes",
      "test_invalid_hyperparameters",
      "test_empty_datasets",
      "test_extended_training_stability",
      "test_zero_variance_features",
      "test_identical_support_examples",
      "test_extreme_distance_values",
      "test_memory_pressure_scenarios",
      "test_concurrent_execution_stress",
      "run_episode",
      "test_mismatched_tensor_shapes",
      "test_invalid_hyperparameters",
      "test_empty_datasets",
      "test_extended_training_stability",
      "test_memory_pressure_scenarios",
      "test_concurrent_execution_stress",
      "run_episode",
      "test_mismatched_tensor_shapes",
      "test_invalid_hyperparameters",
      "test_empty_datasets",
      "test_extended_training_stability",
      "test_mismatched_tensor_shapes",
      "test_invalid_hyperparameters",
      "test_empty_datasets",
      "test_extended_training_stability",
      "test_extended_training_stability"
    ],
    "total_items": 39
  },
  "tests/test_cli.py": {
    "classes": [
      "TestCLIComponents",
      "TestCLIDemoFunctions",
      "TestCLIMain",
      "TestCLIIntegration"
    ],
    "functions": [],
    "methods": [
      "test_simple_classifier_creation",
      "test_generate_demo_data",
      "test_demo_test_time_compute",
      "test_demo_maml_variants",
      "test_demo_online_meta_learning",
      "test_demo_advanced_dataset",
      "test_main_help",
      "test_main_demo_test_time_compute",
      "test_main_demo_maml",
      "test_main_demo_online",
      "test_main_demo_dataset",
      "test_main_all_demos",
      "test_main_invalid_demo",
      "test_data_generation_integration",
      "test_cli_robustness",
      "test_demo_test_time_compute",
      "test_demo_maml_variants",
      "test_demo_online_meta_learning",
      "test_demo_advanced_dataset",
      "test_main_help",
      "test_main_demo_test_time_compute",
      "test_main_demo_maml",
      "test_main_demo_online",
      "test_main_demo_dataset",
      "test_main_all_demos",
      "test_main_invalid_demo",
      "test_data_generation_integration",
      "test_cli_robustness",
      "test_main_help",
      "test_main_demo_test_time_compute",
      "test_main_demo_maml",
      "test_main_demo_online",
      "test_main_demo_dataset",
      "test_main_all_demos",
      "test_main_invalid_demo",
      "test_data_generation_integration",
      "test_cli_robustness",
      "test_data_generation_integration",
      "test_cli_robustness"
    ],
    "total_items": 43
  },
  "tests/test_comprehensive_fixme_solutions.py": {
    "classes": [
      "TestComprehensiveFixmeValidation"
    ],
    "functions": [],
    "methods": [
      "test_configuration_system_completeness",
      "test_research_accurate_configuration",
      "test_performance_optimized_configuration",
      "test_debugging_configuration",
      "test_configuration_validation",
      "test_hierarchical_attention_implementations",
      "test_level_fusion_implementations",
      "test_no_synthetic_data_by_default",
      "test_research_paper_implementations_accuracy",
      "test_configuration_flexibility",
      "test_no_fake_implementations_regression"
    ],
    "total_items": 12
  },
  "tests/test_deterministic_benchmarks.py": {
    "classes": [],
    "functions": [
      "test_deterministic_benchmarks"
    ],
    "methods": [],
    "total_items": 1
  },
  "tests/test_fixme_implementations.py": {
    "classes": [
      "TestFIXMEImplementations"
    ],
    "functions": [],
    "methods": [
      "test_episode_sampling_no_hardcoded_fallbacks",
      "test_hardware_monitoring_no_silent_failures",
      "test_statistical_evaluation_no_hardcoded_values"
    ],
    "total_items": 4
  },
  "tests/test_math_autofix_validation.py": {
    "classes": [
      "TestMathematicalCorrectness"
    ],
    "functions": [
      "test_integration_with_reference_implementations"
    ],
    "methods": [
      "test_softmax_distance_sign_correction",
      "test_cosine_normalization_fix",
      "test_per_class_prototypes_vs_global_mean",
      "test_temperature_on_logits_not_probabilities",
      "test_maml_second_order_gradients",
      "test_meta_loss_accumulation_pattern",
      "test_enable_grad_in_inner_loops",
      "test_integration_with_reference_implementations"
    ],
    "total_items": 10
  },
  "tests/test_math_fixes_simple.py": {
    "classes": [],
    "functions": [
      "test_core_mathematical_fixes"
    ],
    "methods": [],
    "total_items": 1
  },
  "tests/test_mathematical_fixes_comprehensive.py": {
    "classes": [
      "TestMathematicalCorrectnessRegression",
      "TestPropertyBasedMathematicalCorrectness"
    ],
    "functions": [],
    "methods": [
      "test_softmax_distance_sign_never_regresses",
      "test_temperature_scaling_location_never_regresses",
      "test_per_class_prototypes_never_regresses",
      "test_arbitrary_label_remapping_never_regresses",
      "test_maml_gradient_contexts_never_regresses",
      "test_meta_loss_accumulation_never_regresses",
      "test_prototypical_networks_research_compliance_never_regresses",
      "test_temperature_scaling_properties",
      "test_prototype_computation_properties",
      "test_arbitrary_label_handling_properties",
      "test_temperature_scaling_properties",
      "test_prototype_computation_properties",
      "test_arbitrary_label_handling_properties"
    ],
    "total_items": 15
  },
  "tests/test_meta_learning.py": {
    "classes": [
      "SimpleClassifier",
      "TestTestTimeComputeScaler",
      "TestMAMLLearner",
      "TestPrototypicalNetworks",
      "TestOnlineMetaLearner",
      "TestMetaLearningDataset",
      "TestUtilities",
      "TestIntegration"
    ],
    "functions": [
      "sample_data",
      "simple_model"
    ],
    "methods": [
      "__init__",
      "forward",
      "test_initialization",
      "test_scale_compute",
      "test_difficulty_estimation",
      "test_initialization",
      "test_meta_test",
      "test_adaptation",
      "test_initialization",
      "test_forward_pass",
      "test_prototype_computation",
      "test_initialization",
      "test_learn_task",
      "test_continual_learning",
      "test_initialization",
      "test_task_sampling",
      "test_difficulty_estimation",
      "test_few_shot_accuracy",
      "test_adaptation_speed",
      "test_end_to_end_meta_learning",
      "test_initialization",
      "test_scale_compute",
      "test_difficulty_estimation",
      "test_initialization",
      "test_meta_test",
      "test_adaptation",
      "test_initialization",
      "test_forward_pass",
      "test_prototype_computation",
      "test_initialization",
      "test_learn_task",
      "test_continual_learning",
      "test_initialization",
      "test_task_sampling",
      "test_difficulty_estimation",
      "test_few_shot_accuracy",
      "test_adaptation_speed",
      "test_end_to_end_meta_learning",
      "test_initialization",
      "test_meta_test",
      "test_adaptation",
      "test_initialization",
      "test_forward_pass",
      "test_prototype_computation",
      "test_initialization",
      "test_learn_task",
      "test_continual_learning",
      "test_initialization",
      "test_task_sampling",
      "test_difficulty_estimation",
      "test_few_shot_accuracy",
      "test_adaptation_speed",
      "test_end_to_end_meta_learning",
      "test_initialization",
      "test_forward_pass",
      "test_prototype_computation",
      "test_initialization",
      "test_learn_task",
      "test_continual_learning",
      "test_initialization",
      "test_task_sampling",
      "test_difficulty_estimation",
      "test_few_shot_accuracy",
      "test_adaptation_speed",
      "test_end_to_end_meta_learning",
      "test_initialization",
      "test_learn_task",
      "test_continual_learning",
      "test_initialization",
      "test_task_sampling",
      "test_difficulty_estimation",
      "test_few_shot_accuracy",
      "test_adaptation_speed",
      "test_end_to_end_meta_learning",
      "test_initialization",
      "test_task_sampling",
      "test_difficulty_estimation",
      "test_few_shot_accuracy",
      "test_adaptation_speed",
      "test_end_to_end_meta_learning",
      "test_few_shot_accuracy",
      "test_adaptation_speed",
      "test_end_to_end_meta_learning",
      "test_end_to_end_meta_learning"
    ],
    "total_items": 94
  },
  "tests/test_sparse_coding_mathematical_properties.py": {
    "classes": [],
    "functions": [
      "test_dictionary_atom_normalization",
      "test_energy_monotonic_decrease",
      "test_sparsity_reconstruction_tradeoff",
      "test_paper_vs_l1_mode_comparison",
      "test_whitening_filter_mathematical_correctness",
      "test_homeostatic_scaling_properties",
      "test_reconstruction_identity_property"
    ],
    "methods": [],
    "total_items": 7
  },
  "tests/unit/test_adaptive_components.py": {
    "classes": [
      "TestTaskAdaptivePrototypes",
      "TestTaskAdaptiveConfig",
      "TestTaskAdaptiveIntegration"
    ],
    "functions": [],
    "methods": [
      "setup_method",
      "test_attention_based_method",
      "test_meta_learning_method",
      "test_context_dependent_method",
      "test_transformer_based_method",
      "test_invalid_method",
      "test_gradient_flow",
      "test_config_defaults",
      "test_single_query_handling",
      "test_many_queries_handling",
      "test_adaptation_consistency",
      "test_config_creation",
      "test_config_validation",
      "test_adaptive_with_different_tasks",
      "test_adaptive_prototype_diversity",
      "test_adaptive_computational_efficiency",
      "test_adaptive_methods_comparison",
      "test_adaptive_with_extreme_inputs",
      "test_config_creation",
      "test_config_validation",
      "test_adaptive_with_different_tasks",
      "test_adaptive_prototype_diversity",
      "test_adaptive_computational_efficiency",
      "test_adaptive_methods_comparison",
      "test_adaptive_with_extreme_inputs",
      "test_adaptive_with_different_tasks",
      "test_adaptive_prototype_diversity",
      "test_adaptive_computational_efficiency",
      "test_adaptive_methods_comparison",
      "test_adaptive_with_extreme_inputs"
    ],
    "total_items": 33
  },
  "tests/unit/test_advanced_algorithm_coverage.py": {
    "classes": [
      "TestAdvancedFewShotComponents",
      "TestUntestedCodePaths"
    ],
    "functions": [],
    "methods": [
      "test_multiscale_feature_aggregator_comprehensive",
      "test_hierarchical_prototypes_comprehensive",
      "test_uncertainty_estimation_comprehensive",
      "test_advanced_prototypical_networks_features",
      "test_advanced_maml_variants_comprehensive",
      "test_test_time_compute_advanced_strategies",
      "test_error_handling_and_edge_cases",
      "test_device_and_dtype_handling",
      "test_serialization_and_state_management",
      "test_logging_and_debugging_paths",
      "emit",
      "test_error_handling_and_edge_cases",
      "test_device_and_dtype_handling",
      "test_serialization_and_state_management",
      "test_logging_and_debugging_paths",
      "emit"
    ],
    "total_items": 18
  },
  "tests/unit/test_comprehensive_coverage.py": {
    "classes": [
      "TestComprehensiveCoverage",
      "TestPerformanceAndStress",
      "TestFactoryFunctions"
    ],
    "functions": [],
    "methods": [
      "setup_method",
      "test_test_time_compute_config_comprehensive",
      "test_test_time_compute_scaler_all_strategies",
      "__init__",
      "forward",
      "test_all_maml_variants_comprehensive",
      "__init__",
      "forward",
      "test_maml_en_llm_comprehensive",
      "__init__",
      "forward",
      "test_prototypical_networks_comprehensive",
      "test_matching_networks_comprehensive",
      "test_relation_networks_comprehensive",
      "test_online_meta_learner_comprehensive",
      "test_meta_learning_dataset_comprehensive",
      "test_evaluation_metrics_comprehensive",
      "test_statistical_analysis_comprehensive",
      "test_curriculum_learning_comprehensive",
      "test_task_diversity_tracker_comprehensive",
      "test_hardware_manager_comprehensive",
      "test_multi_gpu_manager_comprehensive",
      "test_all_config_classes_comprehensive",
      "test_complete_meta_learning_pipeline",
      "__init__",
      "forward",
      "test_meta_learning_dataset_property_based",
      "test_error_handling_comprehensive",
      "test_backward_compatibility_comprehensive",
      "test_large_scale_meta_learning",
      "test_memory_efficiency",
      "test_create_functions_comprehensive",
      "test_large_scale_meta_learning",
      "test_memory_efficiency",
      "test_create_functions_comprehensive",
      "test_create_functions_comprehensive"
    ],
    "total_items": 39
  },
  "tests/unit/test_config_factory.py": {
    "classes": [
      "TestComprehensiveMetaLearningConfig",
      "TestFactoryFunctions",
      "TestConfigurationValidation",
      "TestUtilityFunctions",
      "TestConfigurationIntegration"
    ],
    "functions": [],
    "methods": [
      "test_config_creation",
      "test_config_customization",
      "test_create_all_fixme_solutions_config",
      "test_create_research_accurate_config",
      "test_create_performance_optimized_config",
      "test_create_specific_solution_config",
      "test_create_specific_solution_config_unknown",
      "test_create_modular_config",
      "test_create_comprehensive_component_config",
      "test_create_educational_config",
      "test_validate_config_no_issues",
      "test_validate_config_warnings",
      "test_get_available_solutions",
      "test_print_solution_summary",
      "test_all_factory_functions_work",
      "test_specific_solutions_comprehensive",
      "test_modular_config_combinations",
      "test_config_attribute_consistency",
      "test_config_serialization_compatibility",
      "test_create_all_fixme_solutions_config",
      "test_create_research_accurate_config",
      "test_create_performance_optimized_config",
      "test_create_specific_solution_config",
      "test_create_specific_solution_config_unknown",
      "test_create_modular_config",
      "test_create_comprehensive_component_config",
      "test_create_educational_config",
      "test_validate_config_no_issues",
      "test_validate_config_warnings",
      "test_get_available_solutions",
      "test_print_solution_summary",
      "test_all_factory_functions_work",
      "test_specific_solutions_comprehensive",
      "test_modular_config_combinations",
      "test_config_attribute_consistency",
      "test_config_serialization_compatibility",
      "test_validate_config_no_issues",
      "test_validate_config_warnings",
      "test_get_available_solutions",
      "test_print_solution_summary",
      "test_all_factory_functions_work",
      "test_specific_solutions_comprehensive",
      "test_modular_config_combinations",
      "test_config_attribute_consistency",
      "test_config_serialization_compatibility",
      "test_get_available_solutions",
      "test_print_solution_summary",
      "test_all_factory_functions_work",
      "test_specific_solutions_comprehensive",
      "test_modular_config_combinations",
      "test_config_attribute_consistency",
      "test_config_serialization_compatibility",
      "test_all_factory_functions_work",
      "test_specific_solutions_comprehensive",
      "test_modular_config_combinations",
      "test_config_attribute_consistency",
      "test_config_serialization_compatibility"
    ],
    "total_items": 62
  },
  "tests/unit/test_continual_meta_learning.py": {
    "classes": [
      "TestContinualConfig",
      "TestOnlineConfig",
      "TestEWCRegularizer",
      "TestMemoryBank",
      "TestContinualMetaLearner",
      "TestOnlineMetaLearner",
      "TestCreateContinualLearner",
      "TestFixmeSolutions",
      "TestContinualLearningIntegration",
      "TestPropertyBasedContinualLearning",
      "TestContinualLearningEdgeCases"
    ],
    "functions": [],
    "methods": [
      "test_continual_config_defaults",
      "test_continual_config_ewc_methods",
      "test_continual_config_fisher_methods",
      "test_continual_config_property_based",
      "test_online_config_defaults",
      "test_online_config_parameters",
      "test_online_config_inheritance",
      "simple_model",
      "sample_data",
      "test_ewc_regularizer_init",
      "test_ewc_diagonal_fisher_estimation",
      "test_ewc_full_fisher_estimation",
      "test_ewc_kfac_fisher_estimation",
      "test_ewc_exact_fisher_estimation",
      "test_store_task_parameters",
      "test_compute_ewc_loss",
      "test_multiple_tasks_ewc",
      "memory_bank",
      "sample_episodes",
      "test_memory_bank_init",
      "test_add_episode",
      "test_memory_bank_overflow",
      "test_sample_episodes",
      "test_sample_more_than_available",
      "test_get_all_episodes",
      "test_clear_memory_bank",
      "simple_model",
      "continual_learner",
      "task_data",
      "test_continual_meta_learner_init",
      "test_learn_task",
      "test_sequential_task_learning",
      "test_evaluate_task",
      "test_memory_replay_integration",
      "simple_model",
      "online_learner",
      "streaming_tasks",
      "test_online_meta_learner_init",
      "test_online_adaptation",
      "test_meta_update",
      "test_buffer_management",
      "test_continual_online_learning",
      "simple_model",
      "test_create_continual_meta_learner",
      "test_create_online_meta_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "model",
      "sample_data",
      "test_diagonal_ewc_solution",
      "test_full_ewc_solution",
      "test_kfac_fisher_estimation_solution",
      "test_exact_fisher_estimation_solution",
      "test_memory_bank_integration_solution",
      "test_online_meta_learning_solution",
      "complete_setup",
      "test_complete_continual_learning_pipeline",
      "test_catastrophic_forgetting_mitigation",
      "test_memory_replay_effectiveness",
      "test_continual_learner_invariants",
      "test_online_learner_properties",
      "minimal_model",
      "test_single_task_continual_learning",
      "test_empty_memory_bank_sampling",
      "test_zero_ewc_lambda",
      "test_invalid_fisher_method",
      "test_online_config_defaults",
      "test_online_config_parameters",
      "test_online_config_inheritance",
      "simple_model",
      "sample_data",
      "test_ewc_regularizer_init",
      "test_ewc_diagonal_fisher_estimation",
      "test_ewc_full_fisher_estimation",
      "test_ewc_kfac_fisher_estimation",
      "test_ewc_exact_fisher_estimation",
      "test_store_task_parameters",
      "test_compute_ewc_loss",
      "test_multiple_tasks_ewc",
      "memory_bank",
      "sample_episodes",
      "test_memory_bank_init",
      "test_add_episode",
      "test_memory_bank_overflow",
      "test_sample_episodes",
      "test_sample_more_than_available",
      "test_get_all_episodes",
      "test_clear_memory_bank",
      "simple_model",
      "continual_learner",
      "task_data",
      "test_continual_meta_learner_init",
      "test_learn_task",
      "test_sequential_task_learning",
      "test_evaluate_task",
      "test_memory_replay_integration",
      "simple_model",
      "online_learner",
      "streaming_tasks",
      "test_online_meta_learner_init",
      "test_online_adaptation",
      "test_meta_update",
      "test_buffer_management",
      "test_continual_online_learning",
      "simple_model",
      "test_create_continual_meta_learner",
      "test_create_online_meta_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "model",
      "sample_data",
      "test_diagonal_ewc_solution",
      "test_full_ewc_solution",
      "test_kfac_fisher_estimation_solution",
      "test_exact_fisher_estimation_solution",
      "test_memory_bank_integration_solution",
      "test_online_meta_learning_solution",
      "complete_setup",
      "test_complete_continual_learning_pipeline",
      "test_catastrophic_forgetting_mitigation",
      "test_memory_replay_effectiveness",
      "test_continual_learner_invariants",
      "test_online_learner_properties",
      "minimal_model",
      "test_single_task_continual_learning",
      "test_empty_memory_bank_sampling",
      "test_zero_ewc_lambda",
      "test_invalid_fisher_method",
      "simple_model",
      "sample_data",
      "test_ewc_regularizer_init",
      "test_ewc_diagonal_fisher_estimation",
      "test_ewc_full_fisher_estimation",
      "test_ewc_kfac_fisher_estimation",
      "test_ewc_exact_fisher_estimation",
      "test_store_task_parameters",
      "test_compute_ewc_loss",
      "test_multiple_tasks_ewc",
      "memory_bank",
      "sample_episodes",
      "test_memory_bank_init",
      "test_add_episode",
      "test_memory_bank_overflow",
      "test_sample_episodes",
      "test_sample_more_than_available",
      "test_get_all_episodes",
      "test_clear_memory_bank",
      "simple_model",
      "continual_learner",
      "task_data",
      "test_continual_meta_learner_init",
      "test_learn_task",
      "test_sequential_task_learning",
      "test_evaluate_task",
      "test_memory_replay_integration",
      "simple_model",
      "online_learner",
      "streaming_tasks",
      "test_online_meta_learner_init",
      "test_online_adaptation",
      "test_meta_update",
      "test_buffer_management",
      "test_continual_online_learning",
      "simple_model",
      "test_create_continual_meta_learner",
      "test_create_online_meta_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "model",
      "sample_data",
      "test_diagonal_ewc_solution",
      "test_full_ewc_solution",
      "test_kfac_fisher_estimation_solution",
      "test_exact_fisher_estimation_solution",
      "test_memory_bank_integration_solution",
      "test_online_meta_learning_solution",
      "complete_setup",
      "test_complete_continual_learning_pipeline",
      "test_catastrophic_forgetting_mitigation",
      "test_memory_replay_effectiveness",
      "test_continual_learner_invariants",
      "test_online_learner_properties",
      "minimal_model",
      "test_single_task_continual_learning",
      "test_empty_memory_bank_sampling",
      "test_zero_ewc_lambda",
      "test_invalid_fisher_method",
      "memory_bank",
      "sample_episodes",
      "test_memory_bank_init",
      "test_add_episode",
      "test_memory_bank_overflow",
      "test_sample_episodes",
      "test_sample_more_than_available",
      "test_get_all_episodes",
      "test_clear_memory_bank",
      "simple_model",
      "continual_learner",
      "task_data",
      "test_continual_meta_learner_init",
      "test_learn_task",
      "test_sequential_task_learning",
      "test_evaluate_task",
      "test_memory_replay_integration",
      "simple_model",
      "online_learner",
      "streaming_tasks",
      "test_online_meta_learner_init",
      "test_online_adaptation",
      "test_meta_update",
      "test_buffer_management",
      "test_continual_online_learning",
      "simple_model",
      "test_create_continual_meta_learner",
      "test_create_online_meta_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "model",
      "sample_data",
      "test_diagonal_ewc_solution",
      "test_full_ewc_solution",
      "test_kfac_fisher_estimation_solution",
      "test_exact_fisher_estimation_solution",
      "test_memory_bank_integration_solution",
      "test_online_meta_learning_solution",
      "complete_setup",
      "test_complete_continual_learning_pipeline",
      "test_catastrophic_forgetting_mitigation",
      "test_memory_replay_effectiveness",
      "test_continual_learner_invariants",
      "test_online_learner_properties",
      "minimal_model",
      "test_single_task_continual_learning",
      "test_empty_memory_bank_sampling",
      "test_zero_ewc_lambda",
      "test_invalid_fisher_method",
      "simple_model",
      "continual_learner",
      "task_data",
      "test_continual_meta_learner_init",
      "test_learn_task",
      "test_sequential_task_learning",
      "test_evaluate_task",
      "test_memory_replay_integration",
      "simple_model",
      "online_learner",
      "streaming_tasks",
      "test_online_meta_learner_init",
      "test_online_adaptation",
      "test_meta_update",
      "test_buffer_management",
      "test_continual_online_learning",
      "simple_model",
      "test_create_continual_meta_learner",
      "test_create_online_meta_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "model",
      "sample_data",
      "test_diagonal_ewc_solution",
      "test_full_ewc_solution",
      "test_kfac_fisher_estimation_solution",
      "test_exact_fisher_estimation_solution",
      "test_memory_bank_integration_solution",
      "test_online_meta_learning_solution",
      "complete_setup",
      "test_complete_continual_learning_pipeline",
      "test_catastrophic_forgetting_mitigation",
      "test_memory_replay_effectiveness",
      "test_continual_learner_invariants",
      "test_online_learner_properties",
      "minimal_model",
      "test_single_task_continual_learning",
      "test_empty_memory_bank_sampling",
      "test_zero_ewc_lambda",
      "test_invalid_fisher_method",
      "simple_model",
      "online_learner",
      "streaming_tasks",
      "test_online_meta_learner_init",
      "test_online_adaptation",
      "test_meta_update",
      "test_buffer_management",
      "test_continual_online_learning",
      "simple_model",
      "test_create_continual_meta_learner",
      "test_create_online_meta_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "model",
      "sample_data",
      "test_diagonal_ewc_solution",
      "test_full_ewc_solution",
      "test_kfac_fisher_estimation_solution",
      "test_exact_fisher_estimation_solution",
      "test_memory_bank_integration_solution",
      "test_online_meta_learning_solution",
      "complete_setup",
      "test_complete_continual_learning_pipeline",
      "test_catastrophic_forgetting_mitigation",
      "test_memory_replay_effectiveness",
      "test_continual_learner_invariants",
      "test_online_learner_properties",
      "minimal_model",
      "test_single_task_continual_learning",
      "test_empty_memory_bank_sampling",
      "test_zero_ewc_lambda",
      "test_invalid_fisher_method",
      "simple_model",
      "test_create_continual_meta_learner",
      "test_create_online_meta_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "model",
      "sample_data",
      "test_diagonal_ewc_solution",
      "test_full_ewc_solution",
      "test_kfac_fisher_estimation_solution",
      "test_exact_fisher_estimation_solution",
      "test_memory_bank_integration_solution",
      "test_online_meta_learning_solution",
      "complete_setup",
      "test_complete_continual_learning_pipeline",
      "test_catastrophic_forgetting_mitigation",
      "test_memory_replay_effectiveness",
      "test_continual_learner_invariants",
      "test_online_learner_properties",
      "minimal_model",
      "test_single_task_continual_learning",
      "test_empty_memory_bank_sampling",
      "test_zero_ewc_lambda",
      "test_invalid_fisher_method",
      "model",
      "sample_data",
      "test_diagonal_ewc_solution",
      "test_full_ewc_solution",
      "test_kfac_fisher_estimation_solution",
      "test_exact_fisher_estimation_solution",
      "test_memory_bank_integration_solution",
      "test_online_meta_learning_solution",
      "complete_setup",
      "test_complete_continual_learning_pipeline",
      "test_catastrophic_forgetting_mitigation",
      "test_memory_replay_effectiveness",
      "test_continual_learner_invariants",
      "test_online_learner_properties",
      "minimal_model",
      "test_single_task_continual_learning",
      "test_empty_memory_bank_sampling",
      "test_zero_ewc_lambda",
      "test_invalid_fisher_method",
      "complete_setup",
      "test_complete_continual_learning_pipeline",
      "test_catastrophic_forgetting_mitigation",
      "test_memory_replay_effectiveness",
      "test_continual_learner_invariants",
      "test_online_learner_properties",
      "minimal_model",
      "test_single_task_continual_learning",
      "test_empty_memory_bank_sampling",
      "test_zero_ewc_lambda",
      "test_invalid_fisher_method",
      "test_continual_learner_invariants",
      "test_online_learner_properties",
      "minimal_model",
      "test_single_task_continual_learning",
      "test_empty_memory_bank_sampling",
      "test_zero_ewc_lambda",
      "test_invalid_fisher_method",
      "minimal_model",
      "test_single_task_continual_learning",
      "test_empty_memory_bank_sampling",
      "test_zero_ewc_lambda",
      "test_invalid_fisher_method"
    ],
    "total_items": 385
  },
  "tests/unit/test_coverage_boosters.py": {
    "classes": [
      "TestCoverageBoosters"
    ],
    "functions": [],
    "methods": [
      "test_utils_comprehensive_coverage",
      "test_meta_learning_dataset_edge_cases",
      "test_evaluation_metrics_comprehensive",
      "test_statistical_analysis_all_methods",
      "test_curriculum_learning_all_strategies",
      "test_task_diversity_tracker_comprehensive",
      "test_all_configurations_with_edge_values",
      "test_hardware_manager_comprehensive",
      "test_multi_gpu_manager_edge_cases",
      "test_maml_variants_comprehensive_coverage",
      "__init__",
      "forward",
      "test_test_time_compute_comprehensive_coverage",
      "__init__",
      "forward",
      "test_error_handling_comprehensive",
      "test_serialization_and_io_coverage",
      "test_functional_programming_coverage",
      "test_performance_and_memory_edge_cases",
      "test_cross_module_integration_comprehensive"
    ],
    "total_items": 21
  },
  "tests/unit/test_dataset_loading.py": {
    "classes": [
      "TestDatasetLoading",
      "TestDatasetLoadingConfig",
      "TestDatasetLoadingIntegration"
    ],
    "functions": [],
    "methods": [
      "setup_method",
      "test_synthetic_data_loading",
      "test_synthetic_data_different_datasets",
      "test_torchmeta_loading_omniglot",
      "test_torchmeta_import_error",
      "test_custom_splits_loading",
      "test_huggingface_loading",
      "test_huggingface_import_error",
      "test_fallback_mechanism",
      "test_fallback_disabled",
      "test_unknown_method",
      "test_config_defaults",
      "test_config_customization",
      "test_episode_consistency",
      "test_different_episode_configurations",
      "test_data_quality_checks",
      "test_config_defaults",
      "test_config_customization",
      "test_episode_consistency",
      "test_different_episode_configurations",
      "test_data_quality_checks",
      "test_episode_consistency",
      "test_different_episode_configurations",
      "test_data_quality_checks"
    ],
    "total_items": 27
  },
  "tests/unit/test_difficulty_estimation.py": {
    "classes": [
      "TestDifficultyEstimation",
      "TestTaskDifficultyConfig",
      "TestDifficultyEstimationIntegration"
    ],
    "functions": [],
    "methods": [
      "setup_method",
      "test_intra_class_variance_method",
      "test_intra_class_variance_unlabeled",
      "test_inter_class_separation_method",
      "test_inter_class_separation_silhouette",
      "test_inter_class_separation_no_labels",
      "test_inter_class_separation_single_class",
      "test_inter_class_separation_import_error",
      "test_mdl_complexity_method",
      "test_mdl_different_algorithms",
      "test_mdl_invalid_algorithm",
      "test_gradient_based_method",
      "test_gradient_based_no_labels",
      "test_entropy_method",
      "test_entropy_fallback_handling",
      "test_unknown_method",
      "test_fallback_mechanism",
      "test_config_defaults",
      "test_config_customization",
      "test_difficulty_consistency_across_methods",
      "test_difficulty_with_different_data_characteristics",
      "test_difficulty_estimation_edge_cases",
      "test_difficulty_estimation_performance",
      "test_difficulty_estimation_numerical_stability",
      "test_config_defaults",
      "test_config_customization",
      "test_difficulty_consistency_across_methods",
      "test_difficulty_with_different_data_characteristics",
      "test_difficulty_estimation_edge_cases",
      "test_difficulty_estimation_performance",
      "test_difficulty_estimation_numerical_stability",
      "test_difficulty_consistency_across_methods",
      "test_difficulty_with_different_data_characteristics",
      "test_difficulty_estimation_edge_cases",
      "test_difficulty_estimation_performance",
      "test_difficulty_estimation_numerical_stability"
    ],
    "total_items": 39
  },
  "tests/unit/test_episode_contract.py": {
    "classes": [
      "TestEpisodeContract",
      "TestEpisodeBatchValidation",
      "TestIntegrationScenarios"
    ],
    "functions": [],
    "methods": [
      "valid_episode_data",
      "test_valid_episode_creation",
      "test_parameter_validation",
      "test_tensor_shape_validation",
      "test_label_consistency_validation",
      "test_class_distribution_validation",
      "test_tensor_properties_validation",
      "test_validation_levels",
      "test_from_raw_data",
      "test_prediction_validation",
      "test_device_handling",
      "test_episode_summary",
      "test_empty_batch_validation",
      "test_consistent_batch_validation",
      "test_inconsistent_batch_validation",
      "test_device_inconsistency_detection",
      "test_complete_prototypical_networks_workflow",
      "test_complete_maml_workflow",
      "test_real_world_error_patterns",
      "test_empty_batch_validation",
      "test_consistent_batch_validation",
      "test_inconsistent_batch_validation",
      "test_device_inconsistency_detection",
      "test_complete_prototypical_networks_workflow",
      "test_complete_maml_workflow",
      "test_real_world_error_patterns",
      "test_complete_prototypical_networks_workflow",
      "test_complete_maml_workflow",
      "test_real_world_error_patterns"
    ],
    "total_items": 32
  },
  "tests/unit/test_few_shot_learning.py": {
    "classes": [
      "TestFewShotConfig",
      "TestPrototypicalConfig",
      "TestFewShotLearner",
      "TestPrototypicalLearner",
      "TestUncertaintyAwareDistance",
      "TestHierarchicalPrototypes",
      "TestTaskAdaptivePrototypes",
      "TestCreateFewShotLearner",
      "TestPrototypicalNetworkVariants",
      "TestFewShotLearningIntegration",
      "TestFewShotLearningEdgeCases",
      "TestFewShotLearningPerformance",
      "TestFixmeSolutions",
      "TestPropertyBasedFewShotLearning"
    ],
    "functions": [],
    "methods": [
      "test_few_shot_config_defaults",
      "test_few_shot_config_validation",
      "test_few_shot_config_property_based",
      "test_prototypical_config_defaults",
      "test_prototypical_config_variants",
      "test_prototypical_config_feature_flags",
      "simple_model",
      "sample_data",
      "test_few_shot_learner_init",
      "test_few_shot_learner_forward",
      "test_few_shot_learner_compute_loss",
      "simple_encoder",
      "prototypical_learner",
      "sample_episode",
      "test_prototypical_learner_init",
      "test_compute_prototypes_basic",
      "test_compute_prototypes_variants",
      "test_distance_computation_methods",
      "test_temperature_scaling",
      "test_uncertainty_aware_distances",
      "test_hierarchical_prototypes",
      "test_task_adaptive_prototypes",
      "test_forward_pass_all_variants",
      "test_compute_loss_prototypical",
      "test_accuracy_computation",
      "uncertainty_distance",
      "test_uncertainty_distance_init",
      "test_uncertainty_distance_forward",
      "test_uncertainty_distance_property_based",
      "hierarchical_prototypes",
      "test_hierarchical_prototypes_init",
      "test_hierarchical_prototypes_forward",
      "test_hierarchical_prototypes_different_levels",
      "task_adaptive_prototypes",
      "test_task_adaptive_prototypes_init",
      "test_task_adaptive_prototypes_forward",
      "test_task_adaptive_prototypes_adaptation",
      "simple_model",
      "test_create_prototypical_learner",
      "test_create_basic_few_shot_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "encoder",
      "episode_data",
      "test_prototypical_variants_forward_pass",
      "test_squared_euclidean_option",
      "complete_setup",
      "test_complete_few_shot_pipeline",
      "test_gradient_computation",
      "test_reproducibility",
      "simple_encoder",
      "test_single_shot_learning",
      "test_many_way_learning",
      "test_mismatched_dimensions",
      "test_empty_support_set",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "test_prototypical_config_defaults",
      "test_prototypical_config_variants",
      "test_prototypical_config_feature_flags",
      "simple_model",
      "sample_data",
      "test_few_shot_learner_init",
      "test_few_shot_learner_forward",
      "test_few_shot_learner_compute_loss",
      "simple_encoder",
      "prototypical_learner",
      "sample_episode",
      "test_prototypical_learner_init",
      "test_compute_prototypes_basic",
      "test_compute_prototypes_variants",
      "test_distance_computation_methods",
      "test_temperature_scaling",
      "test_uncertainty_aware_distances",
      "test_hierarchical_prototypes",
      "test_task_adaptive_prototypes",
      "test_forward_pass_all_variants",
      "test_compute_loss_prototypical",
      "test_accuracy_computation",
      "uncertainty_distance",
      "test_uncertainty_distance_init",
      "test_uncertainty_distance_forward",
      "test_uncertainty_distance_property_based",
      "hierarchical_prototypes",
      "test_hierarchical_prototypes_init",
      "test_hierarchical_prototypes_forward",
      "test_hierarchical_prototypes_different_levels",
      "task_adaptive_prototypes",
      "test_task_adaptive_prototypes_init",
      "test_task_adaptive_prototypes_forward",
      "test_task_adaptive_prototypes_adaptation",
      "simple_model",
      "test_create_prototypical_learner",
      "test_create_basic_few_shot_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "encoder",
      "episode_data",
      "test_prototypical_variants_forward_pass",
      "test_squared_euclidean_option",
      "complete_setup",
      "test_complete_few_shot_pipeline",
      "test_gradient_computation",
      "test_reproducibility",
      "simple_encoder",
      "test_single_shot_learning",
      "test_many_way_learning",
      "test_mismatched_dimensions",
      "test_empty_support_set",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "simple_model",
      "sample_data",
      "test_few_shot_learner_init",
      "test_few_shot_learner_forward",
      "test_few_shot_learner_compute_loss",
      "simple_encoder",
      "prototypical_learner",
      "sample_episode",
      "test_prototypical_learner_init",
      "test_compute_prototypes_basic",
      "test_compute_prototypes_variants",
      "test_distance_computation_methods",
      "test_temperature_scaling",
      "test_uncertainty_aware_distances",
      "test_hierarchical_prototypes",
      "test_task_adaptive_prototypes",
      "test_forward_pass_all_variants",
      "test_compute_loss_prototypical",
      "test_accuracy_computation",
      "uncertainty_distance",
      "test_uncertainty_distance_init",
      "test_uncertainty_distance_forward",
      "test_uncertainty_distance_property_based",
      "hierarchical_prototypes",
      "test_hierarchical_prototypes_init",
      "test_hierarchical_prototypes_forward",
      "test_hierarchical_prototypes_different_levels",
      "task_adaptive_prototypes",
      "test_task_adaptive_prototypes_init",
      "test_task_adaptive_prototypes_forward",
      "test_task_adaptive_prototypes_adaptation",
      "simple_model",
      "test_create_prototypical_learner",
      "test_create_basic_few_shot_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "encoder",
      "episode_data",
      "test_prototypical_variants_forward_pass",
      "test_squared_euclidean_option",
      "complete_setup",
      "test_complete_few_shot_pipeline",
      "test_gradient_computation",
      "test_reproducibility",
      "simple_encoder",
      "test_single_shot_learning",
      "test_many_way_learning",
      "test_mismatched_dimensions",
      "test_empty_support_set",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "simple_encoder",
      "prototypical_learner",
      "sample_episode",
      "test_prototypical_learner_init",
      "test_compute_prototypes_basic",
      "test_compute_prototypes_variants",
      "test_distance_computation_methods",
      "test_temperature_scaling",
      "test_uncertainty_aware_distances",
      "test_hierarchical_prototypes",
      "test_task_adaptive_prototypes",
      "test_forward_pass_all_variants",
      "test_compute_loss_prototypical",
      "test_accuracy_computation",
      "uncertainty_distance",
      "test_uncertainty_distance_init",
      "test_uncertainty_distance_forward",
      "test_uncertainty_distance_property_based",
      "hierarchical_prototypes",
      "test_hierarchical_prototypes_init",
      "test_hierarchical_prototypes_forward",
      "test_hierarchical_prototypes_different_levels",
      "task_adaptive_prototypes",
      "test_task_adaptive_prototypes_init",
      "test_task_adaptive_prototypes_forward",
      "test_task_adaptive_prototypes_adaptation",
      "simple_model",
      "test_create_prototypical_learner",
      "test_create_basic_few_shot_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "encoder",
      "episode_data",
      "test_prototypical_variants_forward_pass",
      "test_squared_euclidean_option",
      "complete_setup",
      "test_complete_few_shot_pipeline",
      "test_gradient_computation",
      "test_reproducibility",
      "simple_encoder",
      "test_single_shot_learning",
      "test_many_way_learning",
      "test_mismatched_dimensions",
      "test_empty_support_set",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "uncertainty_distance",
      "test_uncertainty_distance_init",
      "test_uncertainty_distance_forward",
      "test_uncertainty_distance_property_based",
      "hierarchical_prototypes",
      "test_hierarchical_prototypes_init",
      "test_hierarchical_prototypes_forward",
      "test_hierarchical_prototypes_different_levels",
      "task_adaptive_prototypes",
      "test_task_adaptive_prototypes_init",
      "test_task_adaptive_prototypes_forward",
      "test_task_adaptive_prototypes_adaptation",
      "simple_model",
      "test_create_prototypical_learner",
      "test_create_basic_few_shot_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "encoder",
      "episode_data",
      "test_prototypical_variants_forward_pass",
      "test_squared_euclidean_option",
      "complete_setup",
      "test_complete_few_shot_pipeline",
      "test_gradient_computation",
      "test_reproducibility",
      "simple_encoder",
      "test_single_shot_learning",
      "test_many_way_learning",
      "test_mismatched_dimensions",
      "test_empty_support_set",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "hierarchical_prototypes",
      "test_hierarchical_prototypes_init",
      "test_hierarchical_prototypes_forward",
      "test_hierarchical_prototypes_different_levels",
      "task_adaptive_prototypes",
      "test_task_adaptive_prototypes_init",
      "test_task_adaptive_prototypes_forward",
      "test_task_adaptive_prototypes_adaptation",
      "simple_model",
      "test_create_prototypical_learner",
      "test_create_basic_few_shot_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "encoder",
      "episode_data",
      "test_prototypical_variants_forward_pass",
      "test_squared_euclidean_option",
      "complete_setup",
      "test_complete_few_shot_pipeline",
      "test_gradient_computation",
      "test_reproducibility",
      "simple_encoder",
      "test_single_shot_learning",
      "test_many_way_learning",
      "test_mismatched_dimensions",
      "test_empty_support_set",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "task_adaptive_prototypes",
      "test_task_adaptive_prototypes_init",
      "test_task_adaptive_prototypes_forward",
      "test_task_adaptive_prototypes_adaptation",
      "simple_model",
      "test_create_prototypical_learner",
      "test_create_basic_few_shot_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "encoder",
      "episode_data",
      "test_prototypical_variants_forward_pass",
      "test_squared_euclidean_option",
      "complete_setup",
      "test_complete_few_shot_pipeline",
      "test_gradient_computation",
      "test_reproducibility",
      "simple_encoder",
      "test_single_shot_learning",
      "test_many_way_learning",
      "test_mismatched_dimensions",
      "test_empty_support_set",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "simple_model",
      "test_create_prototypical_learner",
      "test_create_basic_few_shot_learner",
      "test_create_invalid_learner_type",
      "test_create_learner_parametrized",
      "encoder",
      "episode_data",
      "test_prototypical_variants_forward_pass",
      "test_squared_euclidean_option",
      "complete_setup",
      "test_complete_few_shot_pipeline",
      "test_gradient_computation",
      "test_reproducibility",
      "simple_encoder",
      "test_single_shot_learning",
      "test_many_way_learning",
      "test_mismatched_dimensions",
      "test_empty_support_set",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "encoder",
      "episode_data",
      "test_prototypical_variants_forward_pass",
      "test_squared_euclidean_option",
      "complete_setup",
      "test_complete_few_shot_pipeline",
      "test_gradient_computation",
      "test_reproducibility",
      "simple_encoder",
      "test_single_shot_learning",
      "test_many_way_learning",
      "test_mismatched_dimensions",
      "test_empty_support_set",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "complete_setup",
      "test_complete_few_shot_pipeline",
      "test_gradient_computation",
      "test_reproducibility",
      "simple_encoder",
      "test_single_shot_learning",
      "test_many_way_learning",
      "test_mismatched_dimensions",
      "test_empty_support_set",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "simple_encoder",
      "test_single_shot_learning",
      "test_many_way_learning",
      "test_mismatched_dimensions",
      "test_empty_support_set",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "performance_encoder",
      "test_large_scale_performance",
      "test_gpu_acceleration",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "encoder",
      "test_original_snell_prototypical_implementation",
      "test_research_accurate_implementation",
      "test_uncertainty_aware_distances_solution",
      "test_hierarchical_prototypes_solution",
      "test_task_adaptive_prototypes_solution",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency",
      "test_prototypical_learner_shape_invariants",
      "test_prototypical_variants_consistency"
    ],
    "total_items": 479
  },
  "tests/unit/test_hardware_utils.py": {
    "classes": [
      "TestHardwareConfig",
      "TestHardwareManager",
      "TestMultiGPUManager",
      "TestUtilityFunctions",
      "TestOptimalBatchSize",
      "TestHardwareCompatibility",
      "TestHardwareEdgeCases"
    ],
    "functions": [],
    "methods": [
      "test_hardware_config_defaults",
      "test_hardware_config_custom_settings",
      "test_hardware_config_property_based",
      "hardware_manager",
      "simple_model",
      "test_hardware_manager_init",
      "test_device_detection",
      "test_prepare_model",
      "test_prepare_data_tensor",
      "test_prepare_data_tuple",
      "test_prepare_data_dict",
      "test_autocast_context",
      "test_get_memory_stats",
      "test_clear_cache",
      "test_benchmark_device",
      "test_multi_gpu_manager_init",
      "test_setup_distributed",
      "test_wrap_model",
      "test_cleanup",
      "test_auto_device",
      "test_prepare_for_hardware",
      "test_prepare_for_hardware_custom_device",
      "test_log_hardware_info",
      "test_create_hardware_manager",
      "test_get_optimal_batch_size_cuda",
      "test_get_optimal_batch_size_cpu",
      "test_get_optimal_batch_size_mps",
      "test_hardware_manager_device_compatibility",
      "test_mixed_precision_compatibility",
      "test_hardware_manager_with_invalid_device",
      "test_prepare_model_with_none_input",
      "test_prepare_data_with_none_input",
      "test_memory_stats_without_gpu",
      "test_autocast_context_without_mixed_precision",
      "hardware_manager",
      "simple_model",
      "test_hardware_manager_init",
      "test_device_detection",
      "test_prepare_model",
      "test_prepare_data_tensor",
      "test_prepare_data_tuple",
      "test_prepare_data_dict",
      "test_autocast_context",
      "test_get_memory_stats",
      "test_clear_cache",
      "test_benchmark_device",
      "test_multi_gpu_manager_init",
      "test_setup_distributed",
      "test_wrap_model",
      "test_cleanup",
      "test_auto_device",
      "test_prepare_for_hardware",
      "test_prepare_for_hardware_custom_device",
      "test_log_hardware_info",
      "test_create_hardware_manager",
      "test_get_optimal_batch_size_cuda",
      "test_get_optimal_batch_size_cpu",
      "test_get_optimal_batch_size_mps",
      "test_hardware_manager_device_compatibility",
      "test_mixed_precision_compatibility",
      "test_hardware_manager_with_invalid_device",
      "test_prepare_model_with_none_input",
      "test_prepare_data_with_none_input",
      "test_memory_stats_without_gpu",
      "test_autocast_context_without_mixed_precision",
      "test_multi_gpu_manager_init",
      "test_setup_distributed",
      "test_wrap_model",
      "test_cleanup",
      "test_auto_device",
      "test_prepare_for_hardware",
      "test_prepare_for_hardware_custom_device",
      "test_log_hardware_info",
      "test_create_hardware_manager",
      "test_get_optimal_batch_size_cuda",
      "test_get_optimal_batch_size_cpu",
      "test_get_optimal_batch_size_mps",
      "test_hardware_manager_device_compatibility",
      "test_mixed_precision_compatibility",
      "test_hardware_manager_with_invalid_device",
      "test_prepare_model_with_none_input",
      "test_prepare_data_with_none_input",
      "test_memory_stats_without_gpu",
      "test_autocast_context_without_mixed_precision",
      "test_auto_device",
      "test_prepare_for_hardware",
      "test_prepare_for_hardware_custom_device",
      "test_log_hardware_info",
      "test_create_hardware_manager",
      "test_get_optimal_batch_size_cuda",
      "test_get_optimal_batch_size_cpu",
      "test_get_optimal_batch_size_mps",
      "test_hardware_manager_device_compatibility",
      "test_mixed_precision_compatibility",
      "test_hardware_manager_with_invalid_device",
      "test_prepare_model_with_none_input",
      "test_prepare_data_with_none_input",
      "test_memory_stats_without_gpu",
      "test_autocast_context_without_mixed_precision",
      "test_get_optimal_batch_size_cuda",
      "test_get_optimal_batch_size_cpu",
      "test_get_optimal_batch_size_mps",
      "test_hardware_manager_device_compatibility",
      "test_mixed_precision_compatibility",
      "test_hardware_manager_with_invalid_device",
      "test_prepare_model_with_none_input",
      "test_prepare_data_with_none_input",
      "test_memory_stats_without_gpu",
      "test_autocast_context_without_mixed_precision",
      "test_hardware_manager_device_compatibility",
      "test_mixed_precision_compatibility",
      "test_hardware_manager_with_invalid_device",
      "test_prepare_model_with_none_input",
      "test_prepare_data_with_none_input",
      "test_memory_stats_without_gpu",
      "test_autocast_context_without_mixed_precision",
      "test_hardware_manager_with_invalid_device",
      "test_prepare_model_with_none_input",
      "test_prepare_data_with_none_input",
      "test_memory_stats_without_gpu",
      "test_autocast_context_without_mixed_precision"
    ],
    "total_items": 128
  },
  "tests/unit/test_hierarchical_components.py": {
    "classes": [
      "TestHierarchicalPrototypes",
      "TestHierarchicalConfig",
      "TestHierarchicalIntegration"
    ],
    "functions": [],
    "methods": [
      "setup_method",
      "test_multi_level_method",
      "test_tree_structured_method",
      "test_coarse_to_fine_method",
      "test_adaptive_hierarchy_method",
      "test_invalid_method",
      "test_gradient_flow",
      "test_config_defaults",
      "test_single_class_handling",
      "test_empty_class_handling",
      "test_config_creation",
      "test_config_validation",
      "test_hierarchical_distance_computation",
      "test_hierarchical_prototype_consistency",
      "test_hierarchical_memory_efficiency",
      "test_config_creation",
      "test_config_validation",
      "test_hierarchical_distance_computation",
      "test_hierarchical_prototype_consistency",
      "test_hierarchical_memory_efficiency",
      "test_hierarchical_distance_computation",
      "test_hierarchical_prototype_consistency",
      "test_hierarchical_memory_efficiency"
    ],
    "total_items": 26
  },
  "tests/unit/test_high_impact_modules.py": {
    "classes": [
      "TestUtilsModules",
      "TestConfigFactory",
      "TestCLIModule"
    ],
    "functions": [],
    "methods": [
      "test_configurations_module",
      "test_dataset_sampling_module",
      "test_statistical_evaluation_module",
      "test_analysis_visualization_module",
      "test_factory_functions_module",
      "test_config_factory_comprehensive",
      "test_cli_basic_functionality",
      "test_cli_argument_parsing",
      "test_cli_configuration_handling",
      "test_cli_training_pipeline",
      "test_cli_logging_setup",
      "test_config_factory_comprehensive",
      "test_cli_basic_functionality",
      "test_cli_argument_parsing",
      "test_cli_configuration_handling",
      "test_cli_training_pipeline",
      "test_cli_logging_setup",
      "test_cli_basic_functionality",
      "test_cli_argument_parsing",
      "test_cli_configuration_handling",
      "test_cli_training_pipeline",
      "test_cli_logging_setup"
    ],
    "total_items": 25
  },
  "tests/unit/test_integration_coverage.py": {
    "classes": [
      "TestCompleteIntegrationPipelines",
      "TestCrossModuleDataFlow",
      "TestConfigurationValidation"
    ],
    "functions": [],
    "methods": [
      "test_complete_few_shot_learning_pipeline",
      "test_maml_with_curriculum_learning_pipeline",
      "test_test_time_compute_with_statistics_pipeline",
      "test_continual_learning_with_memory_pipeline",
      "test_dataset_to_model_data_flow",
      "test_hardware_optimization_integration",
      "test_statistical_analysis_integration",
      "test_visualization_and_io_integration",
      "test_configuration_compatibility",
      "test_dataset_to_model_data_flow",
      "test_hardware_optimization_integration",
      "test_statistical_analysis_integration",
      "test_visualization_and_io_integration",
      "test_configuration_compatibility",
      "test_configuration_compatibility"
    ],
    "total_items": 18
  },
  "tests/unit/test_leakage_guard.py": {
    "classes": [
      "TestLeakageGuard",
      "TestSafeNormalizer",
      "TestLeakageGuardContext",
      "TestIntegrationScenarios"
    ],
    "functions": [],
    "methods": [
      "guard",
      "train_test_classes",
      "test_train_test_split_registration",
      "test_overlapping_train_test_classes",
      "test_normalization_stats_validation_clean",
      "test_normalization_stats_validation_leakage",
      "test_episode_isolation_validation_clean",
      "test_episode_isolation_validation_cross_split",
      "test_episode_isolation_support_query_mismatch",
      "test_batchnorm_leakage_detection",
      "test_optimizer_state_monitoring",
      "test_strict_mode_raises_on_critical",
      "test_assert_no_leakage",
      "test_leakage_report",
      "test_safe_normalizer_creation",
      "test_safe_normalizer_with_guard",
      "test_safe_normalizer_numerical_stability",
      "test_context_manager_basic",
      "test_context_manager_with_violations",
      "test_context_manager_without_classes",
      "test_complete_few_shot_scenario_clean",
      "test_complete_few_shot_scenario_with_leakage",
      "test_safe_normalizer_creation",
      "test_safe_normalizer_with_guard",
      "test_safe_normalizer_numerical_stability",
      "test_context_manager_basic",
      "test_context_manager_with_violations",
      "test_context_manager_without_classes",
      "test_complete_few_shot_scenario_clean",
      "test_complete_few_shot_scenario_with_leakage",
      "test_context_manager_basic",
      "test_context_manager_with_violations",
      "test_context_manager_without_classes",
      "test_complete_few_shot_scenario_clean",
      "test_complete_few_shot_scenario_with_leakage",
      "test_complete_few_shot_scenario_clean",
      "test_complete_few_shot_scenario_with_leakage"
    ],
    "total_items": 41
  },
  "tests/unit/test_maml_research_correctness.py": {
    "classes": [
      "Tiny"
    ],
    "functions": [
      "inner_adapt_and_eval",
      "test_second_order_path_and_no_inplace",
      "test_first_order_path_exists_but_no_second_order_graph"
    ],
    "methods": [
      "__init__",
      "forward",
      "inner_adapt_and_eval",
      "test_second_order_path_and_no_inplace",
      "test_first_order_path_exists_but_no_second_order_graph"
    ],
    "total_items": 9
  },
  "tests/unit/test_maml_variants.py": {
    "classes": [
      "TestMAMLConfig",
      "TestFunctionalForward",
      "TestMAMLLearner",
      "TestFirstOrderMAML",
      "TestMAMLenLLM",
      "TestMAMLPropertyBased",
      "TestFixmeSolutions",
      "TestMAMLPerformance",
      "TestMAMLIntegration"
    ],
    "functions": [],
    "methods": [
      "test_default_configuration",
      "test_all_maml_variants",
      "test_functional_forward_methods",
      "test_research_accurate_configurations",
      "test_basic_functional_forward",
      "test_l2l_style_functional_forward",
      "test_higher_style_functional_forward",
      "test_manual_functional_forward",
      "test_compiled_functional_forward",
      "test_functional_forward_gradient_flow",
      "test_initialization",
      "test_meta_train_step_basic",
      "test_all_maml_variants_execution",
      "test_inner_loop_adaptation",
      "test_query_loss_computation",
      "test_gradient_clipping",
      "test_first_order_maml_initialization",
      "test_first_order_computation",
      "test_maml_en_llm_initialization",
      "test_synthetic_data_generation",
      "test_in_context_learning_optimization",
      "test_cross_domain_adaptation",
      "test_context_optimization_components",
      "test_maml_configuration_robustness",
      "test_adaptation_invariants",
      "test_variant_method_combinations",
      "test_all_functional_forward_solutions",
      "test_maml_en_llm_research_accuracy",
      "test_variant_specific_implementations",
      "test_adaptation_speed_comparison",
      "test_maml_with_test_time_compute",
      "test_maml_with_continual_learning",
      "test_basic_functional_forward",
      "test_l2l_style_functional_forward",
      "test_higher_style_functional_forward",
      "test_manual_functional_forward",
      "test_compiled_functional_forward",
      "test_functional_forward_gradient_flow",
      "test_initialization",
      "test_meta_train_step_basic",
      "test_all_maml_variants_execution",
      "test_inner_loop_adaptation",
      "test_query_loss_computation",
      "test_gradient_clipping",
      "test_first_order_maml_initialization",
      "test_first_order_computation",
      "test_maml_en_llm_initialization",
      "test_synthetic_data_generation",
      "test_in_context_learning_optimization",
      "test_cross_domain_adaptation",
      "test_context_optimization_components",
      "test_maml_configuration_robustness",
      "test_adaptation_invariants",
      "test_variant_method_combinations",
      "test_all_functional_forward_solutions",
      "test_maml_en_llm_research_accuracy",
      "test_variant_specific_implementations",
      "test_adaptation_speed_comparison",
      "test_maml_with_test_time_compute",
      "test_maml_with_continual_learning",
      "test_initialization",
      "test_meta_train_step_basic",
      "test_all_maml_variants_execution",
      "test_inner_loop_adaptation",
      "test_query_loss_computation",
      "test_gradient_clipping",
      "test_first_order_maml_initialization",
      "test_first_order_computation",
      "test_maml_en_llm_initialization",
      "test_synthetic_data_generation",
      "test_in_context_learning_optimization",
      "test_cross_domain_adaptation",
      "test_context_optimization_components",
      "test_maml_configuration_robustness",
      "test_adaptation_invariants",
      "test_variant_method_combinations",
      "test_all_functional_forward_solutions",
      "test_maml_en_llm_research_accuracy",
      "test_variant_specific_implementations",
      "test_adaptation_speed_comparison",
      "test_maml_with_test_time_compute",
      "test_maml_with_continual_learning",
      "test_first_order_maml_initialization",
      "test_first_order_computation",
      "test_maml_en_llm_initialization",
      "test_synthetic_data_generation",
      "test_in_context_learning_optimization",
      "test_cross_domain_adaptation",
      "test_context_optimization_components",
      "test_maml_configuration_robustness",
      "test_adaptation_invariants",
      "test_variant_method_combinations",
      "test_all_functional_forward_solutions",
      "test_maml_en_llm_research_accuracy",
      "test_variant_specific_implementations",
      "test_adaptation_speed_comparison",
      "test_maml_with_test_time_compute",
      "test_maml_with_continual_learning",
      "test_maml_en_llm_initialization",
      "test_synthetic_data_generation",
      "test_in_context_learning_optimization",
      "test_cross_domain_adaptation",
      "test_context_optimization_components",
      "test_maml_configuration_robustness",
      "test_adaptation_invariants",
      "test_variant_method_combinations",
      "test_all_functional_forward_solutions",
      "test_maml_en_llm_research_accuracy",
      "test_variant_specific_implementations",
      "test_adaptation_speed_comparison",
      "test_maml_with_test_time_compute",
      "test_maml_with_continual_learning",
      "test_maml_configuration_robustness",
      "test_adaptation_invariants",
      "test_variant_method_combinations",
      "test_all_functional_forward_solutions",
      "test_maml_en_llm_research_accuracy",
      "test_variant_specific_implementations",
      "test_adaptation_speed_comparison",
      "test_maml_with_test_time_compute",
      "test_maml_with_continual_learning",
      "test_all_functional_forward_solutions",
      "test_maml_en_llm_research_accuracy",
      "test_variant_specific_implementations",
      "test_adaptation_speed_comparison",
      "test_maml_with_test_time_compute",
      "test_maml_with_continual_learning",
      "test_adaptation_speed_comparison",
      "test_maml_with_test_time_compute",
      "test_maml_with_continual_learning",
      "test_maml_with_test_time_compute",
      "test_maml_with_continual_learning"
    ],
    "total_items": 141
  },
  "tests/unit/test_matching_research_correctness.py": {
    "classes": [],
    "functions": [
      "test_matching_attention_over_supports_and_onehot_mix"
    ],
    "methods": [],
    "total_items": 1
  },
  "tests/unit/test_performance_benchmarks.py": {
    "classes": [
      "TestPerformanceCriticalPaths",
      "TestMemoryEfficiencyAndOptimization",
      "TestScalabilityAndStressTests"
    ],
    "functions": [],
    "methods": [
      "test_large_batch_prototypical_networks_performance",
      "test_maml_multiple_adaptation_steps_performance",
      "test_test_time_compute_scaling_performance",
      "test_statistical_analysis_performance",
      "test_hardware_manager_memory_optimization",
      "test_dataset_memory_efficiency",
      "test_visualization_and_io_performance",
      "test_curriculum_learning_scalability",
      "test_task_diversity_tracking_scalability",
      "test_continual_learning_stress_test",
      "test_hardware_manager_memory_optimization",
      "test_dataset_memory_efficiency",
      "test_visualization_and_io_performance",
      "test_curriculum_learning_scalability",
      "test_task_diversity_tracking_scalability",
      "test_continual_learning_stress_test",
      "test_curriculum_learning_scalability",
      "test_task_diversity_tracking_scalability",
      "test_continual_learning_stress_test"
    ],
    "total_items": 22
  },
  "tests/unit/test_property_based_algorithms.py": {
    "classes": [
      "TestAlgorithmMathematicalProperties",
      "TestStatisticalPropertyInvariants",
      "TestHardwareOptimizationProperties",
      "TestConfigurationValidationProperties"
    ],
    "functions": [],
    "methods": [
      "test_prototypical_networks_distance_properties",
      "test_maml_gradient_properties",
      "test_test_time_compute_scaling_properties",
      "test_confidence_interval_properties",
      "test_accuracy_computation_properties",
      "test_adaptation_speed_properties",
      "test_hardware_manager_properties",
      "test_difficulty_estimation_properties",
      "test_task_configuration_properties",
      "test_maml_configuration_properties",
      "test_confidence_interval_properties",
      "test_accuracy_computation_properties",
      "test_adaptation_speed_properties",
      "test_hardware_manager_properties",
      "test_difficulty_estimation_properties",
      "test_task_configuration_properties",
      "test_maml_configuration_properties",
      "test_hardware_manager_properties",
      "test_difficulty_estimation_properties",
      "test_task_configuration_properties",
      "test_maml_configuration_properties",
      "test_task_configuration_properties",
      "test_maml_configuration_properties"
    ],
    "total_items": 27
  },
  "tests/unit/test_protonet_math.py": {
    "classes": [],
    "functions": [
      "test_prototypes_are_class_means",
      "test_cosine_normalization_and_temperature",
      "test_squared_euclidean_distance_computation",
      "test_label_remapping"
    ],
    "methods": [],
    "total_items": 4
  },
  "tests/unit/test_protonet_research_correctness.py": {
    "classes": [],
    "functions": [
      "per_class_prototypes",
      "test_prototypes_are_class_means_and_sign",
      "test_cosine_normalization_and_temperature_monotone"
    ],
    "methods": [],
    "total_items": 3
  },
  "tests/unit/test_test_time_compute.py": {
    "classes": [
      "TestTestTimeComputeConfig",
      "TestTestTimeComputeScaler",
      "TestTestTimeComputePerformance",
      "TestTestTimeComputePropertyBased",
      "TestFixmeSolutions",
      "TestTestTimeComputeIntegration"
    ],
    "functions": [],
    "methods": [
      "test_default_configuration",
      "test_all_compute_strategies",
      "test_research_accurate_configurations",
      "test_initialization",
      "test_scale_compute_basic_strategy",
      "test_all_compute_strategies_execution",
      "test_process_reward_model_solution",
      "test_test_time_training_solution",
      "test_chain_of_thought_solution",
      "test_hybrid_strategy_solution",
      "test_ensemble_predictions_solution",
      "test_adaptive_compute_allocation",
      "test_compute_steps_scaling",
      "test_temperature_scaling_effects",
      "test_error_handling_invalid_input",
      "test_device_compatibility",
      "test_compute_time_scaling",
      "test_memory_efficiency",
      "test_output_shape_invariants",
      "test_configuration_robustness",
      "test_all_fixme_solutions_implemented",
      "test_research_paper_accuracy_citations",
      "test_integration_with_prototypical_networks",
      "test_integration_with_continual_learning",
      "test_initialization",
      "test_scale_compute_basic_strategy",
      "test_all_compute_strategies_execution",
      "test_process_reward_model_solution",
      "test_test_time_training_solution",
      "test_chain_of_thought_solution",
      "test_hybrid_strategy_solution",
      "test_ensemble_predictions_solution",
      "test_adaptive_compute_allocation",
      "test_compute_steps_scaling",
      "test_temperature_scaling_effects",
      "test_error_handling_invalid_input",
      "test_device_compatibility",
      "test_compute_time_scaling",
      "test_memory_efficiency",
      "test_output_shape_invariants",
      "test_configuration_robustness",
      "test_all_fixme_solutions_implemented",
      "test_research_paper_accuracy_citations",
      "test_integration_with_prototypical_networks",
      "test_integration_with_continual_learning",
      "test_compute_time_scaling",
      "test_memory_efficiency",
      "test_output_shape_invariants",
      "test_configuration_robustness",
      "test_all_fixme_solutions_implemented",
      "test_research_paper_accuracy_citations",
      "test_integration_with_prototypical_networks",
      "test_integration_with_continual_learning",
      "test_output_shape_invariants",
      "test_configuration_robustness",
      "test_all_fixme_solutions_implemented",
      "test_research_paper_accuracy_citations",
      "test_integration_with_prototypical_networks",
      "test_integration_with_continual_learning",
      "test_all_fixme_solutions_implemented",
      "test_research_paper_accuracy_citations",
      "test_integration_with_prototypical_networks",
      "test_integration_with_continual_learning",
      "test_integration_with_prototypical_networks",
      "test_integration_with_continual_learning"
    ],
    "total_items": 71
  },
  "tests/unit/test_test_time_compute_solutions.py": {
    "classes": [
      "TestTestTimeCompute",
      "TestTestTimeComputeConfig",
      "TestTestTimeComputeIntegration"
    ],
    "functions": [],
    "methods": [
      "setup_method",
      "test_basic_test_time_compute",
      "test_snell2024_strategy",
      "test_akyurek2024_strategy",
      "test_openai_o1_strategy",
      "test_hybrid_strategy",
      "test_process_reward_verification",
      "test_consistency_verification",
      "test_gradient_verification",
      "test_attention_based_reasoning",
      "test_feature_based_reasoning",
      "test_prototype_distance_reasoning",
      "test_compute_budget_management",
      "test_adaptive_allocation",
      "test_compute_statistics_tracking",
      "test_config_defaults",
      "test_config_factory_functions",
      "setup_method",
      "__init__",
      "forward",
      "test_end_to_end_scaling",
      "test_scaling_with_different_strategies",
      "test_compute_efficiency",
      "test_reasoning_path_quality",
      "test_verification_consistency",
      "test_memory_efficiency",
      "test_config_defaults",
      "test_config_factory_functions",
      "setup_method",
      "__init__",
      "forward",
      "test_end_to_end_scaling",
      "test_scaling_with_different_strategies",
      "test_compute_efficiency",
      "test_reasoning_path_quality",
      "test_verification_consistency",
      "test_memory_efficiency",
      "setup_method",
      "__init__",
      "forward",
      "test_end_to_end_scaling",
      "test_scaling_with_different_strategies",
      "test_compute_efficiency",
      "test_reasoning_path_quality",
      "test_verification_consistency",
      "test_memory_efficiency"
    ],
    "total_items": 49
  },
  "tests/unit/test_uncertainty_components.py": {
    "classes": [
      "TestUncertaintyAwareDistance",
      "TestUncertaintyConfig",
      "TestUncertaintyIntegration"
    ],
    "functions": [],
    "methods": [
      "setup_method",
      "test_monte_carlo_dropout_method",
      "test_deep_ensemble_method",
      "test_evidential_method",
      "test_bayesian_method",
      "test_invalid_method",
      "test_gradient_flow",
      "test_config_defaults",
      "test_different_input_sizes",
      "test_config_creation",
      "test_config_validation",
      "test_uncertainty_with_prototypical_networks",
      "test_uncertainty_computation_consistency",
      "test_config_creation",
      "test_config_validation",
      "test_uncertainty_with_prototypical_networks",
      "test_uncertainty_computation_consistency",
      "test_uncertainty_with_prototypical_networks",
      "test_uncertainty_computation_consistency"
    ],
    "total_items": 22
  },
  "tests/unit/test_utils.py": {
    "classes": [
      "TestDatasetConfig",
      "TestMetricsConfig",
      "TestStatsConfig",
      "TestCurriculumConfig",
      "TestDiversityConfig",
      "TestMetaLearningDataset",
      "TestEvaluationMetrics",
      "TestStatisticalAnalysis",
      "TestCurriculumLearning",
      "TestTaskDiversityTracker",
      "TestUtilityFunctions",
      "TestFactoryFunctions",
      "TestFixmeSolutions",
      "TestUtilsIntegration",
      "TestPropertyBasedUtils"
    ],
    "functions": [],
    "methods": [
      "test_dataset_config_defaults",
      "test_dataset_config_validation",
      "test_dataset_config_property_based",
      "test_metrics_config_defaults",
      "test_metrics_config_confidence_methods",
      "test_metrics_config_property_based",
      "test_stats_config_defaults",
      "test_stats_config_multiple_comparisons",
      "test_curriculum_config_defaults",
      "test_curriculum_config_strategies",
      "test_diversity_config_defaults",
      "temp_dataset_dir",
      "sample_dataset_config",
      "mock_data_files",
      "test_meta_learning_dataset_init",
      "test_dataset_length",
      "test_dataset_getitem",
      "test_dataset_caching",
      "test_dataset_no_caching",
      "test_dataset_different_episodes",
      "metrics_evaluator",
      "sample_predictions",
      "test_evaluation_metrics_init",
      "test_accuracy_computation",
      "test_confidence_interval_computation",
      "test_bootstrap_confidence_interval",
      "test_standard_error_computation",
      "test_evaluate_episode",
      "test_different_confidence_methods",
      "stats_analyzer",
      "sample_results",
      "test_statistical_analysis_init",
      "test_t_test_computation",
      "test_welch_t_test",
      "test_effect_size_computation",
      "test_multiple_comparisons_correction",
      "test_compare_multiple_methods",
      "curriculum_scheduler",
      "sample_performance_history",
      "test_curriculum_learning_init",
      "test_difficulty_based_curriculum",
      "test_curriculum_adaptation_window",
      "test_max_difficulty_limit",
      "test_different_curriculum_strategies",
      "test_curriculum_step_function",
      "test_get_current_difficulty",
      "diversity_tracker",
      "sample_tasks",
      "test_task_diversity_tracker_init",
      "test_add_task_to_tracker",
      "test_compute_feature_diversity",
      "test_compute_label_diversity",
      "test_diversity_window_management",
      "test_get_current_diversity",
      "test_different_diversity_metrics",
      "test_basic_confidence_interval_function",
      "test_basic_ci_different_confidence_levels",
      "test_basic_ci_small_sample_size",
      "test_compute_confidence_interval_function",
      "test_estimate_difficulty_function",
      "test_estimate_difficulty_different_methods",
      "test_track_task_diversity_function",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "test_metrics_config_defaults",
      "test_metrics_config_confidence_methods",
      "test_metrics_config_property_based",
      "test_stats_config_defaults",
      "test_stats_config_multiple_comparisons",
      "test_curriculum_config_defaults",
      "test_curriculum_config_strategies",
      "test_diversity_config_defaults",
      "temp_dataset_dir",
      "sample_dataset_config",
      "mock_data_files",
      "test_meta_learning_dataset_init",
      "test_dataset_length",
      "test_dataset_getitem",
      "test_dataset_caching",
      "test_dataset_no_caching",
      "test_dataset_different_episodes",
      "metrics_evaluator",
      "sample_predictions",
      "test_evaluation_metrics_init",
      "test_accuracy_computation",
      "test_confidence_interval_computation",
      "test_bootstrap_confidence_interval",
      "test_standard_error_computation",
      "test_evaluate_episode",
      "test_different_confidence_methods",
      "stats_analyzer",
      "sample_results",
      "test_statistical_analysis_init",
      "test_t_test_computation",
      "test_welch_t_test",
      "test_effect_size_computation",
      "test_multiple_comparisons_correction",
      "test_compare_multiple_methods",
      "curriculum_scheduler",
      "sample_performance_history",
      "test_curriculum_learning_init",
      "test_difficulty_based_curriculum",
      "test_curriculum_adaptation_window",
      "test_max_difficulty_limit",
      "test_different_curriculum_strategies",
      "test_curriculum_step_function",
      "test_get_current_difficulty",
      "diversity_tracker",
      "sample_tasks",
      "test_task_diversity_tracker_init",
      "test_add_task_to_tracker",
      "test_compute_feature_diversity",
      "test_compute_label_diversity",
      "test_diversity_window_management",
      "test_get_current_diversity",
      "test_different_diversity_metrics",
      "test_basic_confidence_interval_function",
      "test_basic_ci_different_confidence_levels",
      "test_basic_ci_small_sample_size",
      "test_compute_confidence_interval_function",
      "test_estimate_difficulty_function",
      "test_estimate_difficulty_different_methods",
      "test_track_task_diversity_function",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "test_stats_config_defaults",
      "test_stats_config_multiple_comparisons",
      "test_curriculum_config_defaults",
      "test_curriculum_config_strategies",
      "test_diversity_config_defaults",
      "temp_dataset_dir",
      "sample_dataset_config",
      "mock_data_files",
      "test_meta_learning_dataset_init",
      "test_dataset_length",
      "test_dataset_getitem",
      "test_dataset_caching",
      "test_dataset_no_caching",
      "test_dataset_different_episodes",
      "metrics_evaluator",
      "sample_predictions",
      "test_evaluation_metrics_init",
      "test_accuracy_computation",
      "test_confidence_interval_computation",
      "test_bootstrap_confidence_interval",
      "test_standard_error_computation",
      "test_evaluate_episode",
      "test_different_confidence_methods",
      "stats_analyzer",
      "sample_results",
      "test_statistical_analysis_init",
      "test_t_test_computation",
      "test_welch_t_test",
      "test_effect_size_computation",
      "test_multiple_comparisons_correction",
      "test_compare_multiple_methods",
      "curriculum_scheduler",
      "sample_performance_history",
      "test_curriculum_learning_init",
      "test_difficulty_based_curriculum",
      "test_curriculum_adaptation_window",
      "test_max_difficulty_limit",
      "test_different_curriculum_strategies",
      "test_curriculum_step_function",
      "test_get_current_difficulty",
      "diversity_tracker",
      "sample_tasks",
      "test_task_diversity_tracker_init",
      "test_add_task_to_tracker",
      "test_compute_feature_diversity",
      "test_compute_label_diversity",
      "test_diversity_window_management",
      "test_get_current_diversity",
      "test_different_diversity_metrics",
      "test_basic_confidence_interval_function",
      "test_basic_ci_different_confidence_levels",
      "test_basic_ci_small_sample_size",
      "test_compute_confidence_interval_function",
      "test_estimate_difficulty_function",
      "test_estimate_difficulty_different_methods",
      "test_track_task_diversity_function",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "test_curriculum_config_defaults",
      "test_curriculum_config_strategies",
      "test_diversity_config_defaults",
      "temp_dataset_dir",
      "sample_dataset_config",
      "mock_data_files",
      "test_meta_learning_dataset_init",
      "test_dataset_length",
      "test_dataset_getitem",
      "test_dataset_caching",
      "test_dataset_no_caching",
      "test_dataset_different_episodes",
      "metrics_evaluator",
      "sample_predictions",
      "test_evaluation_metrics_init",
      "test_accuracy_computation",
      "test_confidence_interval_computation",
      "test_bootstrap_confidence_interval",
      "test_standard_error_computation",
      "test_evaluate_episode",
      "test_different_confidence_methods",
      "stats_analyzer",
      "sample_results",
      "test_statistical_analysis_init",
      "test_t_test_computation",
      "test_welch_t_test",
      "test_effect_size_computation",
      "test_multiple_comparisons_correction",
      "test_compare_multiple_methods",
      "curriculum_scheduler",
      "sample_performance_history",
      "test_curriculum_learning_init",
      "test_difficulty_based_curriculum",
      "test_curriculum_adaptation_window",
      "test_max_difficulty_limit",
      "test_different_curriculum_strategies",
      "test_curriculum_step_function",
      "test_get_current_difficulty",
      "diversity_tracker",
      "sample_tasks",
      "test_task_diversity_tracker_init",
      "test_add_task_to_tracker",
      "test_compute_feature_diversity",
      "test_compute_label_diversity",
      "test_diversity_window_management",
      "test_get_current_diversity",
      "test_different_diversity_metrics",
      "test_basic_confidence_interval_function",
      "test_basic_ci_different_confidence_levels",
      "test_basic_ci_small_sample_size",
      "test_compute_confidence_interval_function",
      "test_estimate_difficulty_function",
      "test_estimate_difficulty_different_methods",
      "test_track_task_diversity_function",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "test_diversity_config_defaults",
      "temp_dataset_dir",
      "sample_dataset_config",
      "mock_data_files",
      "test_meta_learning_dataset_init",
      "test_dataset_length",
      "test_dataset_getitem",
      "test_dataset_caching",
      "test_dataset_no_caching",
      "test_dataset_different_episodes",
      "metrics_evaluator",
      "sample_predictions",
      "test_evaluation_metrics_init",
      "test_accuracy_computation",
      "test_confidence_interval_computation",
      "test_bootstrap_confidence_interval",
      "test_standard_error_computation",
      "test_evaluate_episode",
      "test_different_confidence_methods",
      "stats_analyzer",
      "sample_results",
      "test_statistical_analysis_init",
      "test_t_test_computation",
      "test_welch_t_test",
      "test_effect_size_computation",
      "test_multiple_comparisons_correction",
      "test_compare_multiple_methods",
      "curriculum_scheduler",
      "sample_performance_history",
      "test_curriculum_learning_init",
      "test_difficulty_based_curriculum",
      "test_curriculum_adaptation_window",
      "test_max_difficulty_limit",
      "test_different_curriculum_strategies",
      "test_curriculum_step_function",
      "test_get_current_difficulty",
      "diversity_tracker",
      "sample_tasks",
      "test_task_diversity_tracker_init",
      "test_add_task_to_tracker",
      "test_compute_feature_diversity",
      "test_compute_label_diversity",
      "test_diversity_window_management",
      "test_get_current_diversity",
      "test_different_diversity_metrics",
      "test_basic_confidence_interval_function",
      "test_basic_ci_different_confidence_levels",
      "test_basic_ci_small_sample_size",
      "test_compute_confidence_interval_function",
      "test_estimate_difficulty_function",
      "test_estimate_difficulty_different_methods",
      "test_track_task_diversity_function",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "temp_dataset_dir",
      "sample_dataset_config",
      "mock_data_files",
      "test_meta_learning_dataset_init",
      "test_dataset_length",
      "test_dataset_getitem",
      "test_dataset_caching",
      "test_dataset_no_caching",
      "test_dataset_different_episodes",
      "metrics_evaluator",
      "sample_predictions",
      "test_evaluation_metrics_init",
      "test_accuracy_computation",
      "test_confidence_interval_computation",
      "test_bootstrap_confidence_interval",
      "test_standard_error_computation",
      "test_evaluate_episode",
      "test_different_confidence_methods",
      "stats_analyzer",
      "sample_results",
      "test_statistical_analysis_init",
      "test_t_test_computation",
      "test_welch_t_test",
      "test_effect_size_computation",
      "test_multiple_comparisons_correction",
      "test_compare_multiple_methods",
      "curriculum_scheduler",
      "sample_performance_history",
      "test_curriculum_learning_init",
      "test_difficulty_based_curriculum",
      "test_curriculum_adaptation_window",
      "test_max_difficulty_limit",
      "test_different_curriculum_strategies",
      "test_curriculum_step_function",
      "test_get_current_difficulty",
      "diversity_tracker",
      "sample_tasks",
      "test_task_diversity_tracker_init",
      "test_add_task_to_tracker",
      "test_compute_feature_diversity",
      "test_compute_label_diversity",
      "test_diversity_window_management",
      "test_get_current_diversity",
      "test_different_diversity_metrics",
      "test_basic_confidence_interval_function",
      "test_basic_ci_different_confidence_levels",
      "test_basic_ci_small_sample_size",
      "test_compute_confidence_interval_function",
      "test_estimate_difficulty_function",
      "test_estimate_difficulty_different_methods",
      "test_track_task_diversity_function",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "metrics_evaluator",
      "sample_predictions",
      "test_evaluation_metrics_init",
      "test_accuracy_computation",
      "test_confidence_interval_computation",
      "test_bootstrap_confidence_interval",
      "test_standard_error_computation",
      "test_evaluate_episode",
      "test_different_confidence_methods",
      "stats_analyzer",
      "sample_results",
      "test_statistical_analysis_init",
      "test_t_test_computation",
      "test_welch_t_test",
      "test_effect_size_computation",
      "test_multiple_comparisons_correction",
      "test_compare_multiple_methods",
      "curriculum_scheduler",
      "sample_performance_history",
      "test_curriculum_learning_init",
      "test_difficulty_based_curriculum",
      "test_curriculum_adaptation_window",
      "test_max_difficulty_limit",
      "test_different_curriculum_strategies",
      "test_curriculum_step_function",
      "test_get_current_difficulty",
      "diversity_tracker",
      "sample_tasks",
      "test_task_diversity_tracker_init",
      "test_add_task_to_tracker",
      "test_compute_feature_diversity",
      "test_compute_label_diversity",
      "test_diversity_window_management",
      "test_get_current_diversity",
      "test_different_diversity_metrics",
      "test_basic_confidence_interval_function",
      "test_basic_ci_different_confidence_levels",
      "test_basic_ci_small_sample_size",
      "test_compute_confidence_interval_function",
      "test_estimate_difficulty_function",
      "test_estimate_difficulty_different_methods",
      "test_track_task_diversity_function",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "stats_analyzer",
      "sample_results",
      "test_statistical_analysis_init",
      "test_t_test_computation",
      "test_welch_t_test",
      "test_effect_size_computation",
      "test_multiple_comparisons_correction",
      "test_compare_multiple_methods",
      "curriculum_scheduler",
      "sample_performance_history",
      "test_curriculum_learning_init",
      "test_difficulty_based_curriculum",
      "test_curriculum_adaptation_window",
      "test_max_difficulty_limit",
      "test_different_curriculum_strategies",
      "test_curriculum_step_function",
      "test_get_current_difficulty",
      "diversity_tracker",
      "sample_tasks",
      "test_task_diversity_tracker_init",
      "test_add_task_to_tracker",
      "test_compute_feature_diversity",
      "test_compute_label_diversity",
      "test_diversity_window_management",
      "test_get_current_diversity",
      "test_different_diversity_metrics",
      "test_basic_confidence_interval_function",
      "test_basic_ci_different_confidence_levels",
      "test_basic_ci_small_sample_size",
      "test_compute_confidence_interval_function",
      "test_estimate_difficulty_function",
      "test_estimate_difficulty_different_methods",
      "test_track_task_diversity_function",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "curriculum_scheduler",
      "sample_performance_history",
      "test_curriculum_learning_init",
      "test_difficulty_based_curriculum",
      "test_curriculum_adaptation_window",
      "test_max_difficulty_limit",
      "test_different_curriculum_strategies",
      "test_curriculum_step_function",
      "test_get_current_difficulty",
      "diversity_tracker",
      "sample_tasks",
      "test_task_diversity_tracker_init",
      "test_add_task_to_tracker",
      "test_compute_feature_diversity",
      "test_compute_label_diversity",
      "test_diversity_window_management",
      "test_get_current_diversity",
      "test_different_diversity_metrics",
      "test_basic_confidence_interval_function",
      "test_basic_ci_different_confidence_levels",
      "test_basic_ci_small_sample_size",
      "test_compute_confidence_interval_function",
      "test_estimate_difficulty_function",
      "test_estimate_difficulty_different_methods",
      "test_track_task_diversity_function",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "diversity_tracker",
      "sample_tasks",
      "test_task_diversity_tracker_init",
      "test_add_task_to_tracker",
      "test_compute_feature_diversity",
      "test_compute_label_diversity",
      "test_diversity_window_management",
      "test_get_current_diversity",
      "test_different_diversity_metrics",
      "test_basic_confidence_interval_function",
      "test_basic_ci_different_confidence_levels",
      "test_basic_ci_small_sample_size",
      "test_compute_confidence_interval_function",
      "test_estimate_difficulty_function",
      "test_estimate_difficulty_different_methods",
      "test_track_task_diversity_function",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "test_basic_confidence_interval_function",
      "test_basic_ci_different_confidence_levels",
      "test_basic_ci_small_sample_size",
      "test_compute_confidence_interval_function",
      "test_estimate_difficulty_function",
      "test_estimate_difficulty_different_methods",
      "test_track_task_diversity_function",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "temp_data_dir",
      "test_create_dataset_factory",
      "test_create_dataset_invalid_type",
      "test_create_metrics_evaluator_factory",
      "test_create_metrics_evaluator_invalid_type",
      "test_create_curriculum_scheduler_factory",
      "test_create_curriculum_scheduler_invalid_type",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "test_advanced_dataset_utilities_solution",
      "test_research_accurate_confidence_intervals_solution",
      "test_multiple_difficulty_estimation_methods_solution",
      "test_comprehensive_statistical_analysis_solution",
      "test_curriculum_learning_strategies_solution",
      "test_task_diversity_tracking_solution",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "complete_utils_setup",
      "test_complete_meta_learning_pipeline",
      "test_dataset_evaluator_integration",
      "test_confidence_interval_properties",
      "test_curriculum_properties",
      "test_confidence_interval_properties",
      "test_curriculum_properties"
    ],
    "total_items": 706
  },
  "tests/unit/test_working_comprehensive_coverage.py": {
    "classes": [
      "TestWorkingComprehensiveCoverage",
      "TestUtilityFunctions"
    ],
    "functions": [],
    "methods": [
      "setup_method",
      "test_test_time_compute_config_all_parameters",
      "test_test_time_compute_scaler_real_api",
      "__init__",
      "forward",
      "test_maml_config_real_parameters",
      "test_maml_learner_with_actual_api",
      "__init__",
      "forward",
      "test_all_maml_variants_initialization",
      "__init__",
      "forward",
      "test_prototypical_networks_real_api",
      "test_matching_networks_real_api",
      "test_relation_networks_real_api",
      "test_online_meta_learner_real_api",
      "test_meta_learning_dataset_real_api",
      "test_evaluation_metrics_real_api",
      "test_statistical_analysis_real_api",
      "test_curriculum_learning_real_api",
      "test_task_diversity_tracker_real_api",
      "test_hardware_manager_real_api",
      "test_multi_gpu_manager_real_api",
      "test_all_configurations_can_be_created",
      "test_backward_compatibility_aliases_exist",
      "test_minimal_integration_pipeline",
      "test_configuration_edge_cases",
      "test_tensor_shape_handling",
      "test_factory_functions_exist_and_callable",
      "test_utility_functions_basic_usage",
      "test_factory_functions_exist_and_callable",
      "test_utility_functions_basic_usage"
    ],
    "total_items": 34
  },
  "validate_ci.py": {
    "classes": [],
    "functions": [
      "run_command",
      "main"
    ],
    "methods": [],
    "total_items": 2
  },
  "working_cli_demo.py": {
    "classes": [
      "SimpleConvNet"
    ],
    "functions": [
      "load_cifar10_few_shot_data",
      "train_few_shot_model",
      "run_working_demo",
      "main"
    ],
    "methods": [
      "__init__",
      "forward",
      "load_cifar10_few_shot_data",
      "train_few_shot_model",
      "run_working_demo",
      "main"
    ],
    "total_items": 11
  },
  "working_demo_5min.py": {
    "classes": [
      "SimpleModel"
    ],
    "functions": [
      "main"
    ],
    "methods": [
      "__init__",
      "forward",
      "main"
    ],
    "total_items": 5
  }
}